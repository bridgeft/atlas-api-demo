# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Household(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'firm_id': 'int',
        'entity_id': 'str',
        'opening_date': 'datetime',
        'inception_date': 'datetime',
        'close_date': 'datetime',
        'status': 'str',
        'benchmarks_ids': 'list[int]',
        'is_account': 'bool',
        'is_household': 'bool',
        'last_reporting_date': 'datetime',
        'first_account_reporting_date': 'datetime',
        'last_account_reporting_date': 'datetime',
        'short_name': 'str',
        'created_at_utc': 'datetime',
        'updated_at_utc': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'firm_id': 'firm_id',
        'entity_id': 'entity_id',
        'opening_date': 'opening_date',
        'inception_date': 'inception_date',
        'close_date': 'close_date',
        'status': 'status',
        'benchmarks_ids': 'benchmarks_ids',
        'is_account': 'is_account',
        'is_household': 'is_household',
        'last_reporting_date': 'last_reporting_date',
        'first_account_reporting_date': 'first_account_reporting_date',
        'last_account_reporting_date': 'last_account_reporting_date',
        'short_name': 'short_name',
        'created_at_utc': 'created_at_utc',
        'updated_at_utc': 'updated_at_utc'
    }

    def __init__(self, id=None, name=None, firm_id=None, entity_id=None, opening_date=None, inception_date=None, close_date=None, status=None, benchmarks_ids=None, is_account=None, is_household=None, last_reporting_date=None, first_account_reporting_date=None, last_account_reporting_date=None, short_name=None, created_at_utc=None, updated_at_utc=None):  # noqa: E501
        """Household - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._firm_id = None
        self._entity_id = None
        self._opening_date = None
        self._inception_date = None
        self._close_date = None
        self._status = None
        self._benchmarks_ids = None
        self._is_account = None
        self._is_household = None
        self._last_reporting_date = None
        self._first_account_reporting_date = None
        self._last_account_reporting_date = None
        self._short_name = None
        self._created_at_utc = None
        self._updated_at_utc = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if firm_id is not None:
            self.firm_id = firm_id
        if entity_id is not None:
            self.entity_id = entity_id
        if opening_date is not None:
            self.opening_date = opening_date
        if inception_date is not None:
            self.inception_date = inception_date
        if close_date is not None:
            self.close_date = close_date
        if status is not None:
            self.status = status
        if benchmarks_ids is not None:
            self.benchmarks_ids = benchmarks_ids
        if is_account is not None:
            self.is_account = is_account
        if is_household is not None:
            self.is_household = is_household
        if last_reporting_date is not None:
            self.last_reporting_date = last_reporting_date
        if first_account_reporting_date is not None:
            self.first_account_reporting_date = first_account_reporting_date
        if last_account_reporting_date is not None:
            self.last_account_reporting_date = last_account_reporting_date
        if short_name is not None:
            self.short_name = short_name
        if created_at_utc is not None:
            self.created_at_utc = created_at_utc
        if updated_at_utc is not None:
            self.updated_at_utc = updated_at_utc

    @property
    def id(self):
        """Gets the id of this Household.  # noqa: E501

        Unique household identifier  # noqa: E501

        :return: The id of this Household.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Household.

        Unique household identifier  # noqa: E501

        :param id: The id of this Household.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Household.  # noqa: E501

        Populated from custodian data but can be modified by users  # noqa: E501

        :return: The name of this Household.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Household.

        Populated from custodian data but can be modified by users  # noqa: E501

        :param name: The name of this Household.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def firm_id(self):
        """Gets the firm_id of this Household.  # noqa: E501

        ID of the owning firm  # noqa: E501

        :return: The firm_id of this Household.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this Household.

        ID of the owning firm  # noqa: E501

        :param firm_id: The firm_id of this Household.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def entity_id(self):
        """Gets the entity_id of this Household.  # noqa: E501

        See Entiti ID Prefixes  # noqa: E501

        :return: The entity_id of this Household.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Household.

        See Entiti ID Prefixes  # noqa: E501

        :param entity_id: The entity_id of this Household.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def opening_date(self):
        """Gets the opening_date of this Household.  # noqa: E501

        Date the household was opened  # noqa: E501

        :return: The opening_date of this Household.  # noqa: E501
        :rtype: datetime
        """
        return self._opening_date

    @opening_date.setter
    def opening_date(self, opening_date):
        """Sets the opening_date of this Household.

        Date the household was opened  # noqa: E501

        :param opening_date: The opening_date of this Household.  # noqa: E501
        :type: datetime
        """

        self._opening_date = opening_date

    @property
    def inception_date(self):
        """Gets the inception_date of this Household.  # noqa: E501

        Date of household inception, if applicable. May differ from opening date  # noqa: E501

        :return: The inception_date of this Household.  # noqa: E501
        :rtype: datetime
        """
        return self._inception_date

    @inception_date.setter
    def inception_date(self, inception_date):
        """Sets the inception_date of this Household.

        Date of household inception, if applicable. May differ from opening date  # noqa: E501

        :param inception_date: The inception_date of this Household.  # noqa: E501
        :type: datetime
        """

        self._inception_date = inception_date

    @property
    def close_date(self):
        """Gets the close_date of this Household.  # noqa: E501

        Date the household was closed, if applicable  # noqa: E501

        :return: The close_date of this Household.  # noqa: E501
        :rtype: datetime
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date):
        """Sets the close_date of this Household.

        Date the household was closed, if applicable  # noqa: E501

        :param close_date: The close_date of this Household.  # noqa: E501
        :type: datetime
        """

        self._close_date = close_date

    @property
    def status(self):
        """Gets the status of this Household.  # noqa: E501

        See Account and Household Status Codes.  # noqa: E501

        :return: The status of this Household.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Household.

        See Account and Household Status Codes.  # noqa: E501

        :param status: The status of this Household.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def benchmarks_ids(self):
        """Gets the benchmarks_ids of this Household.  # noqa: E501

        List of ids for benchmarks associated with the household  # noqa: E501

        :return: The benchmarks_ids of this Household.  # noqa: E501
        :rtype: list[int]
        """
        return self._benchmarks_ids

    @benchmarks_ids.setter
    def benchmarks_ids(self, benchmarks_ids):
        """Sets the benchmarks_ids of this Household.

        List of ids for benchmarks associated with the household  # noqa: E501

        :param benchmarks_ids: The benchmarks_ids of this Household.  # noqa: E501
        :type: list[int]
        """

        self._benchmarks_ids = benchmarks_ids

    @property
    def is_account(self):
        """Gets the is_account of this Household.  # noqa: E501

        Is this entity an account? (No)  # noqa: E501

        :return: The is_account of this Household.  # noqa: E501
        :rtype: bool
        """
        return self._is_account

    @is_account.setter
    def is_account(self, is_account):
        """Sets the is_account of this Household.

        Is this entity an account? (No)  # noqa: E501

        :param is_account: The is_account of this Household.  # noqa: E501
        :type: bool
        """

        self._is_account = is_account

    @property
    def is_household(self):
        """Gets the is_household of this Household.  # noqa: E501

        Is this entity a household? (Yes)  # noqa: E501

        :return: The is_household of this Household.  # noqa: E501
        :rtype: bool
        """
        return self._is_household

    @is_household.setter
    def is_household(self, is_household):
        """Sets the is_household of this Household.

        Is this entity a household? (Yes)  # noqa: E501

        :param is_household: The is_household of this Household.  # noqa: E501
        :type: bool
        """

        self._is_household = is_household

    @property
    def last_reporting_date(self):
        """Gets the last_reporting_date of this Household.  # noqa: E501

        Most recent date that portfolio data was processed for this household  # noqa: E501

        :return: The last_reporting_date of this Household.  # noqa: E501
        :rtype: datetime
        """
        return self._last_reporting_date

    @last_reporting_date.setter
    def last_reporting_date(self, last_reporting_date):
        """Sets the last_reporting_date of this Household.

        Most recent date that portfolio data was processed for this household  # noqa: E501

        :param last_reporting_date: The last_reporting_date of this Household.  # noqa: E501
        :type: datetime
        """

        self._last_reporting_date = last_reporting_date

    @property
    def first_account_reporting_date(self):
        """Gets the first_account_reporting_date of this Household.  # noqa: E501

        Earliest date that portfolio data was processed among accounts in this household  # noqa: E501

        :return: The first_account_reporting_date of this Household.  # noqa: E501
        :rtype: datetime
        """
        return self._first_account_reporting_date

    @first_account_reporting_date.setter
    def first_account_reporting_date(self, first_account_reporting_date):
        """Sets the first_account_reporting_date of this Household.

        Earliest date that portfolio data was processed among accounts in this household  # noqa: E501

        :param first_account_reporting_date: The first_account_reporting_date of this Household.  # noqa: E501
        :type: datetime
        """

        self._first_account_reporting_date = first_account_reporting_date

    @property
    def last_account_reporting_date(self):
        """Gets the last_account_reporting_date of this Household.  # noqa: E501

        Most recent date that portfolio data was processed among accounts in this household  # noqa: E501

        :return: The last_account_reporting_date of this Household.  # noqa: E501
        :rtype: datetime
        """
        return self._last_account_reporting_date

    @last_account_reporting_date.setter
    def last_account_reporting_date(self, last_account_reporting_date):
        """Sets the last_account_reporting_date of this Household.

        Most recent date that portfolio data was processed among accounts in this household  # noqa: E501

        :param last_account_reporting_date: The last_account_reporting_date of this Household.  # noqa: E501
        :type: datetime
        """

        self._last_account_reporting_date = last_account_reporting_date

    @property
    def short_name(self):
        """Gets the short_name of this Household.  # noqa: E501

        Short name for the household object  # noqa: E501

        :return: The short_name of this Household.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Household.

        Short name for the household object  # noqa: E501

        :param short_name: The short_name of this Household.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def created_at_utc(self):
        """Gets the created_at_utc of this Household.  # noqa: E501

        Timestamp for when the record was created  # noqa: E501

        :return: The created_at_utc of this Household.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at_utc

    @created_at_utc.setter
    def created_at_utc(self, created_at_utc):
        """Sets the created_at_utc of this Household.

        Timestamp for when the record was created  # noqa: E501

        :param created_at_utc: The created_at_utc of this Household.  # noqa: E501
        :type: datetime
        """

        self._created_at_utc = created_at_utc

    @property
    def updated_at_utc(self):
        """Gets the updated_at_utc of this Household.  # noqa: E501

        Timestamp for when the record was updated  # noqa: E501

        :return: The updated_at_utc of this Household.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at_utc

    @updated_at_utc.setter
    def updated_at_utc(self, updated_at_utc):
        """Sets the updated_at_utc of this Household.

        Timestamp for when the record was updated  # noqa: E501

        :param updated_at_utc: The updated_at_utc of this Household.  # noqa: E501
        :type: datetime
        """

        self._updated_at_utc = updated_at_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Household, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Household):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

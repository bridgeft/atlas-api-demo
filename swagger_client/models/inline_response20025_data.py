# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20025Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'firm_id': 'int',
        'household_id': 'int',
        'minimum_ids': 'list[int]',
        'billing_date': 'datetime',
        'billing_group_id': 'int',
        'snapshot_date': 'datetime',
        'billing_report_id': 'int',
        'account_value_on_snapshot_date': 'object',
        'account_cash_on_snapshot_date': 'object',
        'account_value_on_run_date': 'object',
        'account_cash_on_run_date': 'object',
        'group_value_on_snapshot_date': 'object',
        'group_cash_on_snapshot_date': 'object',
        'group_value_on_run_date': 'object',
        'group_cash_on_run_date': 'object',
        'annual_fee': 'float',
        'annual_debit': 'float',
        'total_balance': 'float',
        'period_debit': 'float',
        'direct_billed_period_debit': 'float',
        'custodian_billed_period_debit': 'float',
        'account_ids': 'list[int]',
        'fee_structure_ids': 'list[int]',
        'n_accounts': 'int',
        'n_fee_structures': 'int',
        'account_df': 'object',
        'group_df': 'object',
        'minfee_df': 'object',
        'fee_structures_serialized': 'object',
        'asset_adjustments_serialized': 'object',
        'billing_group_serialized': 'object',
        'download_url': 'str',
        'due_date': 'datetime',
        'account_fs_df': 'object',
        'is_paid': 'bool',
        'group_id': 'int',
        'pdf_state': 'str',
        'client_name': 'str',
        'fee_structure_assignments': 'object',
        'created_at_utc': 'datetime',
        'updated_at_utc': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'firm_id': 'firm_id',
        'household_id': 'household_id',
        'minimum_ids': 'minimum_ids',
        'billing_date': 'billing_date',
        'billing_group_id': 'billing_group_id',
        'snapshot_date': 'snapshot_date',
        'billing_report_id': 'billing_report_id',
        'account_value_on_snapshot_date': 'account_value_on_snapshot_date',
        'account_cash_on_snapshot_date': 'account_cash_on_snapshot_date',
        'account_value_on_run_date': 'account_value_on_run_date',
        'account_cash_on_run_date': 'account_cash_on_run_date',
        'group_value_on_snapshot_date': 'group_value_on_snapshot_date',
        'group_cash_on_snapshot_date': 'group_cash_on_snapshot_date',
        'group_value_on_run_date': 'group_value_on_run_date',
        'group_cash_on_run_date': 'group_cash_on_run_date',
        'annual_fee': 'annual_fee',
        'annual_debit': 'annual_debit',
        'total_balance': 'total_balance',
        'period_debit': 'period_debit',
        'direct_billed_period_debit': 'direct_billed_period_debit',
        'custodian_billed_period_debit': 'custodian_billed_period_debit',
        'account_ids': 'account_ids',
        'fee_structure_ids': 'fee_structure_ids',
        'n_accounts': 'n_accounts',
        'n_fee_structures': 'n_fee_structures',
        'account_df': 'account_df',
        'group_df': 'group_df',
        'minfee_df': 'minfee_df',
        'fee_structures_serialized': 'fee_structures_serialized',
        'asset_adjustments_serialized': 'asset_adjustments_serialized',
        'billing_group_serialized': 'billing_group_serialized',
        'download_url': 'download_url',
        'due_date': 'due_date',
        'account_fs_df': 'account_fs_df',
        'is_paid': 'is_paid',
        'group_id': 'group_id',
        'pdf_state': 'pdf_state',
        'client_name': 'client_name',
        'fee_structure_assignments': 'fee_structure_assignments',
        'created_at_utc': 'created_at_utc',
        'updated_at_utc': 'updated_at_utc'
    }

    def __init__(self, id=None, firm_id=None, household_id=None, minimum_ids=None, billing_date=None, billing_group_id=None, snapshot_date=None, billing_report_id=None, account_value_on_snapshot_date=None, account_cash_on_snapshot_date=None, account_value_on_run_date=None, account_cash_on_run_date=None, group_value_on_snapshot_date=None, group_cash_on_snapshot_date=None, group_value_on_run_date=None, group_cash_on_run_date=None, annual_fee=None, annual_debit=None, total_balance=None, period_debit=None, direct_billed_period_debit=None, custodian_billed_period_debit=None, account_ids=None, fee_structure_ids=None, n_accounts=None, n_fee_structures=None, account_df=None, group_df=None, minfee_df=None, fee_structures_serialized=None, asset_adjustments_serialized=None, billing_group_serialized=None, download_url=None, due_date=None, account_fs_df=None, is_paid=None, group_id=None, pdf_state=None, client_name=None, fee_structure_assignments=None, created_at_utc=None, updated_at_utc=None):  # noqa: E501
        """InlineResponse20025Data - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._firm_id = None
        self._household_id = None
        self._minimum_ids = None
        self._billing_date = None
        self._billing_group_id = None
        self._snapshot_date = None
        self._billing_report_id = None
        self._account_value_on_snapshot_date = None
        self._account_cash_on_snapshot_date = None
        self._account_value_on_run_date = None
        self._account_cash_on_run_date = None
        self._group_value_on_snapshot_date = None
        self._group_cash_on_snapshot_date = None
        self._group_value_on_run_date = None
        self._group_cash_on_run_date = None
        self._annual_fee = None
        self._annual_debit = None
        self._total_balance = None
        self._period_debit = None
        self._direct_billed_period_debit = None
        self._custodian_billed_period_debit = None
        self._account_ids = None
        self._fee_structure_ids = None
        self._n_accounts = None
        self._n_fee_structures = None
        self._account_df = None
        self._group_df = None
        self._minfee_df = None
        self._fee_structures_serialized = None
        self._asset_adjustments_serialized = None
        self._billing_group_serialized = None
        self._download_url = None
        self._due_date = None
        self._account_fs_df = None
        self._is_paid = None
        self._group_id = None
        self._pdf_state = None
        self._client_name = None
        self._fee_structure_assignments = None
        self._created_at_utc = None
        self._updated_at_utc = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if firm_id is not None:
            self.firm_id = firm_id
        if household_id is not None:
            self.household_id = household_id
        if minimum_ids is not None:
            self.minimum_ids = minimum_ids
        if billing_date is not None:
            self.billing_date = billing_date
        if billing_group_id is not None:
            self.billing_group_id = billing_group_id
        if snapshot_date is not None:
            self.snapshot_date = snapshot_date
        if billing_report_id is not None:
            self.billing_report_id = billing_report_id
        if account_value_on_snapshot_date is not None:
            self.account_value_on_snapshot_date = account_value_on_snapshot_date
        if account_cash_on_snapshot_date is not None:
            self.account_cash_on_snapshot_date = account_cash_on_snapshot_date
        if account_value_on_run_date is not None:
            self.account_value_on_run_date = account_value_on_run_date
        if account_cash_on_run_date is not None:
            self.account_cash_on_run_date = account_cash_on_run_date
        if group_value_on_snapshot_date is not None:
            self.group_value_on_snapshot_date = group_value_on_snapshot_date
        if group_cash_on_snapshot_date is not None:
            self.group_cash_on_snapshot_date = group_cash_on_snapshot_date
        if group_value_on_run_date is not None:
            self.group_value_on_run_date = group_value_on_run_date
        if group_cash_on_run_date is not None:
            self.group_cash_on_run_date = group_cash_on_run_date
        if annual_fee is not None:
            self.annual_fee = annual_fee
        if annual_debit is not None:
            self.annual_debit = annual_debit
        if total_balance is not None:
            self.total_balance = total_balance
        if period_debit is not None:
            self.period_debit = period_debit
        if direct_billed_period_debit is not None:
            self.direct_billed_period_debit = direct_billed_period_debit
        if custodian_billed_period_debit is not None:
            self.custodian_billed_period_debit = custodian_billed_period_debit
        if account_ids is not None:
            self.account_ids = account_ids
        if fee_structure_ids is not None:
            self.fee_structure_ids = fee_structure_ids
        if n_accounts is not None:
            self.n_accounts = n_accounts
        if n_fee_structures is not None:
            self.n_fee_structures = n_fee_structures
        if account_df is not None:
            self.account_df = account_df
        if group_df is not None:
            self.group_df = group_df
        if minfee_df is not None:
            self.minfee_df = minfee_df
        if fee_structures_serialized is not None:
            self.fee_structures_serialized = fee_structures_serialized
        if asset_adjustments_serialized is not None:
            self.asset_adjustments_serialized = asset_adjustments_serialized
        if billing_group_serialized is not None:
            self.billing_group_serialized = billing_group_serialized
        if download_url is not None:
            self.download_url = download_url
        if due_date is not None:
            self.due_date = due_date
        if account_fs_df is not None:
            self.account_fs_df = account_fs_df
        if is_paid is not None:
            self.is_paid = is_paid
        if group_id is not None:
            self.group_id = group_id
        if pdf_state is not None:
            self.pdf_state = pdf_state
        if client_name is not None:
            self.client_name = client_name
        if fee_structure_assignments is not None:
            self.fee_structure_assignments = fee_structure_assignments
        if created_at_utc is not None:
            self.created_at_utc = created_at_utc
        if updated_at_utc is not None:
            self.updated_at_utc = updated_at_utc

    @property
    def id(self):
        """Gets the id of this InlineResponse20025Data.  # noqa: E501

        The unique resource ID for this Invoice  # noqa: E501

        :return: The id of this InlineResponse20025Data.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20025Data.

        The unique resource ID for this Invoice  # noqa: E501

        :param id: The id of this InlineResponse20025Data.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def firm_id(self):
        """Gets the firm_id of this InlineResponse20025Data.  # noqa: E501

        The firm ID of the managing firm  # noqa: E501

        :return: The firm_id of this InlineResponse20025Data.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this InlineResponse20025Data.

        The firm ID of the managing firm  # noqa: E501

        :param firm_id: The firm_id of this InlineResponse20025Data.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def household_id(self):
        """Gets the household_id of this InlineResponse20025Data.  # noqa: E501

        Household id associated with the invoice  # noqa: E501

        :return: The household_id of this InlineResponse20025Data.  # noqa: E501
        :rtype: int
        """
        return self._household_id

    @household_id.setter
    def household_id(self, household_id):
        """Sets the household_id of this InlineResponse20025Data.

        Household id associated with the invoice  # noqa: E501

        :param household_id: The household_id of this InlineResponse20025Data.  # noqa: E501
        :type: int
        """

        self._household_id = household_id

    @property
    def minimum_ids(self):
        """Gets the minimum_ids of this InlineResponse20025Data.  # noqa: E501

        The list of minumum ID's associated with this Invoice  # noqa: E501

        :return: The minimum_ids of this InlineResponse20025Data.  # noqa: E501
        :rtype: list[int]
        """
        return self._minimum_ids

    @minimum_ids.setter
    def minimum_ids(self, minimum_ids):
        """Sets the minimum_ids of this InlineResponse20025Data.

        The list of minumum ID's associated with this Invoice  # noqa: E501

        :param minimum_ids: The minimum_ids of this InlineResponse20025Data.  # noqa: E501
        :type: list[int]
        """

        self._minimum_ids = minimum_ids

    @property
    def billing_date(self):
        """Gets the billing_date of this InlineResponse20025Data.  # noqa: E501

        Billing date for this Invoice  # noqa: E501

        :return: The billing_date of this InlineResponse20025Data.  # noqa: E501
        :rtype: datetime
        """
        return self._billing_date

    @billing_date.setter
    def billing_date(self, billing_date):
        """Sets the billing_date of this InlineResponse20025Data.

        Billing date for this Invoice  # noqa: E501

        :param billing_date: The billing_date of this InlineResponse20025Data.  # noqa: E501
        :type: datetime
        """

        self._billing_date = billing_date

    @property
    def billing_group_id(self):
        """Gets the billing_group_id of this InlineResponse20025Data.  # noqa: E501

        The billing group ID for this Invoice  # noqa: E501

        :return: The billing_group_id of this InlineResponse20025Data.  # noqa: E501
        :rtype: int
        """
        return self._billing_group_id

    @billing_group_id.setter
    def billing_group_id(self, billing_group_id):
        """Sets the billing_group_id of this InlineResponse20025Data.

        The billing group ID for this Invoice  # noqa: E501

        :param billing_group_id: The billing_group_id of this InlineResponse20025Data.  # noqa: E501
        :type: int
        """

        self._billing_group_id = billing_group_id

    @property
    def snapshot_date(self):
        """Gets the snapshot_date of this InlineResponse20025Data.  # noqa: E501

        The snapshot date for this Invoice  # noqa: E501

        :return: The snapshot_date of this InlineResponse20025Data.  # noqa: E501
        :rtype: datetime
        """
        return self._snapshot_date

    @snapshot_date.setter
    def snapshot_date(self, snapshot_date):
        """Sets the snapshot_date of this InlineResponse20025Data.

        The snapshot date for this Invoice  # noqa: E501

        :param snapshot_date: The snapshot_date of this InlineResponse20025Data.  # noqa: E501
        :type: datetime
        """

        self._snapshot_date = snapshot_date

    @property
    def billing_report_id(self):
        """Gets the billing_report_id of this InlineResponse20025Data.  # noqa: E501

        The associated billing report ID for this Invoice  # noqa: E501

        :return: The billing_report_id of this InlineResponse20025Data.  # noqa: E501
        :rtype: int
        """
        return self._billing_report_id

    @billing_report_id.setter
    def billing_report_id(self, billing_report_id):
        """Sets the billing_report_id of this InlineResponse20025Data.

        The associated billing report ID for this Invoice  # noqa: E501

        :param billing_report_id: The billing_report_id of this InlineResponse20025Data.  # noqa: E501
        :type: int
        """

        self._billing_report_id = billing_report_id

    @property
    def account_value_on_snapshot_date(self):
        """Gets the account_value_on_snapshot_date of this InlineResponse20025Data.  # noqa: E501

        Maps account ID to total account valuation on a particular date  # noqa: E501

        :return: The account_value_on_snapshot_date of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._account_value_on_snapshot_date

    @account_value_on_snapshot_date.setter
    def account_value_on_snapshot_date(self, account_value_on_snapshot_date):
        """Sets the account_value_on_snapshot_date of this InlineResponse20025Data.

        Maps account ID to total account valuation on a particular date  # noqa: E501

        :param account_value_on_snapshot_date: The account_value_on_snapshot_date of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._account_value_on_snapshot_date = account_value_on_snapshot_date

    @property
    def account_cash_on_snapshot_date(self):
        """Gets the account_cash_on_snapshot_date of this InlineResponse20025Data.  # noqa: E501

        Maps the cash amount in the account as of the billing date  # noqa: E501

        :return: The account_cash_on_snapshot_date of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._account_cash_on_snapshot_date

    @account_cash_on_snapshot_date.setter
    def account_cash_on_snapshot_date(self, account_cash_on_snapshot_date):
        """Sets the account_cash_on_snapshot_date of this InlineResponse20025Data.

        Maps the cash amount in the account as of the billing date  # noqa: E501

        :param account_cash_on_snapshot_date: The account_cash_on_snapshot_date of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._account_cash_on_snapshot_date = account_cash_on_snapshot_date

    @property
    def account_value_on_run_date(self):
        """Gets the account_value_on_run_date of this InlineResponse20025Data.  # noqa: E501

        Maps account ID to total account valuation as of the report run date  # noqa: E501

        :return: The account_value_on_run_date of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._account_value_on_run_date

    @account_value_on_run_date.setter
    def account_value_on_run_date(self, account_value_on_run_date):
        """Sets the account_value_on_run_date of this InlineResponse20025Data.

        Maps account ID to total account valuation as of the report run date  # noqa: E501

        :param account_value_on_run_date: The account_value_on_run_date of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._account_value_on_run_date = account_value_on_run_date

    @property
    def account_cash_on_run_date(self):
        """Gets the account_cash_on_run_date of this InlineResponse20025Data.  # noqa: E501

        Maps the cash amount in the account as of the report run date  # noqa: E501

        :return: The account_cash_on_run_date of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._account_cash_on_run_date

    @account_cash_on_run_date.setter
    def account_cash_on_run_date(self, account_cash_on_run_date):
        """Sets the account_cash_on_run_date of this InlineResponse20025Data.

        Maps the cash amount in the account as of the report run date  # noqa: E501

        :param account_cash_on_run_date: The account_cash_on_run_date of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._account_cash_on_run_date = account_cash_on_run_date

    @property
    def group_value_on_snapshot_date(self):
        """Gets the group_value_on_snapshot_date of this InlineResponse20025Data.  # noqa: E501

        Maps a group ID to the total value of all accounts in the group on the snapshot date  # noqa: E501

        :return: The group_value_on_snapshot_date of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._group_value_on_snapshot_date

    @group_value_on_snapshot_date.setter
    def group_value_on_snapshot_date(self, group_value_on_snapshot_date):
        """Sets the group_value_on_snapshot_date of this InlineResponse20025Data.

        Maps a group ID to the total value of all accounts in the group on the snapshot date  # noqa: E501

        :param group_value_on_snapshot_date: The group_value_on_snapshot_date of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._group_value_on_snapshot_date = group_value_on_snapshot_date

    @property
    def group_cash_on_snapshot_date(self):
        """Gets the group_cash_on_snapshot_date of this InlineResponse20025Data.  # noqa: E501

        Maps group ID to the total cash value of all accounts in the group on the snapshot date  # noqa: E501

        :return: The group_cash_on_snapshot_date of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._group_cash_on_snapshot_date

    @group_cash_on_snapshot_date.setter
    def group_cash_on_snapshot_date(self, group_cash_on_snapshot_date):
        """Sets the group_cash_on_snapshot_date of this InlineResponse20025Data.

        Maps group ID to the total cash value of all accounts in the group on the snapshot date  # noqa: E501

        :param group_cash_on_snapshot_date: The group_cash_on_snapshot_date of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._group_cash_on_snapshot_date = group_cash_on_snapshot_date

    @property
    def group_value_on_run_date(self):
        """Gets the group_value_on_run_date of this InlineResponse20025Data.  # noqa: E501

        Maps a group ID to the total value of all accounts in the group on the run date  # noqa: E501

        :return: The group_value_on_run_date of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._group_value_on_run_date

    @group_value_on_run_date.setter
    def group_value_on_run_date(self, group_value_on_run_date):
        """Sets the group_value_on_run_date of this InlineResponse20025Data.

        Maps a group ID to the total value of all accounts in the group on the run date  # noqa: E501

        :param group_value_on_run_date: The group_value_on_run_date of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._group_value_on_run_date = group_value_on_run_date

    @property
    def group_cash_on_run_date(self):
        """Gets the group_cash_on_run_date of this InlineResponse20025Data.  # noqa: E501

        Maps group ID to the total cash value of all accounts in the group on the run date  # noqa: E501

        :return: The group_cash_on_run_date of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._group_cash_on_run_date

    @group_cash_on_run_date.setter
    def group_cash_on_run_date(self, group_cash_on_run_date):
        """Sets the group_cash_on_run_date of this InlineResponse20025Data.

        Maps group ID to the total cash value of all accounts in the group on the run date  # noqa: E501

        :param group_cash_on_run_date: The group_cash_on_run_date of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._group_cash_on_run_date = group_cash_on_run_date

    @property
    def annual_fee(self):
        """Gets the annual_fee of this InlineResponse20025Data.  # noqa: E501

        The total fee and debited amount annualized just for this billing group  # noqa: E501

        :return: The annual_fee of this InlineResponse20025Data.  # noqa: E501
        :rtype: float
        """
        return self._annual_fee

    @annual_fee.setter
    def annual_fee(self, annual_fee):
        """Sets the annual_fee of this InlineResponse20025Data.

        The total fee and debited amount annualized just for this billing group  # noqa: E501

        :param annual_fee: The annual_fee of this InlineResponse20025Data.  # noqa: E501
        :type: float
        """

        self._annual_fee = annual_fee

    @property
    def annual_debit(self):
        """Gets the annual_debit of this InlineResponse20025Data.  # noqa: E501

        The annual debit for this Invoice  # noqa: E501

        :return: The annual_debit of this InlineResponse20025Data.  # noqa: E501
        :rtype: float
        """
        return self._annual_debit

    @annual_debit.setter
    def annual_debit(self, annual_debit):
        """Sets the annual_debit of this InlineResponse20025Data.

        The annual debit for this Invoice  # noqa: E501

        :param annual_debit: The annual_debit of this InlineResponse20025Data.  # noqa: E501
        :type: float
        """

        self._annual_debit = annual_debit

    @property
    def total_balance(self):
        """Gets the total_balance of this InlineResponse20025Data.  # noqa: E501

        The total group balance on the snapshot date  # noqa: E501

        :return: The total_balance of this InlineResponse20025Data.  # noqa: E501
        :rtype: float
        """
        return self._total_balance

    @total_balance.setter
    def total_balance(self, total_balance):
        """Sets the total_balance of this InlineResponse20025Data.

        The total group balance on the snapshot date  # noqa: E501

        :param total_balance: The total_balance of this InlineResponse20025Data.  # noqa: E501
        :type: float
        """

        self._total_balance = total_balance

    @property
    def period_debit(self):
        """Gets the period_debit of this InlineResponse20025Data.  # noqa: E501

        The total debited amount for the period just for this billing group on the snapshot date  # noqa: E501

        :return: The period_debit of this InlineResponse20025Data.  # noqa: E501
        :rtype: float
        """
        return self._period_debit

    @period_debit.setter
    def period_debit(self, period_debit):
        """Sets the period_debit of this InlineResponse20025Data.

        The total debited amount for the period just for this billing group on the snapshot date  # noqa: E501

        :param period_debit: The period_debit of this InlineResponse20025Data.  # noqa: E501
        :type: float
        """

        self._period_debit = period_debit

    @property
    def direct_billed_period_debit(self):
        """Gets the direct_billed_period_debit of this InlineResponse20025Data.  # noqa: E501

        The direct billed period debit for this Invoice.  # noqa: E501

        :return: The direct_billed_period_debit of this InlineResponse20025Data.  # noqa: E501
        :rtype: float
        """
        return self._direct_billed_period_debit

    @direct_billed_period_debit.setter
    def direct_billed_period_debit(self, direct_billed_period_debit):
        """Sets the direct_billed_period_debit of this InlineResponse20025Data.

        The direct billed period debit for this Invoice.  # noqa: E501

        :param direct_billed_period_debit: The direct_billed_period_debit of this InlineResponse20025Data.  # noqa: E501
        :type: float
        """

        self._direct_billed_period_debit = direct_billed_period_debit

    @property
    def custodian_billed_period_debit(self):
        """Gets the custodian_billed_period_debit of this InlineResponse20025Data.  # noqa: E501

        The custodian billed period debit for this Invoice  # noqa: E501

        :return: The custodian_billed_period_debit of this InlineResponse20025Data.  # noqa: E501
        :rtype: float
        """
        return self._custodian_billed_period_debit

    @custodian_billed_period_debit.setter
    def custodian_billed_period_debit(self, custodian_billed_period_debit):
        """Sets the custodian_billed_period_debit of this InlineResponse20025Data.

        The custodian billed period debit for this Invoice  # noqa: E501

        :param custodian_billed_period_debit: The custodian_billed_period_debit of this InlineResponse20025Data.  # noqa: E501
        :type: float
        """

        self._custodian_billed_period_debit = custodian_billed_period_debit

    @property
    def account_ids(self):
        """Gets the account_ids of this InlineResponse20025Data.  # noqa: E501

        The list of account ID's associated with this Invoice  # noqa: E501

        :return: The account_ids of this InlineResponse20025Data.  # noqa: E501
        :rtype: list[int]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this InlineResponse20025Data.

        The list of account ID's associated with this Invoice  # noqa: E501

        :param account_ids: The account_ids of this InlineResponse20025Data.  # noqa: E501
        :type: list[int]
        """

        self._account_ids = account_ids

    @property
    def fee_structure_ids(self):
        """Gets the fee_structure_ids of this InlineResponse20025Data.  # noqa: E501

        The list of fee structure ID's associated with this Invoice  # noqa: E501

        :return: The fee_structure_ids of this InlineResponse20025Data.  # noqa: E501
        :rtype: list[int]
        """
        return self._fee_structure_ids

    @fee_structure_ids.setter
    def fee_structure_ids(self, fee_structure_ids):
        """Sets the fee_structure_ids of this InlineResponse20025Data.

        The list of fee structure ID's associated with this Invoice  # noqa: E501

        :param fee_structure_ids: The fee_structure_ids of this InlineResponse20025Data.  # noqa: E501
        :type: list[int]
        """

        self._fee_structure_ids = fee_structure_ids

    @property
    def n_accounts(self):
        """Gets the n_accounts of this InlineResponse20025Data.  # noqa: E501

        The number of accounts in the report  # noqa: E501

        :return: The n_accounts of this InlineResponse20025Data.  # noqa: E501
        :rtype: int
        """
        return self._n_accounts

    @n_accounts.setter
    def n_accounts(self, n_accounts):
        """Sets the n_accounts of this InlineResponse20025Data.

        The number of accounts in the report  # noqa: E501

        :param n_accounts: The n_accounts of this InlineResponse20025Data.  # noqa: E501
        :type: int
        """

        self._n_accounts = n_accounts

    @property
    def n_fee_structures(self):
        """Gets the n_fee_structures of this InlineResponse20025Data.  # noqa: E501

        The number of fee structures in the report  # noqa: E501

        :return: The n_fee_structures of this InlineResponse20025Data.  # noqa: E501
        :rtype: int
        """
        return self._n_fee_structures

    @n_fee_structures.setter
    def n_fee_structures(self, n_fee_structures):
        """Sets the n_fee_structures of this InlineResponse20025Data.

        The number of fee structures in the report  # noqa: E501

        :param n_fee_structures: The n_fee_structures of this InlineResponse20025Data.  # noqa: E501
        :type: int
        """

        self._n_fee_structures = n_fee_structures

    @property
    def account_df(self):
        """Gets the account_df of this InlineResponse20025Data.  # noqa: E501

        Serialized from the account_df data-frame on the billing calculator  # noqa: E501

        :return: The account_df of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._account_df

    @account_df.setter
    def account_df(self, account_df):
        """Sets the account_df of this InlineResponse20025Data.

        Serialized from the account_df data-frame on the billing calculator  # noqa: E501

        :param account_df: The account_df of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._account_df = account_df

    @property
    def group_df(self):
        """Gets the group_df of this InlineResponse20025Data.  # noqa: E501

        Serialized from group_df on the billing calculator  # noqa: E501

        :return: The group_df of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._group_df

    @group_df.setter
    def group_df(self, group_df):
        """Sets the group_df of this InlineResponse20025Data.

        Serialized from group_df on the billing calculator  # noqa: E501

        :param group_df: The group_df of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._group_df = group_df

    @property
    def minfee_df(self):
        """Gets the minfee_df of this InlineResponse20025Data.  # noqa: E501

        Serialized from minimum fee on the billing calculator  # noqa: E501

        :return: The minfee_df of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._minfee_df

    @minfee_df.setter
    def minfee_df(self, minfee_df):
        """Sets the minfee_df of this InlineResponse20025Data.

        Serialized from minimum fee on the billing calculator  # noqa: E501

        :param minfee_df: The minfee_df of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._minfee_df = minfee_df

    @property
    def fee_structures_serialized(self):
        """Gets the fee_structures_serialized of this InlineResponse20025Data.  # noqa: E501

        A serialization of fee structures as they existed at the time the report was generated  # noqa: E501

        :return: The fee_structures_serialized of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._fee_structures_serialized

    @fee_structures_serialized.setter
    def fee_structures_serialized(self, fee_structures_serialized):
        """Sets the fee_structures_serialized of this InlineResponse20025Data.

        A serialization of fee structures as they existed at the time the report was generated  # noqa: E501

        :param fee_structures_serialized: The fee_structures_serialized of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._fee_structures_serialized = fee_structures_serialized

    @property
    def asset_adjustments_serialized(self):
        """Gets the asset_adjustments_serialized of this InlineResponse20025Data.  # noqa: E501

        Serialized asset adjustments at the time the report was generated  # noqa: E501

        :return: The asset_adjustments_serialized of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._asset_adjustments_serialized

    @asset_adjustments_serialized.setter
    def asset_adjustments_serialized(self, asset_adjustments_serialized):
        """Sets the asset_adjustments_serialized of this InlineResponse20025Data.

        Serialized asset adjustments at the time the report was generated  # noqa: E501

        :param asset_adjustments_serialized: The asset_adjustments_serialized of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._asset_adjustments_serialized = asset_adjustments_serialized

    @property
    def billing_group_serialized(self):
        """Gets the billing_group_serialized of this InlineResponse20025Data.  # noqa: E501

        Serialized billing group at the time the invoice was created  # noqa: E501

        :return: The billing_group_serialized of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._billing_group_serialized

    @billing_group_serialized.setter
    def billing_group_serialized(self, billing_group_serialized):
        """Sets the billing_group_serialized of this InlineResponse20025Data.

        Serialized billing group at the time the invoice was created  # noqa: E501

        :param billing_group_serialized: The billing_group_serialized of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._billing_group_serialized = billing_group_serialized

    @property
    def download_url(self):
        """Gets the download_url of this InlineResponse20025Data.  # noqa: E501

        Download link which specifies the url to generate and return a binary stream for the Invoice PDF.  # noqa: E501

        :return: The download_url of this InlineResponse20025Data.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this InlineResponse20025Data.

        Download link which specifies the url to generate and return a binary stream for the Invoice PDF.  # noqa: E501

        :param download_url: The download_url of this InlineResponse20025Data.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def due_date(self):
        """Gets the due_date of this InlineResponse20025Data.  # noqa: E501

        Invoice due date, calculated using firm settings at the time the invoice was generated  # noqa: E501

        :return: The due_date of this InlineResponse20025Data.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this InlineResponse20025Data.

        Invoice due date, calculated using firm settings at the time the invoice was generated  # noqa: E501

        :param due_date: The due_date of this InlineResponse20025Data.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def account_fs_df(self):
        """Gets the account_fs_df of this InlineResponse20025Data.  # noqa: E501

        Serialized from the account_fs_df dataframe on the billing calculator  # noqa: E501

        :return: The account_fs_df of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._account_fs_df

    @account_fs_df.setter
    def account_fs_df(self, account_fs_df):
        """Sets the account_fs_df of this InlineResponse20025Data.

        Serialized from the account_fs_df dataframe on the billing calculator  # noqa: E501

        :param account_fs_df: The account_fs_df of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._account_fs_df = account_fs_df

    @property
    def is_paid(self):
        """Gets the is_paid of this InlineResponse20025Data.  # noqa: E501

        Is the invoice paid?  # noqa: E501

        :return: The is_paid of this InlineResponse20025Data.  # noqa: E501
        :rtype: bool
        """
        return self._is_paid

    @is_paid.setter
    def is_paid(self, is_paid):
        """Sets the is_paid of this InlineResponse20025Data.

        Is the invoice paid?  # noqa: E501

        :param is_paid: The is_paid of this InlineResponse20025Data.  # noqa: E501
        :type: bool
        """

        self._is_paid = is_paid

    @property
    def group_id(self):
        """Gets the group_id of this InlineResponse20025Data.  # noqa: E501

        Group Id of this invoice  # noqa: E501

        :return: The group_id of this InlineResponse20025Data.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this InlineResponse20025Data.

        Group Id of this invoice  # noqa: E501

        :param group_id: The group_id of this InlineResponse20025Data.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def pdf_state(self):
        """Gets the pdf_state of this InlineResponse20025Data.  # noqa: E501

        State of the billing invoice pdf state. 0 for does not exist, 1 for created, 2 for generating, 3 for success, -1 for failed  # noqa: E501

        :return: The pdf_state of this InlineResponse20025Data.  # noqa: E501
        :rtype: str
        """
        return self._pdf_state

    @pdf_state.setter
    def pdf_state(self, pdf_state):
        """Sets the pdf_state of this InlineResponse20025Data.

        State of the billing invoice pdf state. 0 for does not exist, 1 for created, 2 for generating, 3 for success, -1 for failed  # noqa: E501

        :param pdf_state: The pdf_state of this InlineResponse20025Data.  # noqa: E501
        :type: str
        """

        self._pdf_state = pdf_state

    @property
    def client_name(self):
        """Gets the client_name of this InlineResponse20025Data.  # noqa: E501

        Name of the client associated with this invoice  # noqa: E501

        :return: The client_name of this InlineResponse20025Data.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this InlineResponse20025Data.

        Name of the client associated with this invoice  # noqa: E501

        :param client_name: The client_name of this InlineResponse20025Data.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def fee_structure_assignments(self):
        """Gets the fee_structure_assignments of this InlineResponse20025Data.  # noqa: E501

        Serialized fee structure assignments at the time the invoice was created  # noqa: E501

        :return: The fee_structure_assignments of this InlineResponse20025Data.  # noqa: E501
        :rtype: object
        """
        return self._fee_structure_assignments

    @fee_structure_assignments.setter
    def fee_structure_assignments(self, fee_structure_assignments):
        """Sets the fee_structure_assignments of this InlineResponse20025Data.

        Serialized fee structure assignments at the time the invoice was created  # noqa: E501

        :param fee_structure_assignments: The fee_structure_assignments of this InlineResponse20025Data.  # noqa: E501
        :type: object
        """

        self._fee_structure_assignments = fee_structure_assignments

    @property
    def created_at_utc(self):
        """Gets the created_at_utc of this InlineResponse20025Data.  # noqa: E501

        Timestamp for when the record was created  # noqa: E501

        :return: The created_at_utc of this InlineResponse20025Data.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at_utc

    @created_at_utc.setter
    def created_at_utc(self, created_at_utc):
        """Sets the created_at_utc of this InlineResponse20025Data.

        Timestamp for when the record was created  # noqa: E501

        :param created_at_utc: The created_at_utc of this InlineResponse20025Data.  # noqa: E501
        :type: datetime
        """

        self._created_at_utc = created_at_utc

    @property
    def updated_at_utc(self):
        """Gets the updated_at_utc of this InlineResponse20025Data.  # noqa: E501

        Timestamp for when the record was updated  # noqa: E501

        :return: The updated_at_utc of this InlineResponse20025Data.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at_utc

    @updated_at_utc.setter
    def updated_at_utc(self, updated_at_utc):
        """Sets the updated_at_utc of this InlineResponse20025Data.

        Timestamp for when the record was updated  # noqa: E501

        :param updated_at_utc: The updated_at_utc of this InlineResponse20025Data.  # noqa: E501
        :type: datetime
        """

        self._updated_at_utc = updated_at_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20025Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20025Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

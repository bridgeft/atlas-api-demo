# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsermanagementFirmprofilesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'firm_id': 'int',
        'account_access_level': 'str',
        'accessible_household_ids': 'list[int]',
        'permissions': 'list[str]',
        'is_owner': 'bool',
        'role_id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str'
    }

    attribute_map = {
        'firm_id': 'firm_id',
        'account_access_level': 'account_access_level',
        'accessible_household_ids': 'accessible_household_ids',
        'permissions': 'permissions',
        'is_owner': 'is_owner',
        'role_id': 'role_id',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email'
    }

    def __init__(self, firm_id=None, account_access_level=None, accessible_household_ids=None, permissions=None, is_owner=None, role_id=None, first_name=None, last_name=None, email=None):  # noqa: E501
        """UsermanagementFirmprofilesBody - a model defined in Swagger"""  # noqa: E501
        self._firm_id = None
        self._account_access_level = None
        self._accessible_household_ids = None
        self._permissions = None
        self._is_owner = None
        self._role_id = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self.discriminator = None
        if firm_id is not None:
            self.firm_id = firm_id
        if account_access_level is not None:
            self.account_access_level = account_access_level
        if accessible_household_ids is not None:
            self.accessible_household_ids = accessible_household_ids
        if permissions is not None:
            self.permissions = permissions
        if is_owner is not None:
            self.is_owner = is_owner
        if role_id is not None:
            self.role_id = role_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email

    @property
    def firm_id(self):
        """Gets the firm_id of this UsermanagementFirmprofilesBody.  # noqa: E501

        ID of the owning firm  # noqa: E501

        :return: The firm_id of this UsermanagementFirmprofilesBody.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this UsermanagementFirmprofilesBody.

        ID of the owning firm  # noqa: E501

        :param firm_id: The firm_id of this UsermanagementFirmprofilesBody.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def account_access_level(self):
        """Gets the account_access_level of this UsermanagementFirmprofilesBody.  # noqa: E501

        The user's accessibility level with respect to accounts; can either have access to all accounts or be limited to a subset of them. Can either be all or limited.  # noqa: E501

        :return: The account_access_level of this UsermanagementFirmprofilesBody.  # noqa: E501
        :rtype: str
        """
        return self._account_access_level

    @account_access_level.setter
    def account_access_level(self, account_access_level):
        """Sets the account_access_level of this UsermanagementFirmprofilesBody.

        The user's accessibility level with respect to accounts; can either have access to all accounts or be limited to a subset of them. Can either be all or limited.  # noqa: E501

        :param account_access_level: The account_access_level of this UsermanagementFirmprofilesBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "limited"]  # noqa: E501
        if account_access_level not in allowed_values:
            raise ValueError(
                "Invalid value for `account_access_level` ({0}), must be one of {1}"  # noqa: E501
                .format(account_access_level, allowed_values)
            )

        self._account_access_level = account_access_level

    @property
    def accessible_household_ids(self):
        """Gets the accessible_household_ids of this UsermanagementFirmprofilesBody.  # noqa: E501

        If the user is limited to a subset of accounts, these are the accessible households  # noqa: E501

        :return: The accessible_household_ids of this UsermanagementFirmprofilesBody.  # noqa: E501
        :rtype: list[int]
        """
        return self._accessible_household_ids

    @accessible_household_ids.setter
    def accessible_household_ids(self, accessible_household_ids):
        """Sets the accessible_household_ids of this UsermanagementFirmprofilesBody.

        If the user is limited to a subset of accounts, these are the accessible households  # noqa: E501

        :param accessible_household_ids: The accessible_household_ids of this UsermanagementFirmprofilesBody.  # noqa: E501
        :type: list[int]
        """

        self._accessible_household_ids = accessible_household_ids

    @property
    def permissions(self):
        """Gets the permissions of this UsermanagementFirmprofilesBody.  # noqa: E501

        Editable list of permissions assigned to the user. See Permissions Overview.  # noqa: E501

        :return: The permissions of this UsermanagementFirmprofilesBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UsermanagementFirmprofilesBody.

        Editable list of permissions assigned to the user. See Permissions Overview.  # noqa: E501

        :param permissions: The permissions of this UsermanagementFirmprofilesBody.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def is_owner(self):
        """Gets the is_owner of this UsermanagementFirmprofilesBody.  # noqa: E501

        Is this user the owner of the associated firm? (Always false for a client)  # noqa: E501

        :return: The is_owner of this UsermanagementFirmprofilesBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this UsermanagementFirmprofilesBody.

        Is this user the owner of the associated firm? (Always false for a client)  # noqa: E501

        :param is_owner: The is_owner of this UsermanagementFirmprofilesBody.  # noqa: E501
        :type: bool
        """

        self._is_owner = is_owner

    @property
    def role_id(self):
        """Gets the role_id of this UsermanagementFirmprofilesBody.  # noqa: E501

        The ID of the user-defined role.  # noqa: E501

        :return: The role_id of this UsermanagementFirmprofilesBody.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this UsermanagementFirmprofilesBody.

        The ID of the user-defined role.  # noqa: E501

        :param role_id: The role_id of this UsermanagementFirmprofilesBody.  # noqa: E501
        :type: int
        """

        self._role_id = role_id

    @property
    def first_name(self):
        """Gets the first_name of this UsermanagementFirmprofilesBody.  # noqa: E501

        User first name  # noqa: E501

        :return: The first_name of this UsermanagementFirmprofilesBody.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UsermanagementFirmprofilesBody.

        User first name  # noqa: E501

        :param first_name: The first_name of this UsermanagementFirmprofilesBody.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UsermanagementFirmprofilesBody.  # noqa: E501

        User last name  # noqa: E501

        :return: The last_name of this UsermanagementFirmprofilesBody.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UsermanagementFirmprofilesBody.

        User last name  # noqa: E501

        :param last_name: The last_name of this UsermanagementFirmprofilesBody.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this UsermanagementFirmprofilesBody.  # noqa: E501

        User email  # noqa: E501

        :return: The email of this UsermanagementFirmprofilesBody.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UsermanagementFirmprofilesBody.

        User email  # noqa: E501

        :param email: The email of this UsermanagementFirmprofilesBody.  # noqa: E501
        :type: str
        """

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsermanagementFirmprofilesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsermanagementFirmprofilesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

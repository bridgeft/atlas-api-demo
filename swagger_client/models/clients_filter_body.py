# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientsFilterBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'firm_id': 'int',
        'user_id': 'int',
        'prefix': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'phone_number': 'str',
        'birth_date': 'datetime',
        'retirement_date': 'datetime',
        'annual_income': 'float',
        'address_1': 'str',
        'address_2': 'str',
        'address_3': 'str',
        'city': 'str',
        'state': 'str',
        'zip_code': 'str',
        'country': 'str',
        'relationship_type': 'str',
        'notes': 'str',
        'client_tier': 'str'
    }

    attribute_map = {
        'id': 'id',
        'firm_id': 'firm_id',
        'user_id': 'user_id',
        'prefix': 'prefix',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'phone_number': 'phone_number',
        'birth_date': 'birth_date',
        'retirement_date': 'retirement_date',
        'annual_income': 'annual_income',
        'address_1': 'address_1',
        'address_2': 'address_2',
        'address_3': 'address_3',
        'city': 'city',
        'state': 'state',
        'zip_code': 'zip_code',
        'country': 'country',
        'relationship_type': 'relationship_type',
        'notes': 'notes',
        'client_tier': 'client_tier'
    }

    def __init__(self, id=None, firm_id=None, user_id=None, prefix=None, first_name=None, last_name=None, email=None, phone_number=None, birth_date=None, retirement_date=None, annual_income=None, address_1=None, address_2=None, address_3=None, city=None, state=None, zip_code=None, country=None, relationship_type=None, notes=None, client_tier=None):  # noqa: E501
        """ClientsFilterBody - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._firm_id = None
        self._user_id = None
        self._prefix = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._phone_number = None
        self._birth_date = None
        self._retirement_date = None
        self._annual_income = None
        self._address_1 = None
        self._address_2 = None
        self._address_3 = None
        self._city = None
        self._state = None
        self._zip_code = None
        self._country = None
        self._relationship_type = None
        self._notes = None
        self._client_tier = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if firm_id is not None:
            self.firm_id = firm_id
        if user_id is not None:
            self.user_id = user_id
        if prefix is not None:
            self.prefix = prefix
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if phone_number is not None:
            self.phone_number = phone_number
        if birth_date is not None:
            self.birth_date = birth_date
        if retirement_date is not None:
            self.retirement_date = retirement_date
        if annual_income is not None:
            self.annual_income = annual_income
        if address_1 is not None:
            self.address_1 = address_1
        if address_2 is not None:
            self.address_2 = address_2
        if address_3 is not None:
            self.address_3 = address_3
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if zip_code is not None:
            self.zip_code = zip_code
        if country is not None:
            self.country = country
        if relationship_type is not None:
            self.relationship_type = relationship_type
        if notes is not None:
            self.notes = notes
        if client_tier is not None:
            self.client_tier = client_tier

    @property
    def id(self):
        """Gets the id of this ClientsFilterBody.  # noqa: E501

        Unique ID for this client object  # noqa: E501

        :return: The id of this ClientsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientsFilterBody.

        Unique ID for this client object  # noqa: E501

        :param id: The id of this ClientsFilterBody.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def firm_id(self):
        """Gets the firm_id of this ClientsFilterBody.  # noqa: E501

        ID of the owning firm  # noqa: E501

        :return: The firm_id of this ClientsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this ClientsFilterBody.

        ID of the owning firm  # noqa: E501

        :param firm_id: The firm_id of this ClientsFilterBody.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def user_id(self):
        """Gets the user_id of this ClientsFilterBody.  # noqa: E501

        ID of the user associated to this client object  # noqa: E501

        :return: The user_id of this ClientsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ClientsFilterBody.

        ID of the user associated to this client object  # noqa: E501

        :param user_id: The user_id of this ClientsFilterBody.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def prefix(self):
        """Gets the prefix of this ClientsFilterBody.  # noqa: E501

        Name prefix of the client  # noqa: E501

        :return: The prefix of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this ClientsFilterBody.

        Name prefix of the client  # noqa: E501

        :param prefix: The prefix of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def first_name(self):
        """Gets the first_name of this ClientsFilterBody.  # noqa: E501

        First name of the client  # noqa: E501

        :return: The first_name of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ClientsFilterBody.

        First name of the client  # noqa: E501

        :param first_name: The first_name of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ClientsFilterBody.  # noqa: E501

        Last name of the client  # noqa: E501

        :return: The last_name of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ClientsFilterBody.

        Last name of the client  # noqa: E501

        :param last_name: The last_name of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this ClientsFilterBody.  # noqa: E501

        Email of the client  # noqa: E501

        :return: The email of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ClientsFilterBody.

        Email of the client  # noqa: E501

        :param email: The email of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this ClientsFilterBody.  # noqa: E501

        Phone number  # noqa: E501

        :return: The phone_number of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ClientsFilterBody.

        Phone number  # noqa: E501

        :param phone_number: The phone_number of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def birth_date(self):
        """Gets the birth_date of this ClientsFilterBody.  # noqa: E501

        Date of birth  # noqa: E501

        :return: The birth_date of this ClientsFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this ClientsFilterBody.

        Date of birth  # noqa: E501

        :param birth_date: The birth_date of this ClientsFilterBody.  # noqa: E501
        :type: datetime
        """

        self._birth_date = birth_date

    @property
    def retirement_date(self):
        """Gets the retirement_date of this ClientsFilterBody.  # noqa: E501

        Date of retirement of the client  # noqa: E501

        :return: The retirement_date of this ClientsFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._retirement_date

    @retirement_date.setter
    def retirement_date(self, retirement_date):
        """Sets the retirement_date of this ClientsFilterBody.

        Date of retirement of the client  # noqa: E501

        :param retirement_date: The retirement_date of this ClientsFilterBody.  # noqa: E501
        :type: datetime
        """

        self._retirement_date = retirement_date

    @property
    def annual_income(self):
        """Gets the annual_income of this ClientsFilterBody.  # noqa: E501

        Annual income of the client  # noqa: E501

        :return: The annual_income of this ClientsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._annual_income

    @annual_income.setter
    def annual_income(self, annual_income):
        """Sets the annual_income of this ClientsFilterBody.

        Annual income of the client  # noqa: E501

        :param annual_income: The annual_income of this ClientsFilterBody.  # noqa: E501
        :type: float
        """

        self._annual_income = annual_income

    @property
    def address_1(self):
        """Gets the address_1 of this ClientsFilterBody.  # noqa: E501

        First line address  # noqa: E501

        :return: The address_1 of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._address_1

    @address_1.setter
    def address_1(self, address_1):
        """Sets the address_1 of this ClientsFilterBody.

        First line address  # noqa: E501

        :param address_1: The address_1 of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._address_1 = address_1

    @property
    def address_2(self):
        """Gets the address_2 of this ClientsFilterBody.  # noqa: E501

        Second line address  # noqa: E501

        :return: The address_2 of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._address_2

    @address_2.setter
    def address_2(self, address_2):
        """Sets the address_2 of this ClientsFilterBody.

        Second line address  # noqa: E501

        :param address_2: The address_2 of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._address_2 = address_2

    @property
    def address_3(self):
        """Gets the address_3 of this ClientsFilterBody.  # noqa: E501

        Third line address  # noqa: E501

        :return: The address_3 of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._address_3

    @address_3.setter
    def address_3(self, address_3):
        """Sets the address_3 of this ClientsFilterBody.

        Third line address  # noqa: E501

        :param address_3: The address_3 of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._address_3 = address_3

    @property
    def city(self):
        """Gets the city of this ClientsFilterBody.  # noqa: E501

        City of the client  # noqa: E501

        :return: The city of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ClientsFilterBody.

        City of the client  # noqa: E501

        :param city: The city of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this ClientsFilterBody.  # noqa: E501

        State of the client  # noqa: E501

        :return: The state of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClientsFilterBody.

        State of the client  # noqa: E501

        :param state: The state of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zip_code(self):
        """Gets the zip_code of this ClientsFilterBody.  # noqa: E501

        Zip code of the client  # noqa: E501

        :return: The zip_code of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this ClientsFilterBody.

        Zip code of the client  # noqa: E501

        :param zip_code: The zip_code of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def country(self):
        """Gets the country of this ClientsFilterBody.  # noqa: E501

        Country of the client  # noqa: E501

        :return: The country of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ClientsFilterBody.

        Country of the client  # noqa: E501

        :param country: The country of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def relationship_type(self):
        """Gets the relationship_type of this ClientsFilterBody.  # noqa: E501

        Relationship of the client. A for active, I for indirect, P for potential, and F for former  # noqa: E501

        :return: The relationship_type of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type):
        """Sets the relationship_type of this ClientsFilterBody.

        Relationship of the client. A for active, I for indirect, P for potential, and F for former  # noqa: E501

        :param relationship_type: The relationship_type of this ClientsFilterBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "I", "P", "F"]  # noqa: E501
        if relationship_type not in allowed_values:
            raise ValueError(
                "Invalid value for `relationship_type` ({0}), must be one of {1}"  # noqa: E501
                .format(relationship_type, allowed_values)
            )

        self._relationship_type = relationship_type

    @property
    def notes(self):
        """Gets the notes of this ClientsFilterBody.  # noqa: E501

        Notes  # noqa: E501

        :return: The notes of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ClientsFilterBody.

        Notes  # noqa: E501

        :param notes: The notes of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def client_tier(self):
        """Gets the client_tier of this ClientsFilterBody.  # noqa: E501

        Tier associated with the client  # noqa: E501

        :return: The client_tier of this ClientsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._client_tier

    @client_tier.setter
    def client_tier(self, client_tier):
        """Sets the client_tier of this ClientsFilterBody.

        Tier associated with the client  # noqa: E501

        :param client_tier: The client_tier of this ClientsFilterBody.  # noqa: E501
        :type: str
        """

        self._client_tier = client_tier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientsFilterBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientsFilterBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

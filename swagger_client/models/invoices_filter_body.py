# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoicesFilterBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'firm_id': 'int',
        'billing_group_id': 'int',
        'snapshot_date': 'datetime',
        'billing_report_id': 'int',
        'annual_fee': 'float',
        'annual_debit': 'float',
        'total_balance': 'float',
        'period_debit': 'float',
        'direct_billed_period_debit': 'float',
        'custodian_billed_period_debit': 'float',
        'n_accounts': 'int',
        'n_fee_structures': 'int',
        'due_date': 'datetime',
        'is_paid': 'bool',
        'group_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'firm_id': 'firm_id',
        'billing_group_id': 'billing_group_id',
        'snapshot_date': 'snapshot_date',
        'billing_report_id': 'billing_report_id',
        'annual_fee': 'annual_fee',
        'annual_debit': 'annual_debit',
        'total_balance': 'total_balance',
        'period_debit': 'period_debit',
        'direct_billed_period_debit': 'direct_billed_period_debit',
        'custodian_billed_period_debit': 'custodian_billed_period_debit',
        'n_accounts': 'n_accounts',
        'n_fee_structures': 'n_fee_structures',
        'due_date': 'due_date',
        'is_paid': 'is_paid',
        'group_id': 'group_id'
    }

    def __init__(self, id=None, firm_id=None, billing_group_id=None, snapshot_date=None, billing_report_id=None, annual_fee=None, annual_debit=None, total_balance=None, period_debit=None, direct_billed_period_debit=None, custodian_billed_period_debit=None, n_accounts=None, n_fee_structures=None, due_date=None, is_paid=None, group_id=None):  # noqa: E501
        """InvoicesFilterBody - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._firm_id = None
        self._billing_group_id = None
        self._snapshot_date = None
        self._billing_report_id = None
        self._annual_fee = None
        self._annual_debit = None
        self._total_balance = None
        self._period_debit = None
        self._direct_billed_period_debit = None
        self._custodian_billed_period_debit = None
        self._n_accounts = None
        self._n_fee_structures = None
        self._due_date = None
        self._is_paid = None
        self._group_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if firm_id is not None:
            self.firm_id = firm_id
        if billing_group_id is not None:
            self.billing_group_id = billing_group_id
        if snapshot_date is not None:
            self.snapshot_date = snapshot_date
        if billing_report_id is not None:
            self.billing_report_id = billing_report_id
        if annual_fee is not None:
            self.annual_fee = annual_fee
        if annual_debit is not None:
            self.annual_debit = annual_debit
        if total_balance is not None:
            self.total_balance = total_balance
        if period_debit is not None:
            self.period_debit = period_debit
        if direct_billed_period_debit is not None:
            self.direct_billed_period_debit = direct_billed_period_debit
        if custodian_billed_period_debit is not None:
            self.custodian_billed_period_debit = custodian_billed_period_debit
        if n_accounts is not None:
            self.n_accounts = n_accounts
        if n_fee_structures is not None:
            self.n_fee_structures = n_fee_structures
        if due_date is not None:
            self.due_date = due_date
        if is_paid is not None:
            self.is_paid = is_paid
        if group_id is not None:
            self.group_id = group_id

    @property
    def id(self):
        """Gets the id of this InvoicesFilterBody.  # noqa: E501

        The unique resource ID for this Invoice  # noqa: E501

        :return: The id of this InvoicesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoicesFilterBody.

        The unique resource ID for this Invoice  # noqa: E501

        :param id: The id of this InvoicesFilterBody.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def firm_id(self):
        """Gets the firm_id of this InvoicesFilterBody.  # noqa: E501

        The firm ID of the managing firm  # noqa: E501

        :return: The firm_id of this InvoicesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this InvoicesFilterBody.

        The firm ID of the managing firm  # noqa: E501

        :param firm_id: The firm_id of this InvoicesFilterBody.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def billing_group_id(self):
        """Gets the billing_group_id of this InvoicesFilterBody.  # noqa: E501

        The billing group ID for this Invoice  # noqa: E501

        :return: The billing_group_id of this InvoicesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._billing_group_id

    @billing_group_id.setter
    def billing_group_id(self, billing_group_id):
        """Sets the billing_group_id of this InvoicesFilterBody.

        The billing group ID for this Invoice  # noqa: E501

        :param billing_group_id: The billing_group_id of this InvoicesFilterBody.  # noqa: E501
        :type: int
        """

        self._billing_group_id = billing_group_id

    @property
    def snapshot_date(self):
        """Gets the snapshot_date of this InvoicesFilterBody.  # noqa: E501

        The snapshot date for this Invoice  # noqa: E501

        :return: The snapshot_date of this InvoicesFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._snapshot_date

    @snapshot_date.setter
    def snapshot_date(self, snapshot_date):
        """Sets the snapshot_date of this InvoicesFilterBody.

        The snapshot date for this Invoice  # noqa: E501

        :param snapshot_date: The snapshot_date of this InvoicesFilterBody.  # noqa: E501
        :type: datetime
        """

        self._snapshot_date = snapshot_date

    @property
    def billing_report_id(self):
        """Gets the billing_report_id of this InvoicesFilterBody.  # noqa: E501

        The associated billing report ID for this Invoice  # noqa: E501

        :return: The billing_report_id of this InvoicesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._billing_report_id

    @billing_report_id.setter
    def billing_report_id(self, billing_report_id):
        """Sets the billing_report_id of this InvoicesFilterBody.

        The associated billing report ID for this Invoice  # noqa: E501

        :param billing_report_id: The billing_report_id of this InvoicesFilterBody.  # noqa: E501
        :type: int
        """

        self._billing_report_id = billing_report_id

    @property
    def annual_fee(self):
        """Gets the annual_fee of this InvoicesFilterBody.  # noqa: E501

        The total fee and debited amount annualized just for this billing group  # noqa: E501

        :return: The annual_fee of this InvoicesFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._annual_fee

    @annual_fee.setter
    def annual_fee(self, annual_fee):
        """Sets the annual_fee of this InvoicesFilterBody.

        The total fee and debited amount annualized just for this billing group  # noqa: E501

        :param annual_fee: The annual_fee of this InvoicesFilterBody.  # noqa: E501
        :type: float
        """

        self._annual_fee = annual_fee

    @property
    def annual_debit(self):
        """Gets the annual_debit of this InvoicesFilterBody.  # noqa: E501

        The annual debit for this Invoice  # noqa: E501

        :return: The annual_debit of this InvoicesFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._annual_debit

    @annual_debit.setter
    def annual_debit(self, annual_debit):
        """Sets the annual_debit of this InvoicesFilterBody.

        The annual debit for this Invoice  # noqa: E501

        :param annual_debit: The annual_debit of this InvoicesFilterBody.  # noqa: E501
        :type: float
        """

        self._annual_debit = annual_debit

    @property
    def total_balance(self):
        """Gets the total_balance of this InvoicesFilterBody.  # noqa: E501

        The total group balance on the snapshot date  # noqa: E501

        :return: The total_balance of this InvoicesFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._total_balance

    @total_balance.setter
    def total_balance(self, total_balance):
        """Sets the total_balance of this InvoicesFilterBody.

        The total group balance on the snapshot date  # noqa: E501

        :param total_balance: The total_balance of this InvoicesFilterBody.  # noqa: E501
        :type: float
        """

        self._total_balance = total_balance

    @property
    def period_debit(self):
        """Gets the period_debit of this InvoicesFilterBody.  # noqa: E501

        The total debited amount for the period just for this billing group on the snapshot date  # noqa: E501

        :return: The period_debit of this InvoicesFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._period_debit

    @period_debit.setter
    def period_debit(self, period_debit):
        """Sets the period_debit of this InvoicesFilterBody.

        The total debited amount for the period just for this billing group on the snapshot date  # noqa: E501

        :param period_debit: The period_debit of this InvoicesFilterBody.  # noqa: E501
        :type: float
        """

        self._period_debit = period_debit

    @property
    def direct_billed_period_debit(self):
        """Gets the direct_billed_period_debit of this InvoicesFilterBody.  # noqa: E501

        The direct billed period debit for this Invoice.  # noqa: E501

        :return: The direct_billed_period_debit of this InvoicesFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._direct_billed_period_debit

    @direct_billed_period_debit.setter
    def direct_billed_period_debit(self, direct_billed_period_debit):
        """Sets the direct_billed_period_debit of this InvoicesFilterBody.

        The direct billed period debit for this Invoice.  # noqa: E501

        :param direct_billed_period_debit: The direct_billed_period_debit of this InvoicesFilterBody.  # noqa: E501
        :type: float
        """

        self._direct_billed_period_debit = direct_billed_period_debit

    @property
    def custodian_billed_period_debit(self):
        """Gets the custodian_billed_period_debit of this InvoicesFilterBody.  # noqa: E501

        The custodian billed period debit for this Invoice  # noqa: E501

        :return: The custodian_billed_period_debit of this InvoicesFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._custodian_billed_period_debit

    @custodian_billed_period_debit.setter
    def custodian_billed_period_debit(self, custodian_billed_period_debit):
        """Sets the custodian_billed_period_debit of this InvoicesFilterBody.

        The custodian billed period debit for this Invoice  # noqa: E501

        :param custodian_billed_period_debit: The custodian_billed_period_debit of this InvoicesFilterBody.  # noqa: E501
        :type: float
        """

        self._custodian_billed_period_debit = custodian_billed_period_debit

    @property
    def n_accounts(self):
        """Gets the n_accounts of this InvoicesFilterBody.  # noqa: E501

        The number of accounts in the report  # noqa: E501

        :return: The n_accounts of this InvoicesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._n_accounts

    @n_accounts.setter
    def n_accounts(self, n_accounts):
        """Sets the n_accounts of this InvoicesFilterBody.

        The number of accounts in the report  # noqa: E501

        :param n_accounts: The n_accounts of this InvoicesFilterBody.  # noqa: E501
        :type: int
        """

        self._n_accounts = n_accounts

    @property
    def n_fee_structures(self):
        """Gets the n_fee_structures of this InvoicesFilterBody.  # noqa: E501

        The number of fee structures in the report  # noqa: E501

        :return: The n_fee_structures of this InvoicesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._n_fee_structures

    @n_fee_structures.setter
    def n_fee_structures(self, n_fee_structures):
        """Sets the n_fee_structures of this InvoicesFilterBody.

        The number of fee structures in the report  # noqa: E501

        :param n_fee_structures: The n_fee_structures of this InvoicesFilterBody.  # noqa: E501
        :type: int
        """

        self._n_fee_structures = n_fee_structures

    @property
    def due_date(self):
        """Gets the due_date of this InvoicesFilterBody.  # noqa: E501

        Invoice due date, calculated using firm settings at the time the invoice was generated  # noqa: E501

        :return: The due_date of this InvoicesFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this InvoicesFilterBody.

        Invoice due date, calculated using firm settings at the time the invoice was generated  # noqa: E501

        :param due_date: The due_date of this InvoicesFilterBody.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def is_paid(self):
        """Gets the is_paid of this InvoicesFilterBody.  # noqa: E501

        Is the invoice paid?  # noqa: E501

        :return: The is_paid of this InvoicesFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_paid

    @is_paid.setter
    def is_paid(self, is_paid):
        """Sets the is_paid of this InvoicesFilterBody.

        Is the invoice paid?  # noqa: E501

        :param is_paid: The is_paid of this InvoicesFilterBody.  # noqa: E501
        :type: bool
        """

        self._is_paid = is_paid

    @property
    def group_id(self):
        """Gets the group_id of this InvoicesFilterBody.  # noqa: E501

        Group Id of this invoice  # noqa: E501

        :return: The group_id of this InvoicesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this InvoicesFilterBody.

        Group Id of this invoice  # noqa: E501

        :param group_id: The group_id of this InvoicesFilterBody.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoicesFilterBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoicesFilterBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

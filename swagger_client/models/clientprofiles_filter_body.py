# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientprofilesFilterBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'firm_id': 'int',
        'account_access_level': 'str',
        'accessible_household_ids': 'list[int]',
        'permissions': 'list[str]',
        'is_owner': 'bool',
        'end_client_household_id': 'int',
        'household_id': 'int',
        'role_id': 'int',
        'is_firm_user': 'bool',
        'is_client_user': 'bool',
        'is_demo_user': 'bool',
        'is_verified': 'bool',
        'verified_dt_utc': 'datetime',
        'is_active': 'bool',
        'last_login': 'datetime',
        'date_joined': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'firm_id': 'firm_id',
        'account_access_level': 'account_access_level',
        'accessible_household_ids': 'accessible_household_ids',
        'permissions': 'permissions',
        'is_owner': 'is_owner',
        'end_client_household_id': 'end_client_household_id',
        'household_id': 'household_id',
        'role_id': 'role_id',
        'is_firm_user': 'is_firm_user',
        'is_client_user': 'is_client_user',
        'is_demo_user': 'is_demo_user',
        'is_verified': 'is_verified',
        'verified_dt_utc': 'verified_dt_utc',
        'is_active': 'is_active',
        'last_login': 'last_login',
        'date_joined': 'date_joined'
    }

    def __init__(self, id=None, firm_id=None, account_access_level=None, accessible_household_ids=None, permissions=None, is_owner=None, end_client_household_id=None, household_id=None, role_id=None, is_firm_user=None, is_client_user=None, is_demo_user=None, is_verified=None, verified_dt_utc=None, is_active=None, last_login=None, date_joined=None):  # noqa: E501
        """ClientprofilesFilterBody - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._firm_id = None
        self._account_access_level = None
        self._accessible_household_ids = None
        self._permissions = None
        self._is_owner = None
        self._end_client_household_id = None
        self._household_id = None
        self._role_id = None
        self._is_firm_user = None
        self._is_client_user = None
        self._is_demo_user = None
        self._is_verified = None
        self._verified_dt_utc = None
        self._is_active = None
        self._last_login = None
        self._date_joined = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if firm_id is not None:
            self.firm_id = firm_id
        if account_access_level is not None:
            self.account_access_level = account_access_level
        if accessible_household_ids is not None:
            self.accessible_household_ids = accessible_household_ids
        if permissions is not None:
            self.permissions = permissions
        if is_owner is not None:
            self.is_owner = is_owner
        if end_client_household_id is not None:
            self.end_client_household_id = end_client_household_id
        if household_id is not None:
            self.household_id = household_id
        if role_id is not None:
            self.role_id = role_id
        if is_firm_user is not None:
            self.is_firm_user = is_firm_user
        if is_client_user is not None:
            self.is_client_user = is_client_user
        if is_demo_user is not None:
            self.is_demo_user = is_demo_user
        if is_verified is not None:
            self.is_verified = is_verified
        if verified_dt_utc is not None:
            self.verified_dt_utc = verified_dt_utc
        if is_active is not None:
            self.is_active = is_active
        if last_login is not None:
            self.last_login = last_login
        if date_joined is not None:
            self.date_joined = date_joined

    @property
    def id(self):
        """Gets the id of this ClientprofilesFilterBody.  # noqa: E501

        Unique ID for this user object  # noqa: E501

        :return: The id of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientprofilesFilterBody.

        Unique ID for this user object  # noqa: E501

        :param id: The id of this ClientprofilesFilterBody.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def firm_id(self):
        """Gets the firm_id of this ClientprofilesFilterBody.  # noqa: E501

        ID of the owning firm  # noqa: E501

        :return: The firm_id of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this ClientprofilesFilterBody.

        ID of the owning firm  # noqa: E501

        :param firm_id: The firm_id of this ClientprofilesFilterBody.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def account_access_level(self):
        """Gets the account_access_level of this ClientprofilesFilterBody.  # noqa: E501

        The user's accessibility level with respect to accounts; can either have access to all accounts or be limited to a subset of them. Can either be all or limited.  # noqa: E501

        :return: The account_access_level of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._account_access_level

    @account_access_level.setter
    def account_access_level(self, account_access_level):
        """Sets the account_access_level of this ClientprofilesFilterBody.

        The user's accessibility level with respect to accounts; can either have access to all accounts or be limited to a subset of them. Can either be all or limited.  # noqa: E501

        :param account_access_level: The account_access_level of this ClientprofilesFilterBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "limited"]  # noqa: E501
        if account_access_level not in allowed_values:
            raise ValueError(
                "Invalid value for `account_access_level` ({0}), must be one of {1}"  # noqa: E501
                .format(account_access_level, allowed_values)
            )

        self._account_access_level = account_access_level

    @property
    def accessible_household_ids(self):
        """Gets the accessible_household_ids of this ClientprofilesFilterBody.  # noqa: E501

        If the user is limited to a subset of accounts, these are the accessible households  # noqa: E501

        :return: The accessible_household_ids of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: list[int]
        """
        return self._accessible_household_ids

    @accessible_household_ids.setter
    def accessible_household_ids(self, accessible_household_ids):
        """Sets the accessible_household_ids of this ClientprofilesFilterBody.

        If the user is limited to a subset of accounts, these are the accessible households  # noqa: E501

        :param accessible_household_ids: The accessible_household_ids of this ClientprofilesFilterBody.  # noqa: E501
        :type: list[int]
        """

        self._accessible_household_ids = accessible_household_ids

    @property
    def permissions(self):
        """Gets the permissions of this ClientprofilesFilterBody.  # noqa: E501

        Editable list of permissions assigned to the user. See Permissions Overview.  # noqa: E501

        :return: The permissions of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ClientprofilesFilterBody.

        Editable list of permissions assigned to the user. See Permissions Overview.  # noqa: E501

        :param permissions: The permissions of this ClientprofilesFilterBody.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def is_owner(self):
        """Gets the is_owner of this ClientprofilesFilterBody.  # noqa: E501

        Is this user the owner of the associated firm? (Always false for a client)  # noqa: E501

        :return: The is_owner of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this ClientprofilesFilterBody.

        Is this user the owner of the associated firm? (Always false for a client)  # noqa: E501

        :param is_owner: The is_owner of this ClientprofilesFilterBody.  # noqa: E501
        :type: bool
        """

        self._is_owner = is_owner

    @property
    def end_client_household_id(self):
        """Gets the end_client_household_id of this ClientprofilesFilterBody.  # noqa: E501

        The household of the end client. All client users should have a reference to the household.  # noqa: E501

        :return: The end_client_household_id of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._end_client_household_id

    @end_client_household_id.setter
    def end_client_household_id(self, end_client_household_id):
        """Sets the end_client_household_id of this ClientprofilesFilterBody.

        The household of the end client. All client users should have a reference to the household.  # noqa: E501

        :param end_client_household_id: The end_client_household_id of this ClientprofilesFilterBody.  # noqa: E501
        :type: int
        """

        self._end_client_household_id = end_client_household_id

    @property
    def household_id(self):
        """Gets the household_id of this ClientprofilesFilterBody.  # noqa: E501

        Alias for end_client_household_id  # noqa: E501

        :return: The household_id of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._household_id

    @household_id.setter
    def household_id(self, household_id):
        """Sets the household_id of this ClientprofilesFilterBody.

        Alias for end_client_household_id  # noqa: E501

        :param household_id: The household_id of this ClientprofilesFilterBody.  # noqa: E501
        :type: int
        """

        self._household_id = household_id

    @property
    def role_id(self):
        """Gets the role_id of this ClientprofilesFilterBody.  # noqa: E501

        The ID of the user-defined role.  # noqa: E501

        :return: The role_id of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this ClientprofilesFilterBody.

        The ID of the user-defined role.  # noqa: E501

        :param role_id: The role_id of this ClientprofilesFilterBody.  # noqa: E501
        :type: int
        """

        self._role_id = role_id

    @property
    def is_firm_user(self):
        """Gets the is_firm_user of this ClientprofilesFilterBody.  # noqa: E501

        Is the user an employee of the managing firm? (No)  # noqa: E501

        :return: The is_firm_user of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_firm_user

    @is_firm_user.setter
    def is_firm_user(self, is_firm_user):
        """Sets the is_firm_user of this ClientprofilesFilterBody.

        Is the user an employee of the managing firm? (No)  # noqa: E501

        :param is_firm_user: The is_firm_user of this ClientprofilesFilterBody.  # noqa: E501
        :type: bool
        """

        self._is_firm_user = is_firm_user

    @property
    def is_client_user(self):
        """Gets the is_client_user of this ClientprofilesFilterBody.  # noqa: E501

        Is the user a client of the managing firm? (Yes)  # noqa: E501

        :return: The is_client_user of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_client_user

    @is_client_user.setter
    def is_client_user(self, is_client_user):
        """Sets the is_client_user of this ClientprofilesFilterBody.

        Is the user a client of the managing firm? (Yes)  # noqa: E501

        :param is_client_user: The is_client_user of this ClientprofilesFilterBody.  # noqa: E501
        :type: bool
        """

        self._is_client_user = is_client_user

    @property
    def is_demo_user(self):
        """Gets the is_demo_user of this ClientprofilesFilterBody.  # noqa: E501

        Is the user a demo user?  # noqa: E501

        :return: The is_demo_user of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_demo_user

    @is_demo_user.setter
    def is_demo_user(self, is_demo_user):
        """Sets the is_demo_user of this ClientprofilesFilterBody.

        Is the user a demo user?  # noqa: E501

        :param is_demo_user: The is_demo_user of this ClientprofilesFilterBody.  # noqa: E501
        :type: bool
        """

        self._is_demo_user = is_demo_user

    @property
    def is_verified(self):
        """Gets the is_verified of this ClientprofilesFilterBody.  # noqa: E501

        Does the user have access to the account?  # noqa: E501

        :return: The is_verified of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this ClientprofilesFilterBody.

        Does the user have access to the account?  # noqa: E501

        :param is_verified: The is_verified of this ClientprofilesFilterBody.  # noqa: E501
        :type: bool
        """

        self._is_verified = is_verified

    @property
    def verified_dt_utc(self):
        """Gets the verified_dt_utc of this ClientprofilesFilterBody.  # noqa: E501

        Timestamp in UTC of when the user was verified.  # noqa: E501

        :return: The verified_dt_utc of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._verified_dt_utc

    @verified_dt_utc.setter
    def verified_dt_utc(self, verified_dt_utc):
        """Sets the verified_dt_utc of this ClientprofilesFilterBody.

        Timestamp in UTC of when the user was verified.  # noqa: E501

        :param verified_dt_utc: The verified_dt_utc of this ClientprofilesFilterBody.  # noqa: E501
        :type: datetime
        """

        self._verified_dt_utc = verified_dt_utc

    @property
    def is_active(self):
        """Gets the is_active of this ClientprofilesFilterBody.  # noqa: E501

        Is the client user active?  # noqa: E501

        :return: The is_active of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ClientprofilesFilterBody.

        Is the client user active?  # noqa: E501

        :param is_active: The is_active of this ClientprofilesFilterBody.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def last_login(self):
        """Gets the last_login of this ClientprofilesFilterBody.  # noqa: E501

        Time when the client last logged in  # noqa: E501

        :return: The last_login of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this ClientprofilesFilterBody.

        Time when the client last logged in  # noqa: E501

        :param last_login: The last_login of this ClientprofilesFilterBody.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    @property
    def date_joined(self):
        """Gets the date_joined of this ClientprofilesFilterBody.  # noqa: E501

        Date when the client joined  # noqa: E501

        :return: The date_joined of this ClientprofilesFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._date_joined

    @date_joined.setter
    def date_joined(self, date_joined):
        """Sets the date_joined of this ClientprofilesFilterBody.

        Date when the client joined  # noqa: E501

        :param date_joined: The date_joined of this ClientprofilesFilterBody.  # noqa: E501
        :type: datetime
        """

        self._date_joined = date_joined

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientprofilesFilterBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientprofilesFilterBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetclassificationsFilterBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'firm_id': 'int',
        'security_id': 'int',
        'created_by_user_id': 'int',
        'class_tag_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'firm_id': 'firm_id',
        'security_id': 'security_id',
        'created_by_user_id': 'created_by_user_id',
        'class_tag_id': 'class_tag_id'
    }

    def __init__(self, id=None, firm_id=None, security_id=None, created_by_user_id=None, class_tag_id=None):  # noqa: E501
        """AssetclassificationsFilterBody - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._firm_id = None
        self._security_id = None
        self._created_by_user_id = None
        self._class_tag_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if firm_id is not None:
            self.firm_id = firm_id
        if security_id is not None:
            self.security_id = security_id
        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if class_tag_id is not None:
            self.class_tag_id = class_tag_id

    @property
    def id(self):
        """Gets the id of this AssetclassificationsFilterBody.  # noqa: E501

        Unique ID for this asset classification object  # noqa: E501

        :return: The id of this AssetclassificationsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetclassificationsFilterBody.

        Unique ID for this asset classification object  # noqa: E501

        :param id: The id of this AssetclassificationsFilterBody.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def firm_id(self):
        """Gets the firm_id of this AssetclassificationsFilterBody.  # noqa: E501

        ID of the owning firm  # noqa: E501

        :return: The firm_id of this AssetclassificationsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this AssetclassificationsFilterBody.

        ID of the owning firm  # noqa: E501

        :param firm_id: The firm_id of this AssetclassificationsFilterBody.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def security_id(self):
        """Gets the security_id of this AssetclassificationsFilterBody.  # noqa: E501

        ID of the security being classified  # noqa: E501

        :return: The security_id of this AssetclassificationsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._security_id

    @security_id.setter
    def security_id(self, security_id):
        """Sets the security_id of this AssetclassificationsFilterBody.

        ID of the security being classified  # noqa: E501

        :param security_id: The security_id of this AssetclassificationsFilterBody.  # noqa: E501
        :type: int
        """

        self._security_id = security_id

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this AssetclassificationsFilterBody.  # noqa: E501

        ID of the user that created the classification  # noqa: E501

        :return: The created_by_user_id of this AssetclassificationsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this AssetclassificationsFilterBody.

        ID of the user that created the classification  # noqa: E501

        :param created_by_user_id: The created_by_user_id of this AssetclassificationsFilterBody.  # noqa: E501
        :type: int
        """

        self._created_by_user_id = created_by_user_id

    @property
    def class_tag_id(self):
        """Gets the class_tag_id of this AssetclassificationsFilterBody.  # noqa: E501

        ID of the class tag for the classification  # noqa: E501

        :return: The class_tag_id of this AssetclassificationsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._class_tag_id

    @class_tag_id.setter
    def class_tag_id(self, class_tag_id):
        """Sets the class_tag_id of this AssetclassificationsFilterBody.

        ID of the class tag for the classification  # noqa: E501

        :param class_tag_id: The class_tag_id of this AssetclassificationsFilterBody.  # noqa: E501
        :type: int
        """

        self._class_tag_id = class_tag_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetclassificationsFilterBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetclassificationsFilterBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

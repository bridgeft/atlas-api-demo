# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Coefficients(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'weight': 'str',
        'benchmark_id': 'int',
        'index_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'weight': 'weight',
        'benchmark_id': 'benchmark_id',
        'index_id': 'index_id'
    }

    def __init__(self, id=None, weight=None, benchmark_id=None, index_id=None):  # noqa: E501
        """Coefficients - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._weight = None
        self._benchmark_id = None
        self._index_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if weight is not None:
            self.weight = weight
        if benchmark_id is not None:
            self.benchmark_id = benchmark_id
        if index_id is not None:
            self.index_id = index_id

    @property
    def id(self):
        """Gets the id of this Coefficients.  # noqa: E501

        Unique ID for this benchmark coefficient object  # noqa: E501

        :return: The id of this Coefficients.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Coefficients.

        Unique ID for this benchmark coefficient object  # noqa: E501

        :param id: The id of this Coefficients.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def weight(self):
        """Gets the weight of this Coefficients.  # noqa: E501

        The coefficient on the benchmark; stored on the percentage scale (0.0 to 100.0)  # noqa: E501

        :return: The weight of this Coefficients.  # noqa: E501
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Coefficients.

        The coefficient on the benchmark; stored on the percentage scale (0.0 to 100.0)  # noqa: E501

        :param weight: The weight of this Coefficients.  # noqa: E501
        :type: str
        """

        self._weight = weight

    @property
    def benchmark_id(self):
        """Gets the benchmark_id of this Coefficients.  # noqa: E501

        Benchmark object ID to which this coefficient belongs  # noqa: E501

        :return: The benchmark_id of this Coefficients.  # noqa: E501
        :rtype: int
        """
        return self._benchmark_id

    @benchmark_id.setter
    def benchmark_id(self, benchmark_id):
        """Sets the benchmark_id of this Coefficients.

        Benchmark object ID to which this coefficient belongs  # noqa: E501

        :param benchmark_id: The benchmark_id of this Coefficients.  # noqa: E501
        :type: int
        """

        self._benchmark_id = benchmark_id

    @property
    def index_id(self):
        """Gets the index_id of this Coefficients.  # noqa: E501

        ID of the index that the benchmark weight is tied to  # noqa: E501

        :return: The index_id of this Coefficients.  # noqa: E501
        :rtype: int
        """
        return self._index_id

    @index_id.setter
    def index_id(self, index_id):
        """Sets the index_id of this Coefficients.

        ID of the index that the benchmark weight is tied to  # noqa: E501

        :param index_id: The index_id of this Coefficients.  # noqa: E501
        :type: int
        """

        self._index_id = index_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Coefficients, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Coefficients):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

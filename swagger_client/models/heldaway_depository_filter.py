# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HeldawayDepositoryFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'plaid_transaction_id': 'int',
        'plaid_account_id': 'int',
        'plaid_item_id': 'int',
        'household_id': 'int',
        'firm_id': 'int',
        'category_id': 'str',
        'plaid_transaction_type': 'str',
        'name': 'str',
        'merchant_name': 'str',
        'amount': 'float',
        'iso_currency_code': 'str',
        'unofficial_currency_code': 'str',
        '_date': 'datetime',
        'authorized_date': 'datetime',
        'location': 'object',
        'payment_meta': 'object',
        'payment_channel': 'object',
        'pending': 'bool',
        'account_owner': 'str',
        'transaction_code': 'str'
    }

    attribute_map = {
        'id': 'id',
        'plaid_transaction_id': 'plaid_transaction_id',
        'plaid_account_id': 'plaid_account_id',
        'plaid_item_id': 'plaid_item_id',
        'household_id': 'household_id',
        'firm_id': 'firm_id',
        'category_id': 'category_id',
        'plaid_transaction_type': 'plaid_transaction_type',
        'name': 'name',
        'merchant_name': 'merchant_name',
        'amount': 'amount',
        'iso_currency_code': 'iso_currency_code',
        'unofficial_currency_code': 'unofficial_currency_code',
        '_date': 'date',
        'authorized_date': 'authorized_date',
        'location': 'location',
        'payment_meta': 'payment_meta',
        'payment_channel': 'payment_channel',
        'pending': 'pending',
        'account_owner': 'account_owner',
        'transaction_code': 'transaction_code'
    }

    def __init__(self, id=None, plaid_transaction_id=None, plaid_account_id=None, plaid_item_id=None, household_id=None, firm_id=None, category_id=None, plaid_transaction_type=None, name=None, merchant_name=None, amount=None, iso_currency_code=None, unofficial_currency_code=None, _date=None, authorized_date=None, location=None, payment_meta=None, payment_channel=None, pending=None, account_owner=None, transaction_code=None):  # noqa: E501
        """HeldawayDepositoryFilter - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._plaid_transaction_id = None
        self._plaid_account_id = None
        self._plaid_item_id = None
        self._household_id = None
        self._firm_id = None
        self._category_id = None
        self._plaid_transaction_type = None
        self._name = None
        self._merchant_name = None
        self._amount = None
        self._iso_currency_code = None
        self._unofficial_currency_code = None
        self.__date = None
        self._authorized_date = None
        self._location = None
        self._payment_meta = None
        self._payment_channel = None
        self._pending = None
        self._account_owner = None
        self._transaction_code = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if plaid_transaction_id is not None:
            self.plaid_transaction_id = plaid_transaction_id
        if plaid_account_id is not None:
            self.plaid_account_id = plaid_account_id
        if plaid_item_id is not None:
            self.plaid_item_id = plaid_item_id
        if household_id is not None:
            self.household_id = household_id
        if firm_id is not None:
            self.firm_id = firm_id
        if category_id is not None:
            self.category_id = category_id
        if plaid_transaction_type is not None:
            self.plaid_transaction_type = plaid_transaction_type
        if name is not None:
            self.name = name
        if merchant_name is not None:
            self.merchant_name = merchant_name
        if amount is not None:
            self.amount = amount
        if iso_currency_code is not None:
            self.iso_currency_code = iso_currency_code
        if unofficial_currency_code is not None:
            self.unofficial_currency_code = unofficial_currency_code
        if _date is not None:
            self._date = _date
        if authorized_date is not None:
            self.authorized_date = authorized_date
        if location is not None:
            self.location = location
        if payment_meta is not None:
            self.payment_meta = payment_meta
        if payment_channel is not None:
            self.payment_channel = payment_channel
        if pending is not None:
            self.pending = pending
        if account_owner is not None:
            self.account_owner = account_owner
        if transaction_code is not None:
            self.transaction_code = transaction_code

    @property
    def id(self):
        """Gets the id of this HeldawayDepositoryFilter.  # noqa: E501

        The unique resource id for this Heldaway Transaction  # noqa: E501

        :return: The id of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HeldawayDepositoryFilter.

        The unique resource id for this Heldaway Transaction  # noqa: E501

        :param id: The id of this HeldawayDepositoryFilter.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def plaid_transaction_id(self):
        """Gets the plaid_transaction_id of this HeldawayDepositoryFilter.  # noqa: E501

        The ID of the transaction on Plaid  # noqa: E501

        :return: The plaid_transaction_id of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: int
        """
        return self._plaid_transaction_id

    @plaid_transaction_id.setter
    def plaid_transaction_id(self, plaid_transaction_id):
        """Sets the plaid_transaction_id of this HeldawayDepositoryFilter.

        The ID of the transaction on Plaid  # noqa: E501

        :param plaid_transaction_id: The plaid_transaction_id of this HeldawayDepositoryFilter.  # noqa: E501
        :type: int
        """

        self._plaid_transaction_id = plaid_transaction_id

    @property
    def plaid_account_id(self):
        """Gets the plaid_account_id of this HeldawayDepositoryFilter.  # noqa: E501

        The Plaid account id associated with this heldaway transaction  # noqa: E501

        :return: The plaid_account_id of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: int
        """
        return self._plaid_account_id

    @plaid_account_id.setter
    def plaid_account_id(self, plaid_account_id):
        """Sets the plaid_account_id of this HeldawayDepositoryFilter.

        The Plaid account id associated with this heldaway transaction  # noqa: E501

        :param plaid_account_id: The plaid_account_id of this HeldawayDepositoryFilter.  # noqa: E501
        :type: int
        """

        self._plaid_account_id = plaid_account_id

    @property
    def plaid_item_id(self):
        """Gets the plaid_item_id of this HeldawayDepositoryFilter.  # noqa: E501

        The id of the heldaway connection associated with this transaction  # noqa: E501

        :return: The plaid_item_id of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: int
        """
        return self._plaid_item_id

    @plaid_item_id.setter
    def plaid_item_id(self, plaid_item_id):
        """Sets the plaid_item_id of this HeldawayDepositoryFilter.

        The id of the heldaway connection associated with this transaction  # noqa: E501

        :param plaid_item_id: The plaid_item_id of this HeldawayDepositoryFilter.  # noqa: E501
        :type: int
        """

        self._plaid_item_id = plaid_item_id

    @property
    def household_id(self):
        """Gets the household_id of this HeldawayDepositoryFilter.  # noqa: E501

        The id of the household to which this transaction belongs  # noqa: E501

        :return: The household_id of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: int
        """
        return self._household_id

    @household_id.setter
    def household_id(self, household_id):
        """Sets the household_id of this HeldawayDepositoryFilter.

        The id of the household to which this transaction belongs  # noqa: E501

        :param household_id: The household_id of this HeldawayDepositoryFilter.  # noqa: E501
        :type: int
        """

        self._household_id = household_id

    @property
    def firm_id(self):
        """Gets the firm_id of this HeldawayDepositoryFilter.  # noqa: E501

        The id of the firm managing this heldaway transaction  # noqa: E501

        :return: The firm_id of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this HeldawayDepositoryFilter.

        The id of the firm managing this heldaway transaction  # noqa: E501

        :param firm_id: The firm_id of this HeldawayDepositoryFilter.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def category_id(self):
        """Gets the category_id of this HeldawayDepositoryFilter.  # noqa: E501

        The ID of the category to which this transaction belongs  # noqa: E501

        :return: The category_id of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this HeldawayDepositoryFilter.

        The ID of the category to which this transaction belongs  # noqa: E501

        :param category_id: The category_id of this HeldawayDepositoryFilter.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def plaid_transaction_type(self):
        """Gets the plaid_transaction_type of this HeldawayDepositoryFilter.  # noqa: E501

        The type of Transaction determined by Plaid  # noqa: E501

        :return: The plaid_transaction_type of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: str
        """
        return self._plaid_transaction_type

    @plaid_transaction_type.setter
    def plaid_transaction_type(self, plaid_transaction_type):
        """Sets the plaid_transaction_type of this HeldawayDepositoryFilter.

        The type of Transaction determined by Plaid  # noqa: E501

        :param plaid_transaction_type: The plaid_transaction_type of this HeldawayDepositoryFilter.  # noqa: E501
        :type: str
        """

        self._plaid_transaction_type = plaid_transaction_type

    @property
    def name(self):
        """Gets the name of this HeldawayDepositoryFilter.  # noqa: E501

        Description of the transaction  # noqa: E501

        :return: The name of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HeldawayDepositoryFilter.

        Description of the transaction  # noqa: E501

        :param name: The name of this HeldawayDepositoryFilter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def merchant_name(self):
        """Gets the merchant_name of this HeldawayDepositoryFilter.  # noqa: E501

        Clean name of the merchant if applicable  # noqa: E501

        :return: The merchant_name of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this HeldawayDepositoryFilter.

        Clean name of the merchant if applicable  # noqa: E501

        :param merchant_name: The merchant_name of this HeldawayDepositoryFilter.  # noqa: E501
        :type: str
        """

        self._merchant_name = merchant_name

    @property
    def amount(self):
        """Gets the amount of this HeldawayDepositoryFilter.  # noqa: E501

        The settled dollar value. Positive values when money moves out of the account; negative values when money moves in. For example, purchases are positive; credit card payments, direct deposits, refunds are negative  # noqa: E501

        :return: The amount of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this HeldawayDepositoryFilter.

        The settled dollar value. Positive values when money moves out of the account; negative values when money moves in. For example, purchases are positive; credit card payments, direct deposits, refunds are negative  # noqa: E501

        :param amount: The amount of this HeldawayDepositoryFilter.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def iso_currency_code(self):
        """Gets the iso_currency_code of this HeldawayDepositoryFilter.  # noqa: E501

        The ISO currency code of the transaction. Always null if unofficial_currency_code is non-null.  # noqa: E501

        :return: The iso_currency_code of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: str
        """
        return self._iso_currency_code

    @iso_currency_code.setter
    def iso_currency_code(self, iso_currency_code):
        """Sets the iso_currency_code of this HeldawayDepositoryFilter.

        The ISO currency code of the transaction. Always null if unofficial_currency_code is non-null.  # noqa: E501

        :param iso_currency_code: The iso_currency_code of this HeldawayDepositoryFilter.  # noqa: E501
        :type: str
        """

        self._iso_currency_code = iso_currency_code

    @property
    def unofficial_currency_code(self):
        """Gets the unofficial_currency_code of this HeldawayDepositoryFilter.  # noqa: E501

        The currency code associated with the transaction, if not recognized as an ISO code. For example, cryptocurrencies such as BTC. Always null if iso_currency_code is non-null.  # noqa: E501

        :return: The unofficial_currency_code of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: str
        """
        return self._unofficial_currency_code

    @unofficial_currency_code.setter
    def unofficial_currency_code(self, unofficial_currency_code):
        """Sets the unofficial_currency_code of this HeldawayDepositoryFilter.

        The currency code associated with the transaction, if not recognized as an ISO code. For example, cryptocurrencies such as BTC. Always null if iso_currency_code is non-null.  # noqa: E501

        :param unofficial_currency_code: The unofficial_currency_code of this HeldawayDepositoryFilter.  # noqa: E501
        :type: str
        """

        self._unofficial_currency_code = unofficial_currency_code

    @property
    def _date(self):
        """Gets the _date of this HeldawayDepositoryFilter.  # noqa: E501

        For pending transactions, Plaid returns the date the transaction occurred; for posted transactions, Plaid returns the date the transaction posts. Both dates are returned in an ISO 8601 format ( YYYY-MM-DD ). Dates reflect the date posted by the bank and are not standardized to a timezone by Plaid.  # noqa: E501

        :return: The _date of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this HeldawayDepositoryFilter.

        For pending transactions, Plaid returns the date the transaction occurred; for posted transactions, Plaid returns the date the transaction posts. Both dates are returned in an ISO 8601 format ( YYYY-MM-DD ). Dates reflect the date posted by the bank and are not standardized to a timezone by Plaid.  # noqa: E501

        :param _date: The _date of this HeldawayDepositoryFilter.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def authorized_date(self):
        """Gets the authorized_date of this HeldawayDepositoryFilter.  # noqa: E501

        The date that the transaction was authorized. Dates are returned in an ISO 8601 format ( YYYY-MM-DD ).  # noqa: E501

        :return: The authorized_date of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._authorized_date

    @authorized_date.setter
    def authorized_date(self, authorized_date):
        """Sets the authorized_date of this HeldawayDepositoryFilter.

        The date that the transaction was authorized. Dates are returned in an ISO 8601 format ( YYYY-MM-DD ).  # noqa: E501

        :param authorized_date: The authorized_date of this HeldawayDepositoryFilter.  # noqa: E501
        :type: datetime
        """

        self._authorized_date = authorized_date

    @property
    def location(self):
        """Gets the location of this HeldawayDepositoryFilter.  # noqa: E501

        Information about where the transaction occurred. The location key will always be an Object, but no location data elements are guaranteed.  # noqa: E501

        :return: The location of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: object
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this HeldawayDepositoryFilter.

        Information about where the transaction occurred. The location key will always be an Object, but no location data elements are guaranteed.  # noqa: E501

        :param location: The location of this HeldawayDepositoryFilter.  # noqa: E501
        :type: object
        """

        self._location = location

    @property
    def payment_meta(self):
        """Gets the payment_meta of this HeldawayDepositoryFilter.  # noqa: E501

        Information about a transfer payment. The payment_meta key will always be an Object, but no payment_meta data elements are guaranteed. This object will be deprecated in the future.  # noqa: E501

        :return: The payment_meta of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: object
        """
        return self._payment_meta

    @payment_meta.setter
    def payment_meta(self, payment_meta):
        """Sets the payment_meta of this HeldawayDepositoryFilter.

        Information about a transfer payment. The payment_meta key will always be an Object, but no payment_meta data elements are guaranteed. This object will be deprecated in the future.  # noqa: E501

        :param payment_meta: The payment_meta of this HeldawayDepositoryFilter.  # noqa: E501
        :type: object
        """

        self._payment_meta = payment_meta

    @property
    def payment_channel(self):
        """Gets the payment_channel of this HeldawayDepositoryFilter.  # noqa: E501

        The channel used to make a payment. Possible values are; online, in store, other. This field will replace the transaction_type field.  # noqa: E501

        :return: The payment_channel of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: object
        """
        return self._payment_channel

    @payment_channel.setter
    def payment_channel(self, payment_channel):
        """Sets the payment_channel of this HeldawayDepositoryFilter.

        The channel used to make a payment. Possible values are; online, in store, other. This field will replace the transaction_type field.  # noqa: E501

        :param payment_channel: The payment_channel of this HeldawayDepositoryFilter.  # noqa: E501
        :type: object
        """

        self._payment_channel = payment_channel

    @property
    def pending(self):
        """Gets the pending of this HeldawayDepositoryFilter.  # noqa: E501

        When true, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.  # noqa: E501

        :return: The pending of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: bool
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this HeldawayDepositoryFilter.

        When true, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.  # noqa: E501

        :param pending: The pending of this HeldawayDepositoryFilter.  # noqa: E501
        :type: bool
        """

        self._pending = pending

    @property
    def account_owner(self):
        """Gets the account_owner of this HeldawayDepositoryFilter.  # noqa: E501

        The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.  # noqa: E501

        :return: The account_owner of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: str
        """
        return self._account_owner

    @account_owner.setter
    def account_owner(self, account_owner):
        """Sets the account_owner of this HeldawayDepositoryFilter.

        The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.  # noqa: E501

        :param account_owner: The account_owner of this HeldawayDepositoryFilter.  # noqa: E501
        :type: str
        """

        self._account_owner = account_owner

    @property
    def transaction_code(self):
        """Gets the transaction_code of this HeldawayDepositoryFilter.  # noqa: E501

        The transaction code  # noqa: E501

        :return: The transaction_code of this HeldawayDepositoryFilter.  # noqa: E501
        :rtype: str
        """
        return self._transaction_code

    @transaction_code.setter
    def transaction_code(self, transaction_code):
        """Sets the transaction_code of this HeldawayDepositoryFilter.

        The transaction code  # noqa: E501

        :param transaction_code: The transaction_code of this HeldawayDepositoryFilter.  # noqa: E501
        :type: str
        """

        self._transaction_code = transaction_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HeldawayDepositoryFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HeldawayDepositoryFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

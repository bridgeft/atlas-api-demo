# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BillingSplitsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'firm_id': 'int',
        'name': 'str',
        'splitter_name': 'str',
        'splitter_slug': 'str',
        'percentage': 'float'
    }

    attribute_map = {
        'firm_id': 'firm_id',
        'name': 'name',
        'splitter_name': 'splitter_name',
        'splitter_slug': 'splitter_slug',
        'percentage': 'percentage'
    }

    def __init__(self, firm_id=None, name=None, splitter_name=None, splitter_slug=None, percentage=None):  # noqa: E501
        """BillingSplitsBody - a model defined in Swagger"""  # noqa: E501
        self._firm_id = None
        self._name = None
        self._splitter_name = None
        self._splitter_slug = None
        self._percentage = None
        self.discriminator = None
        if firm_id is not None:
            self.firm_id = firm_id
        if name is not None:
            self.name = name
        if splitter_name is not None:
            self.splitter_name = splitter_name
        if splitter_slug is not None:
            self.splitter_slug = splitter_slug
        if percentage is not None:
            self.percentage = percentage

    @property
    def firm_id(self):
        """Gets the firm_id of this BillingSplitsBody.  # noqa: E501

        The ID of the managing firm for this billing split  # noqa: E501

        :return: The firm_id of this BillingSplitsBody.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this BillingSplitsBody.

        The ID of the managing firm for this billing split  # noqa: E501

        :param firm_id: The firm_id of this BillingSplitsBody.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def name(self):
        """Gets the name of this BillingSplitsBody.  # noqa: E501

        The name of the billing split, auto-generated if not supplied  # noqa: E501

        :return: The name of this BillingSplitsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BillingSplitsBody.

        The name of the billing split, auto-generated if not supplied  # noqa: E501

        :param name: The name of this BillingSplitsBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def splitter_name(self):
        """Gets the splitter_name of this BillingSplitsBody.  # noqa: E501

        The name originally entered by the user  # noqa: E501

        :return: The splitter_name of this BillingSplitsBody.  # noqa: E501
        :rtype: str
        """
        return self._splitter_name

    @splitter_name.setter
    def splitter_name(self, splitter_name):
        """Sets the splitter_name of this BillingSplitsBody.

        The name originally entered by the user  # noqa: E501

        :param splitter_name: The splitter_name of this BillingSplitsBody.  # noqa: E501
        :type: str
        """

        self._splitter_name = splitter_name

    @property
    def splitter_slug(self):
        """Gets the splitter_slug of this BillingSplitsBody.  # noqa: E501

        The sluggified version of the name field  # noqa: E501

        :return: The splitter_slug of this BillingSplitsBody.  # noqa: E501
        :rtype: str
        """
        return self._splitter_slug

    @splitter_slug.setter
    def splitter_slug(self, splitter_slug):
        """Sets the splitter_slug of this BillingSplitsBody.

        The sluggified version of the name field  # noqa: E501

        :param splitter_slug: The splitter_slug of this BillingSplitsBody.  # noqa: E501
        :type: str
        """

        self._splitter_slug = splitter_slug

    @property
    def percentage(self):
        """Gets the percentage of this BillingSplitsBody.  # noqa: E501

        The percentage of the split stored on the natural scale  # noqa: E501

        :return: The percentage of this BillingSplitsBody.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this BillingSplitsBody.

        The percentage of the split stored on the natural scale  # noqa: E501

        :param percentage: The percentage of this BillingSplitsBody.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingSplitsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingSplitsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportsFilterBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'firm_id': 'int',
        'created_invoices': 'bool',
        'billing_date': 'datetime',
        'snapshot_date': 'datetime',
        'run_date': 'datetime',
        'created_date': 'datetime',
        'annual_fee': 'float',
        'annual_debit': 'float',
        'total_balance': 'float',
        'aum_on_billing_date': 'float',
        'period_debit': 'float',
        'direct_billed_period_debit': 'float',
        'custodian_billed_period_debit': 'float',
        'split_payout': 'float',
        'split_payout_annualized': 'float',
        'firm_share': 'float',
        'firm_share_annualized': 'float',
        'n_accounts': 'int',
        'n_groups': 'int',
        'n_splits': 'int',
        'n_fee_structures': 'int',
        'fee_upload_file_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'firm_id': 'firm_id',
        'created_invoices': 'created_invoices',
        'billing_date': 'billing_date',
        'snapshot_date': 'snapshot_date',
        'run_date': 'run_date',
        'created_date': 'created_date',
        'annual_fee': 'annual_fee',
        'annual_debit': 'annual_debit',
        'total_balance': 'total_balance',
        'aum_on_billing_date': 'aum_on_billing_date',
        'period_debit': 'period_debit',
        'direct_billed_period_debit': 'direct_billed_period_debit',
        'custodian_billed_period_debit': 'custodian_billed_period_debit',
        'split_payout': 'split_payout',
        'split_payout_annualized': 'split_payout_annualized',
        'firm_share': 'firm_share',
        'firm_share_annualized': 'firm_share_annualized',
        'n_accounts': 'n_accounts',
        'n_groups': 'n_groups',
        'n_splits': 'n_splits',
        'n_fee_structures': 'n_fee_structures',
        'fee_upload_file_id': 'fee_upload_file_id'
    }

    def __init__(self, id=None, firm_id=None, created_invoices=None, billing_date=None, snapshot_date=None, run_date=None, created_date=None, annual_fee=None, annual_debit=None, total_balance=None, aum_on_billing_date=None, period_debit=None, direct_billed_period_debit=None, custodian_billed_period_debit=None, split_payout=None, split_payout_annualized=None, firm_share=None, firm_share_annualized=None, n_accounts=None, n_groups=None, n_splits=None, n_fee_structures=None, fee_upload_file_id=None):  # noqa: E501
        """ReportsFilterBody - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._firm_id = None
        self._created_invoices = None
        self._billing_date = None
        self._snapshot_date = None
        self._run_date = None
        self._created_date = None
        self._annual_fee = None
        self._annual_debit = None
        self._total_balance = None
        self._aum_on_billing_date = None
        self._period_debit = None
        self._direct_billed_period_debit = None
        self._custodian_billed_period_debit = None
        self._split_payout = None
        self._split_payout_annualized = None
        self._firm_share = None
        self._firm_share_annualized = None
        self._n_accounts = None
        self._n_groups = None
        self._n_splits = None
        self._n_fee_structures = None
        self._fee_upload_file_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if firm_id is not None:
            self.firm_id = firm_id
        if created_invoices is not None:
            self.created_invoices = created_invoices
        if billing_date is not None:
            self.billing_date = billing_date
        if snapshot_date is not None:
            self.snapshot_date = snapshot_date
        if run_date is not None:
            self.run_date = run_date
        if created_date is not None:
            self.created_date = created_date
        if annual_fee is not None:
            self.annual_fee = annual_fee
        if annual_debit is not None:
            self.annual_debit = annual_debit
        if total_balance is not None:
            self.total_balance = total_balance
        if aum_on_billing_date is not None:
            self.aum_on_billing_date = aum_on_billing_date
        if period_debit is not None:
            self.period_debit = period_debit
        if direct_billed_period_debit is not None:
            self.direct_billed_period_debit = direct_billed_period_debit
        if custodian_billed_period_debit is not None:
            self.custodian_billed_period_debit = custodian_billed_period_debit
        if split_payout is not None:
            self.split_payout = split_payout
        if split_payout_annualized is not None:
            self.split_payout_annualized = split_payout_annualized
        if firm_share is not None:
            self.firm_share = firm_share
        if firm_share_annualized is not None:
            self.firm_share_annualized = firm_share_annualized
        if n_accounts is not None:
            self.n_accounts = n_accounts
        if n_groups is not None:
            self.n_groups = n_groups
        if n_splits is not None:
            self.n_splits = n_splits
        if n_fee_structures is not None:
            self.n_fee_structures = n_fee_structures
        if fee_upload_file_id is not None:
            self.fee_upload_file_id = fee_upload_file_id

    @property
    def id(self):
        """Gets the id of this ReportsFilterBody.  # noqa: E501

        The unique resource ID for this billing report  # noqa: E501

        :return: The id of this ReportsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportsFilterBody.

        The unique resource ID for this billing report  # noqa: E501

        :param id: The id of this ReportsFilterBody.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def firm_id(self):
        """Gets the firm_id of this ReportsFilterBody.  # noqa: E501

        The firm ID of the managing firm  # noqa: E501

        :return: The firm_id of this ReportsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this ReportsFilterBody.

        The firm ID of the managing firm  # noqa: E501

        :param firm_id: The firm_id of this ReportsFilterBody.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def created_invoices(self):
        """Gets the created_invoices of this ReportsFilterBody.  # noqa: E501

        True if invoices were created when the report was created  # noqa: E501

        :return: The created_invoices of this ReportsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._created_invoices

    @created_invoices.setter
    def created_invoices(self, created_invoices):
        """Sets the created_invoices of this ReportsFilterBody.

        True if invoices were created when the report was created  # noqa: E501

        :param created_invoices: The created_invoices of this ReportsFilterBody.  # noqa: E501
        :type: bool
        """

        self._created_invoices = created_invoices

    @property
    def billing_date(self):
        """Gets the billing_date of this ReportsFilterBody.  # noqa: E501

        The input date to the billing report  # noqa: E501

        :return: The billing_date of this ReportsFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._billing_date

    @billing_date.setter
    def billing_date(self, billing_date):
        """Sets the billing_date of this ReportsFilterBody.

        The input date to the billing report  # noqa: E501

        :param billing_date: The billing_date of this ReportsFilterBody.  # noqa: E501
        :type: datetime
        """

        self._billing_date = billing_date

    @property
    def snapshot_date(self):
        """Gets the snapshot_date of this ReportsFilterBody.  # noqa: E501

        The closest date available to the billing date for which there's data at the time of running the report  # noqa: E501

        :return: The snapshot_date of this ReportsFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._snapshot_date

    @snapshot_date.setter
    def snapshot_date(self, snapshot_date):
        """Sets the snapshot_date of this ReportsFilterBody.

        The closest date available to the billing date for which there's data at the time of running the report  # noqa: E501

        :param snapshot_date: The snapshot_date of this ReportsFilterBody.  # noqa: E501
        :type: datetime
        """

        self._snapshot_date = snapshot_date

    @property
    def run_date(self):
        """Gets the run_date of this ReportsFilterBody.  # noqa: E501

        The most recent market date corresponding to when the report date  # noqa: E501

        :return: The run_date of this ReportsFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._run_date

    @run_date.setter
    def run_date(self, run_date):
        """Sets the run_date of this ReportsFilterBody.

        The most recent market date corresponding to when the report date  # noqa: E501

        :param run_date: The run_date of this ReportsFilterBody.  # noqa: E501
        :type: datetime
        """

        self._run_date = run_date

    @property
    def created_date(self):
        """Gets the created_date of this ReportsFilterBody.  # noqa: E501

        The calendar date on which the report was generated / created  # noqa: E501

        :return: The created_date of this ReportsFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ReportsFilterBody.

        The calendar date on which the report was generated / created  # noqa: E501

        :param created_date: The created_date of this ReportsFilterBody.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def annual_fee(self):
        """Gets the annual_fee of this ReportsFilterBody.  # noqa: E501

        Total fee and debited amount annualized  # noqa: E501

        :return: The annual_fee of this ReportsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._annual_fee

    @annual_fee.setter
    def annual_fee(self, annual_fee):
        """Sets the annual_fee of this ReportsFilterBody.

        Total fee and debited amount annualized  # noqa: E501

        :param annual_fee: The annual_fee of this ReportsFilterBody.  # noqa: E501
        :type: float
        """

        self._annual_fee = annual_fee

    @property
    def annual_debit(self):
        """Gets the annual_debit of this ReportsFilterBody.  # noqa: E501

        The annual debit amount for this billing report  # noqa: E501

        :return: The annual_debit of this ReportsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._annual_debit

    @annual_debit.setter
    def annual_debit(self, annual_debit):
        """Sets the annual_debit of this ReportsFilterBody.

        The annual debit amount for this billing report  # noqa: E501

        :param annual_debit: The annual_debit of this ReportsFilterBody.  # noqa: E501
        :type: float
        """

        self._annual_debit = annual_debit

    @property
    def total_balance(self):
        """Gets the total_balance of this ReportsFilterBody.  # noqa: E501

        Sum of all group balances on the billing date  # noqa: E501

        :return: The total_balance of this ReportsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._total_balance

    @total_balance.setter
    def total_balance(self, total_balance):
        """Sets the total_balance of this ReportsFilterBody.

        Sum of all group balances on the billing date  # noqa: E501

        :param total_balance: The total_balance of this ReportsFilterBody.  # noqa: E501
        :type: float
        """

        self._total_balance = total_balance

    @property
    def aum_on_billing_date(self):
        """Gets the aum_on_billing_date of this ReportsFilterBody.  # noqa: E501

        All assets under management on the billing date  # noqa: E501

        :return: The aum_on_billing_date of this ReportsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._aum_on_billing_date

    @aum_on_billing_date.setter
    def aum_on_billing_date(self, aum_on_billing_date):
        """Sets the aum_on_billing_date of this ReportsFilterBody.

        All assets under management on the billing date  # noqa: E501

        :param aum_on_billing_date: The aum_on_billing_date of this ReportsFilterBody.  # noqa: E501
        :type: float
        """

        self._aum_on_billing_date = aum_on_billing_date

    @property
    def period_debit(self):
        """Gets the period_debit of this ReportsFilterBody.  # noqa: E501

        Total debited amount for the period  # noqa: E501

        :return: The period_debit of this ReportsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._period_debit

    @period_debit.setter
    def period_debit(self, period_debit):
        """Sets the period_debit of this ReportsFilterBody.

        Total debited amount for the period  # noqa: E501

        :param period_debit: The period_debit of this ReportsFilterBody.  # noqa: E501
        :type: float
        """

        self._period_debit = period_debit

    @property
    def direct_billed_period_debit(self):
        """Gets the direct_billed_period_debit of this ReportsFilterBody.  # noqa: E501

        The direct billed period debit for this billing report  # noqa: E501

        :return: The direct_billed_period_debit of this ReportsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._direct_billed_period_debit

    @direct_billed_period_debit.setter
    def direct_billed_period_debit(self, direct_billed_period_debit):
        """Sets the direct_billed_period_debit of this ReportsFilterBody.

        The direct billed period debit for this billing report  # noqa: E501

        :param direct_billed_period_debit: The direct_billed_period_debit of this ReportsFilterBody.  # noqa: E501
        :type: float
        """

        self._direct_billed_period_debit = direct_billed_period_debit

    @property
    def custodian_billed_period_debit(self):
        """Gets the custodian_billed_period_debit of this ReportsFilterBody.  # noqa: E501

        The custodian billed period debit for this billing report  # noqa: E501

        :return: The custodian_billed_period_debit of this ReportsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._custodian_billed_period_debit

    @custodian_billed_period_debit.setter
    def custodian_billed_period_debit(self, custodian_billed_period_debit):
        """Sets the custodian_billed_period_debit of this ReportsFilterBody.

        The custodian billed period debit for this billing report  # noqa: E501

        :param custodian_billed_period_debit: The custodian_billed_period_debit of this ReportsFilterBody.  # noqa: E501
        :type: float
        """

        self._custodian_billed_period_debit = custodian_billed_period_debit

    @property
    def split_payout(self):
        """Gets the split_payout of this ReportsFilterBody.  # noqa: E501

        Total payout of all splits for this period  # noqa: E501

        :return: The split_payout of this ReportsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._split_payout

    @split_payout.setter
    def split_payout(self, split_payout):
        """Sets the split_payout of this ReportsFilterBody.

        Total payout of all splits for this period  # noqa: E501

        :param split_payout: The split_payout of this ReportsFilterBody.  # noqa: E501
        :type: float
        """

        self._split_payout = split_payout

    @property
    def split_payout_annualized(self):
        """Gets the split_payout_annualized of this ReportsFilterBody.  # noqa: E501

        Split payout on an annualized basis  # noqa: E501

        :return: The split_payout_annualized of this ReportsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._split_payout_annualized

    @split_payout_annualized.setter
    def split_payout_annualized(self, split_payout_annualized):
        """Sets the split_payout_annualized of this ReportsFilterBody.

        Split payout on an annualized basis  # noqa: E501

        :param split_payout_annualized: The split_payout_annualized of this ReportsFilterBody.  # noqa: E501
        :type: float
        """

        self._split_payout_annualized = split_payout_annualized

    @property
    def firm_share(self):
        """Gets the firm_share of this ReportsFilterBody.  # noqa: E501

        The firm's share for the period. Equals period_debit - split_payout.  # noqa: E501

        :return: The firm_share of this ReportsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._firm_share

    @firm_share.setter
    def firm_share(self, firm_share):
        """Sets the firm_share of this ReportsFilterBody.

        The firm's share for the period. Equals period_debit - split_payout.  # noqa: E501

        :param firm_share: The firm_share of this ReportsFilterBody.  # noqa: E501
        :type: float
        """

        self._firm_share = firm_share

    @property
    def firm_share_annualized(self):
        """Gets the firm_share_annualized of this ReportsFilterBody.  # noqa: E501

        Firm's annualized share. Equals annual_debit - split_payout_annualized.  # noqa: E501

        :return: The firm_share_annualized of this ReportsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._firm_share_annualized

    @firm_share_annualized.setter
    def firm_share_annualized(self, firm_share_annualized):
        """Sets the firm_share_annualized of this ReportsFilterBody.

        Firm's annualized share. Equals annual_debit - split_payout_annualized.  # noqa: E501

        :param firm_share_annualized: The firm_share_annualized of this ReportsFilterBody.  # noqa: E501
        :type: float
        """

        self._firm_share_annualized = firm_share_annualized

    @property
    def n_accounts(self):
        """Gets the n_accounts of this ReportsFilterBody.  # noqa: E501

        The number of accounts for this billing report  # noqa: E501

        :return: The n_accounts of this ReportsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._n_accounts

    @n_accounts.setter
    def n_accounts(self, n_accounts):
        """Sets the n_accounts of this ReportsFilterBody.

        The number of accounts for this billing report  # noqa: E501

        :param n_accounts: The n_accounts of this ReportsFilterBody.  # noqa: E501
        :type: int
        """

        self._n_accounts = n_accounts

    @property
    def n_groups(self):
        """Gets the n_groups of this ReportsFilterBody.  # noqa: E501

        The number of groups for this billing report  # noqa: E501

        :return: The n_groups of this ReportsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._n_groups

    @n_groups.setter
    def n_groups(self, n_groups):
        """Sets the n_groups of this ReportsFilterBody.

        The number of groups for this billing report  # noqa: E501

        :param n_groups: The n_groups of this ReportsFilterBody.  # noqa: E501
        :type: int
        """

        self._n_groups = n_groups

    @property
    def n_splits(self):
        """Gets the n_splits of this ReportsFilterBody.  # noqa: E501

        The number of billing splits for this billing report  # noqa: E501

        :return: The n_splits of this ReportsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._n_splits

    @n_splits.setter
    def n_splits(self, n_splits):
        """Sets the n_splits of this ReportsFilterBody.

        The number of billing splits for this billing report  # noqa: E501

        :param n_splits: The n_splits of this ReportsFilterBody.  # noqa: E501
        :type: int
        """

        self._n_splits = n_splits

    @property
    def n_fee_structures(self):
        """Gets the n_fee_structures of this ReportsFilterBody.  # noqa: E501

        The number of fee structures for this billing report  # noqa: E501

        :return: The n_fee_structures of this ReportsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._n_fee_structures

    @n_fee_structures.setter
    def n_fee_structures(self, n_fee_structures):
        """Sets the n_fee_structures of this ReportsFilterBody.

        The number of fee structures for this billing report  # noqa: E501

        :param n_fee_structures: The n_fee_structures of this ReportsFilterBody.  # noqa: E501
        :type: int
        """

        self._n_fee_structures = n_fee_structures

    @property
    def fee_upload_file_id(self):
        """Gets the fee_upload_file_id of this ReportsFilterBody.  # noqa: E501

        The corresponding fee upload file model instance  # noqa: E501

        :return: The fee_upload_file_id of this ReportsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._fee_upload_file_id

    @fee_upload_file_id.setter
    def fee_upload_file_id(self, fee_upload_file_id):
        """Sets the fee_upload_file_id of this ReportsFilterBody.

        The corresponding fee upload file model instance  # noqa: E501

        :param fee_upload_file_id: The fee_upload_file_id of this ReportsFilterBody.  # noqa: E501
        :type: int
        """

        self._fee_upload_file_id = fee_upload_file_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportsFilterBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportsFilterBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

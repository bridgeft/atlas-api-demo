# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountholdingsFilterBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'as_of_date': 'datetime',
        'security_id': 'int',
        'account_id': 'int',
        'household_id': 'int',
        'direction': 'str',
        'first_open_date': 'datetime',
        'first_origination_date': 'datetime',
        'latest_open_date': 'datetime',
        'abs_units': 'float',
        'appraised_unit_price': 'float',
        'abs_beginning_value': 'float',
        'realized_gain_loss': 'float',
        'cost_basis_known': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'as_of_date': 'as_of_date',
        'security_id': 'security_id',
        'account_id': 'account_id',
        'household_id': 'household_id',
        'direction': 'direction',
        'first_open_date': 'first_open_date',
        'first_origination_date': 'first_origination_date',
        'latest_open_date': 'latest_open_date',
        'abs_units': 'abs_units',
        'appraised_unit_price': 'appraised_unit_price',
        'abs_beginning_value': 'abs_beginning_value',
        'realized_gain_loss': 'realized_gain_loss',
        'cost_basis_known': 'cost_basis_known'
    }

    def __init__(self, id=None, as_of_date=None, security_id=None, account_id=None, household_id=None, direction=None, first_open_date=None, first_origination_date=None, latest_open_date=None, abs_units=None, appraised_unit_price=None, abs_beginning_value=None, realized_gain_loss=None, cost_basis_known=None):  # noqa: E501
        """AccountholdingsFilterBody - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._as_of_date = None
        self._security_id = None
        self._account_id = None
        self._household_id = None
        self._direction = None
        self._first_open_date = None
        self._first_origination_date = None
        self._latest_open_date = None
        self._abs_units = None
        self._appraised_unit_price = None
        self._abs_beginning_value = None
        self._realized_gain_loss = None
        self._cost_basis_known = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if as_of_date is not None:
            self.as_of_date = as_of_date
        if security_id is not None:
            self.security_id = security_id
        if account_id is not None:
            self.account_id = account_id
        if household_id is not None:
            self.household_id = household_id
        if direction is not None:
            self.direction = direction
        if first_open_date is not None:
            self.first_open_date = first_open_date
        if first_origination_date is not None:
            self.first_origination_date = first_origination_date
        if latest_open_date is not None:
            self.latest_open_date = latest_open_date
        if abs_units is not None:
            self.abs_units = abs_units
        if appraised_unit_price is not None:
            self.appraised_unit_price = appraised_unit_price
        if abs_beginning_value is not None:
            self.abs_beginning_value = abs_beginning_value
        if realized_gain_loss is not None:
            self.realized_gain_loss = realized_gain_loss
        if cost_basis_known is not None:
            self.cost_basis_known = cost_basis_known

    @property
    def id(self):
        """Gets the id of this AccountholdingsFilterBody.  # noqa: E501

        The unique resource ID for this Holdings object  # noqa: E501

        :return: The id of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountholdingsFilterBody.

        The unique resource ID for this Holdings object  # noqa: E501

        :param id: The id of this AccountholdingsFilterBody.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def as_of_date(self):
        """Gets the as_of_date of this AccountholdingsFilterBody.  # noqa: E501

        The current date for this Holding  # noqa: E501

        :return: The as_of_date of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._as_of_date

    @as_of_date.setter
    def as_of_date(self, as_of_date):
        """Sets the as_of_date of this AccountholdingsFilterBody.

        The current date for this Holding  # noqa: E501

        :param as_of_date: The as_of_date of this AccountholdingsFilterBody.  # noqa: E501
        :type: datetime
        """

        self._as_of_date = as_of_date

    @property
    def security_id(self):
        """Gets the security_id of this AccountholdingsFilterBody.  # noqa: E501

        The id of the Security associated with this Holding  # noqa: E501

        :return: The security_id of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._security_id

    @security_id.setter
    def security_id(self, security_id):
        """Sets the security_id of this AccountholdingsFilterBody.

        The id of the Security associated with this Holding  # noqa: E501

        :param security_id: The security_id of this AccountholdingsFilterBody.  # noqa: E501
        :type: int
        """

        self._security_id = security_id

    @property
    def account_id(self):
        """Gets the account_id of this AccountholdingsFilterBody.  # noqa: E501

        The id of the Account associated with this Holding  # noqa: E501

        :return: The account_id of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountholdingsFilterBody.

        The id of the Account associated with this Holding  # noqa: E501

        :param account_id: The account_id of this AccountholdingsFilterBody.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def household_id(self):
        """Gets the household_id of this AccountholdingsFilterBody.  # noqa: E501

        The id of the Household associated with this Holding  # noqa: E501

        :return: The household_id of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._household_id

    @household_id.setter
    def household_id(self, household_id):
        """Sets the household_id of this AccountholdingsFilterBody.

        The id of the Household associated with this Holding  # noqa: E501

        :param household_id: The household_id of this AccountholdingsFilterBody.  # noqa: E501
        :type: int
        """

        self._household_id = household_id

    @property
    def direction(self):
        """Gets the direction of this AccountholdingsFilterBody.  # noqa: E501

        Flag to indicate if Holding is Long or Short. Potential values, L = Long, S = Short  # noqa: E501

        :return: The direction of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this AccountholdingsFilterBody.

        Flag to indicate if Holding is Long or Short. Potential values, L = Long, S = Short  # noqa: E501

        :param direction: The direction of this AccountholdingsFilterBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["L = Long", "S = Short"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def first_open_date(self):
        """Gets the first_open_date of this AccountholdingsFilterBody.  # noqa: E501

        The original open date for the holding - this represents the earliest cost basis date available at the custodian. Note that this field may be populated with the special date value \"\"1900-01-01\"\" which is to be understood as the absence of cost basis information for at least one of the component positions in this holding  # noqa: E501

        :return: The first_open_date of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._first_open_date

    @first_open_date.setter
    def first_open_date(self, first_open_date):
        """Sets the first_open_date of this AccountholdingsFilterBody.

        The original open date for the holding - this represents the earliest cost basis date available at the custodian. Note that this field may be populated with the special date value \"\"1900-01-01\"\" which is to be understood as the absence of cost basis information for at least one of the component positions in this holding  # noqa: E501

        :param first_open_date: The first_open_date of this AccountholdingsFilterBody.  # noqa: E501
        :type: datetime
        """

        self._first_open_date = first_open_date

    @property
    def first_origination_date(self):
        """Gets the first_origination_date of this AccountholdingsFilterBody.  # noqa: E501

        The earliest origination date for the holding - this represents the earliest cost basis date available at the custodian in all time even for shares originated outside the account. Note that this field may be populated with the special date value \"\"1900-01-01\"\" which is to be understood as the absence of cost basis information for at least one of the component positions in this holding  # noqa: E501

        :return: The first_origination_date of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._first_origination_date

    @first_origination_date.setter
    def first_origination_date(self, first_origination_date):
        """Sets the first_origination_date of this AccountholdingsFilterBody.

        The earliest origination date for the holding - this represents the earliest cost basis date available at the custodian in all time even for shares originated outside the account. Note that this field may be populated with the special date value \"\"1900-01-01\"\" which is to be understood as the absence of cost basis information for at least one of the component positions in this holding  # noqa: E501

        :param first_origination_date: The first_origination_date of this AccountholdingsFilterBody.  # noqa: E501
        :type: datetime
        """

        self._first_origination_date = first_origination_date

    @property
    def latest_open_date(self):
        """Gets the latest_open_date of this AccountholdingsFilterBody.  # noqa: E501

        The most recent date for opening lots (e.g. last time more shares were purchased). Note that this field may be populated with the special date value \"\"1900-01-01\"\" which is to be understood as the absence of cost basis information for all of the component positions in this holding  # noqa: E501

        :return: The latest_open_date of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_open_date

    @latest_open_date.setter
    def latest_open_date(self, latest_open_date):
        """Sets the latest_open_date of this AccountholdingsFilterBody.

        The most recent date for opening lots (e.g. last time more shares were purchased). Note that this field may be populated with the special date value \"\"1900-01-01\"\" which is to be understood as the absence of cost basis information for all of the component positions in this holding  # noqa: E501

        :param latest_open_date: The latest_open_date of this AccountholdingsFilterBody.  # noqa: E501
        :type: datetime
        """

        self._latest_open_date = latest_open_date

    @property
    def abs_units(self):
        """Gets the abs_units of this AccountholdingsFilterBody.  # noqa: E501

        Quantity of shares for the holding - combine with direction to know if the position is long or short  # noqa: E501

        :return: The abs_units of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._abs_units

    @abs_units.setter
    def abs_units(self, abs_units):
        """Sets the abs_units of this AccountholdingsFilterBody.

        Quantity of shares for the holding - combine with direction to know if the position is long or short  # noqa: E501

        :param abs_units: The abs_units of this AccountholdingsFilterBody.  # noqa: E501
        :type: float
        """

        self._abs_units = abs_units

    @property
    def appraised_unit_price(self):
        """Gets the appraised_unit_price of this AccountholdingsFilterBody.  # noqa: E501

        Market price of security on as_of_date  # noqa: E501

        :return: The appraised_unit_price of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._appraised_unit_price

    @appraised_unit_price.setter
    def appraised_unit_price(self, appraised_unit_price):
        """Sets the appraised_unit_price of this AccountholdingsFilterBody.

        Market price of security on as_of_date  # noqa: E501

        :param appraised_unit_price: The appraised_unit_price of this AccountholdingsFilterBody.  # noqa: E501
        :type: float
        """

        self._appraised_unit_price = appraised_unit_price

    @property
    def abs_beginning_value(self):
        """Gets the abs_beginning_value of this AccountholdingsFilterBody.  # noqa: E501

        Cost basis of the units  # noqa: E501

        :return: The abs_beginning_value of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._abs_beginning_value

    @abs_beginning_value.setter
    def abs_beginning_value(self, abs_beginning_value):
        """Sets the abs_beginning_value of this AccountholdingsFilterBody.

        Cost basis of the units  # noqa: E501

        :param abs_beginning_value: The abs_beginning_value of this AccountholdingsFilterBody.  # noqa: E501
        :type: float
        """

        self._abs_beginning_value = abs_beginning_value

    @property
    def realized_gain_loss(self):
        """Gets the realized_gain_loss of this AccountholdingsFilterBody.  # noqa: E501

        Aggregates from Gain Loss end point; dollar gain or loss from trade activity  # noqa: E501

        :return: The realized_gain_loss of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._realized_gain_loss

    @realized_gain_loss.setter
    def realized_gain_loss(self, realized_gain_loss):
        """Sets the realized_gain_loss of this AccountholdingsFilterBody.

        Aggregates from Gain Loss end point; dollar gain or loss from trade activity  # noqa: E501

        :param realized_gain_loss: The realized_gain_loss of this AccountholdingsFilterBody.  # noqa: E501
        :type: float
        """

        self._realized_gain_loss = realized_gain_loss

    @property
    def cost_basis_known(self):
        """Gets the cost_basis_known of this AccountholdingsFilterBody.  # noqa: E501

        Is the cost basis known for this holding?  # noqa: E501

        :return: The cost_basis_known of this AccountholdingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._cost_basis_known

    @cost_basis_known.setter
    def cost_basis_known(self, cost_basis_known):
        """Sets the cost_basis_known of this AccountholdingsFilterBody.

        Is the cost basis known for this holding?  # noqa: E501

        :param cost_basis_known: The cost_basis_known of this AccountholdingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._cost_basis_known = cost_basis_known

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountholdingsFilterBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountholdingsFilterBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

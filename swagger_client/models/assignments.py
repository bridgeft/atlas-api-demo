# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Assignments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'account_id': 'int',
        'group_id': 'int',
        'fee_location': 'int',
        'fee_location_option': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'group_id': 'group_id',
        'fee_location': 'fee_location',
        'fee_location_option': 'fee_location_option'
    }

    def __init__(self, id=None, account_id=None, group_id=None, fee_location=None, fee_location_option=None):  # noqa: E501
        """Assignments - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._group_id = None
        self._fee_location = None
        self._fee_location_option = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if group_id is not None:
            self.group_id = group_id
        if fee_location is not None:
            self.fee_location = fee_location
        if fee_location_option is not None:
            self.fee_location_option = fee_location_option

    @property
    def id(self):
        """Gets the id of this Assignments.  # noqa: E501

        The unique resource id for this Account Group Assignment  # noqa: E501

        :return: The id of this Assignments.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Assignments.

        The unique resource id for this Account Group Assignment  # noqa: E501

        :param id: The id of this Assignments.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this Assignments.  # noqa: E501

        The related account of this assignment  # noqa: E501

        :return: The account_id of this Assignments.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Assignments.

        The related account of this assignment  # noqa: E501

        :param account_id: The account_id of this Assignments.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def group_id(self):
        """Gets the group_id of this Assignments.  # noqa: E501

        The related group of this assignment  # noqa: E501

        :return: The group_id of this Assignments.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Assignments.

        The related group of this assignment  # noqa: E501

        :param group_id: The group_id of this Assignments.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def fee_location(self):
        """Gets the fee_location of this Assignments.  # noqa: E501

        Numerical indicator for fee location behavior. Options are 0 (charged to itself), -1 (uncharged / charged to the group, where fees are distributed in prorate fashion by size), or a positive integer, which represents the ID of the account being charged.  # noqa: E501

        :return: The fee_location of this Assignments.  # noqa: E501
        :rtype: int
        """
        return self._fee_location

    @fee_location.setter
    def fee_location(self, fee_location):
        """Sets the fee_location of this Assignments.

        Numerical indicator for fee location behavior. Options are 0 (charged to itself), -1 (uncharged / charged to the group, where fees are distributed in prorate fashion by size), or a positive integer, which represents the ID of the account being charged.  # noqa: E501

        :param fee_location: The fee_location of this Assignments.  # noqa: E501
        :type: int
        """
        allowed_values = [0, -1]  # noqa: E501
        if fee_location not in allowed_values:
            raise ValueError(
                "Invalid value for `fee_location` ({0}), must be one of {1}"  # noqa: E501
                .format(fee_location, allowed_values)
            )

        self._fee_location = fee_location

    @property
    def fee_location_option(self):
        """Gets the fee_location_option of this Assignments.  # noqa: E501

        The desired fee location option. Options are S (self), G (group), or A (account).  # noqa: E501

        :return: The fee_location_option of this Assignments.  # noqa: E501
        :rtype: str
        """
        return self._fee_location_option

    @fee_location_option.setter
    def fee_location_option(self, fee_location_option):
        """Sets the fee_location_option of this Assignments.

        The desired fee location option. Options are S (self), G (group), or A (account).  # noqa: E501

        :param fee_location_option: The fee_location_option of this Assignments.  # noqa: E501
        :type: str
        """
        allowed_values = ["S = Self", "G = Group", "A = Account"]  # noqa: E501
        if fee_location_option not in allowed_values:
            raise ValueError(
                "Invalid value for `fee_location_option` ({0}), must be one of {1}"  # noqa: E501
                .format(fee_location_option, allowed_values)
            )

        self._fee_location_option = fee_location_option

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Assignments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assignments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200107Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'plaid_account_id': 'int',
        'plaid_item_id': 'int',
        'household_id': 'int',
        'firm_id': 'int',
        'cost_basis': 'float',
        'iso_currency_code': 'str',
        'unofficial_currency_code': 'str',
        'institution_price': 'float',
        'institution_price_as_of': 'datetime',
        'quantity': 'float',
        'security': 'str',
        'institution_value': 'float',
        'created_at_utc': 'datetime',
        'updated_at_utc': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'plaid_account_id': 'plaid_account_id',
        'plaid_item_id': 'plaid_item_id',
        'household_id': 'household_id',
        'firm_id': 'firm_id',
        'cost_basis': 'cost_basis',
        'iso_currency_code': 'iso_currency_code',
        'unofficial_currency_code': 'unofficial_currency_code',
        'institution_price': 'institution_price',
        'institution_price_as_of': 'institution_price_as_of',
        'quantity': 'quantity',
        'security': 'security',
        'institution_value': 'institution_value',
        'created_at_utc': 'created_at_utc',
        'updated_at_utc': 'updated_at_utc'
    }

    def __init__(self, id=None, plaid_account_id=None, plaid_item_id=None, household_id=None, firm_id=None, cost_basis=None, iso_currency_code=None, unofficial_currency_code=None, institution_price=None, institution_price_as_of=None, quantity=None, security=None, institution_value=None, created_at_utc=None, updated_at_utc=None):  # noqa: E501
        """InlineResponse200107Data - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._plaid_account_id = None
        self._plaid_item_id = None
        self._household_id = None
        self._firm_id = None
        self._cost_basis = None
        self._iso_currency_code = None
        self._unofficial_currency_code = None
        self._institution_price = None
        self._institution_price_as_of = None
        self._quantity = None
        self._security = None
        self._institution_value = None
        self._created_at_utc = None
        self._updated_at_utc = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if plaid_account_id is not None:
            self.plaid_account_id = plaid_account_id
        if plaid_item_id is not None:
            self.plaid_item_id = plaid_item_id
        if household_id is not None:
            self.household_id = household_id
        if firm_id is not None:
            self.firm_id = firm_id
        if cost_basis is not None:
            self.cost_basis = cost_basis
        if iso_currency_code is not None:
            self.iso_currency_code = iso_currency_code
        if unofficial_currency_code is not None:
            self.unofficial_currency_code = unofficial_currency_code
        if institution_price is not None:
            self.institution_price = institution_price
        if institution_price_as_of is not None:
            self.institution_price_as_of = institution_price_as_of
        if quantity is not None:
            self.quantity = quantity
        if security is not None:
            self.security = security
        if institution_value is not None:
            self.institution_value = institution_value
        if created_at_utc is not None:
            self.created_at_utc = created_at_utc
        if updated_at_utc is not None:
            self.updated_at_utc = updated_at_utc

    @property
    def id(self):
        """Gets the id of this InlineResponse200107Data.  # noqa: E501

        The unique resource id for this Heldaway Position  # noqa: E501

        :return: The id of this InlineResponse200107Data.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200107Data.

        The unique resource id for this Heldaway Position  # noqa: E501

        :param id: The id of this InlineResponse200107Data.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def plaid_account_id(self):
        """Gets the plaid_account_id of this InlineResponse200107Data.  # noqa: E501

        The Plaid account id associated with this heldaway position  # noqa: E501

        :return: The plaid_account_id of this InlineResponse200107Data.  # noqa: E501
        :rtype: int
        """
        return self._plaid_account_id

    @plaid_account_id.setter
    def plaid_account_id(self, plaid_account_id):
        """Sets the plaid_account_id of this InlineResponse200107Data.

        The Plaid account id associated with this heldaway position  # noqa: E501

        :param plaid_account_id: The plaid_account_id of this InlineResponse200107Data.  # noqa: E501
        :type: int
        """

        self._plaid_account_id = plaid_account_id

    @property
    def plaid_item_id(self):
        """Gets the plaid_item_id of this InlineResponse200107Data.  # noqa: E501

        The id of the heldaway connection that owns this position  # noqa: E501

        :return: The plaid_item_id of this InlineResponse200107Data.  # noqa: E501
        :rtype: int
        """
        return self._plaid_item_id

    @plaid_item_id.setter
    def plaid_item_id(self, plaid_item_id):
        """Sets the plaid_item_id of this InlineResponse200107Data.

        The id of the heldaway connection that owns this position  # noqa: E501

        :param plaid_item_id: The plaid_item_id of this InlineResponse200107Data.  # noqa: E501
        :type: int
        """

        self._plaid_item_id = plaid_item_id

    @property
    def household_id(self):
        """Gets the household_id of this InlineResponse200107Data.  # noqa: E501

        The id of the household to which this position belongs  # noqa: E501

        :return: The household_id of this InlineResponse200107Data.  # noqa: E501
        :rtype: int
        """
        return self._household_id

    @household_id.setter
    def household_id(self, household_id):
        """Sets the household_id of this InlineResponse200107Data.

        The id of the household to which this position belongs  # noqa: E501

        :param household_id: The household_id of this InlineResponse200107Data.  # noqa: E501
        :type: int
        """

        self._household_id = household_id

    @property
    def firm_id(self):
        """Gets the firm_id of this InlineResponse200107Data.  # noqa: E501

        The id of the firm managing this heldaway position  # noqa: E501

        :return: The firm_id of this InlineResponse200107Data.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this InlineResponse200107Data.

        The id of the firm managing this heldaway position  # noqa: E501

        :param firm_id: The firm_id of this InlineResponse200107Data.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def cost_basis(self):
        """Gets the cost_basis of this InlineResponse200107Data.  # noqa: E501

        The cost basis of the holding, if it is available from the institution  # noqa: E501

        :return: The cost_basis of this InlineResponse200107Data.  # noqa: E501
        :rtype: float
        """
        return self._cost_basis

    @cost_basis.setter
    def cost_basis(self, cost_basis):
        """Sets the cost_basis of this InlineResponse200107Data.

        The cost basis of the holding, if it is available from the institution  # noqa: E501

        :param cost_basis: The cost_basis of this InlineResponse200107Data.  # noqa: E501
        :type: float
        """

        self._cost_basis = cost_basis

    @property
    def iso_currency_code(self):
        """Gets the iso_currency_code of this InlineResponse200107Data.  # noqa: E501

        Unit of currency that is displayed where null is defaulted to USD  # noqa: E501

        :return: The iso_currency_code of this InlineResponse200107Data.  # noqa: E501
        :rtype: str
        """
        return self._iso_currency_code

    @iso_currency_code.setter
    def iso_currency_code(self, iso_currency_code):
        """Sets the iso_currency_code of this InlineResponse200107Data.

        Unit of currency that is displayed where null is defaulted to USD  # noqa: E501

        :param iso_currency_code: The iso_currency_code of this InlineResponse200107Data.  # noqa: E501
        :type: str
        """

        self._iso_currency_code = iso_currency_code

    @property
    def unofficial_currency_code(self):
        """Gets the unofficial_currency_code of this InlineResponse200107Data.  # noqa: E501

        The unofficial currency of the holding.  # noqa: E501

        :return: The unofficial_currency_code of this InlineResponse200107Data.  # noqa: E501
        :rtype: str
        """
        return self._unofficial_currency_code

    @unofficial_currency_code.setter
    def unofficial_currency_code(self, unofficial_currency_code):
        """Sets the unofficial_currency_code of this InlineResponse200107Data.

        The unofficial currency of the holding.  # noqa: E501

        :param unofficial_currency_code: The unofficial_currency_code of this InlineResponse200107Data.  # noqa: E501
        :type: str
        """

        self._unofficial_currency_code = unofficial_currency_code

    @property
    def institution_price(self):
        """Gets the institution_price of this InlineResponse200107Data.  # noqa: E501

        The last price given by the institution for this security.  # noqa: E501

        :return: The institution_price of this InlineResponse200107Data.  # noqa: E501
        :rtype: float
        """
        return self._institution_price

    @institution_price.setter
    def institution_price(self, institution_price):
        """Sets the institution_price of this InlineResponse200107Data.

        The last price given by the institution for this security.  # noqa: E501

        :param institution_price: The institution_price of this InlineResponse200107Data.  # noqa: E501
        :type: float
        """

        self._institution_price = institution_price

    @property
    def institution_price_as_of(self):
        """Gets the institution_price_as_of of this InlineResponse200107Data.  # noqa: E501

        The date at which institution_price was current.  # noqa: E501

        :return: The institution_price_as_of of this InlineResponse200107Data.  # noqa: E501
        :rtype: datetime
        """
        return self._institution_price_as_of

    @institution_price_as_of.setter
    def institution_price_as_of(self, institution_price_as_of):
        """Sets the institution_price_as_of of this InlineResponse200107Data.

        The date at which institution_price was current.  # noqa: E501

        :param institution_price_as_of: The institution_price_as_of of this InlineResponse200107Data.  # noqa: E501
        :type: datetime
        """

        self._institution_price_as_of = institution_price_as_of

    @property
    def quantity(self):
        """Gets the quantity of this InlineResponse200107Data.  # noqa: E501

        The amount of shares of this position  # noqa: E501

        :return: The quantity of this InlineResponse200107Data.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InlineResponse200107Data.

        The amount of shares of this position  # noqa: E501

        :param quantity: The quantity of this InlineResponse200107Data.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def security(self):
        """Gets the security of this InlineResponse200107Data.  # noqa: E501

        JSON string containing information about the security  # noqa: E501

        :return: The security of this InlineResponse200107Data.  # noqa: E501
        :rtype: str
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this InlineResponse200107Data.

        JSON string containing information about the security  # noqa: E501

        :param security: The security of this InlineResponse200107Data.  # noqa: E501
        :type: str
        """

        self._security = security

    @property
    def institution_value(self):
        """Gets the institution_value of this InlineResponse200107Data.  # noqa: E501

        The total value of the position  # noqa: E501

        :return: The institution_value of this InlineResponse200107Data.  # noqa: E501
        :rtype: float
        """
        return self._institution_value

    @institution_value.setter
    def institution_value(self, institution_value):
        """Sets the institution_value of this InlineResponse200107Data.

        The total value of the position  # noqa: E501

        :param institution_value: The institution_value of this InlineResponse200107Data.  # noqa: E501
        :type: float
        """

        self._institution_value = institution_value

    @property
    def created_at_utc(self):
        """Gets the created_at_utc of this InlineResponse200107Data.  # noqa: E501

        Timestamp for when the record was created  # noqa: E501

        :return: The created_at_utc of this InlineResponse200107Data.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at_utc

    @created_at_utc.setter
    def created_at_utc(self, created_at_utc):
        """Sets the created_at_utc of this InlineResponse200107Data.

        Timestamp for when the record was created  # noqa: E501

        :param created_at_utc: The created_at_utc of this InlineResponse200107Data.  # noqa: E501
        :type: datetime
        """

        self._created_at_utc = created_at_utc

    @property
    def updated_at_utc(self):
        """Gets the updated_at_utc of this InlineResponse200107Data.  # noqa: E501

        Timestamp for when the record was updated  # noqa: E501

        :return: The updated_at_utc of this InlineResponse200107Data.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at_utc

    @updated_at_utc.setter
    def updated_at_utc(self, updated_at_utc):
        """Sets the updated_at_utc of this InlineResponse200107Data.

        Timestamp for when the record was updated  # noqa: E501

        :param updated_at_utc: The updated_at_utc of this InlineResponse200107Data.  # noqa: E501
        :type: datetime
        """

        self._updated_at_utc = updated_at_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200107Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200107Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

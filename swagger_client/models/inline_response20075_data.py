# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20075Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'account_id': 'int',
        'security_id': 'int',
        'type': 'str',
        'is_cancel': 'bool',
        'transaction_date': 'datetime',
        'reported_date': 'datetime',
        'abs_units': 'float',
        'unit_price': 'float',
        'cost_basis_unit_price': 'float',
        'transaction_fee': 'float',
        'recon_id': 'int',
        'custodian': 'str',
        'description': 'str',
        'origination_date': 'datetime',
        'cost_basis_known': 'bool',
        'replaced_transfer_id': 'int',
        'created_at_utc': 'datetime',
        'updated_at_utc': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'security_id': 'security_id',
        'type': 'type',
        'is_cancel': 'is_cancel',
        'transaction_date': 'transaction_date',
        'reported_date': 'reported_date',
        'abs_units': 'abs_units',
        'unit_price': 'unit_price',
        'cost_basis_unit_price': 'cost_basis_unit_price',
        'transaction_fee': 'transaction_fee',
        'recon_id': 'recon_id',
        'custodian': 'custodian',
        'description': 'description',
        'origination_date': 'origination_date',
        'cost_basis_known': 'cost_basis_known',
        'replaced_transfer_id': 'replaced_transfer_id',
        'created_at_utc': 'created_at_utc',
        'updated_at_utc': 'updated_at_utc'
    }

    def __init__(self, id=None, account_id=None, security_id=None, type=None, is_cancel=None, transaction_date=None, reported_date=None, abs_units=None, unit_price=None, cost_basis_unit_price=None, transaction_fee=None, recon_id=None, custodian=None, description=None, origination_date=None, cost_basis_known=None, replaced_transfer_id=None, created_at_utc=None, updated_at_utc=None):  # noqa: E501
        """InlineResponse20075Data - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._security_id = None
        self._type = None
        self._is_cancel = None
        self._transaction_date = None
        self._reported_date = None
        self._abs_units = None
        self._unit_price = None
        self._cost_basis_unit_price = None
        self._transaction_fee = None
        self._recon_id = None
        self._custodian = None
        self._description = None
        self._origination_date = None
        self._cost_basis_known = None
        self._replaced_transfer_id = None
        self._created_at_utc = None
        self._updated_at_utc = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if security_id is not None:
            self.security_id = security_id
        if type is not None:
            self.type = type
        if is_cancel is not None:
            self.is_cancel = is_cancel
        if transaction_date is not None:
            self.transaction_date = transaction_date
        if reported_date is not None:
            self.reported_date = reported_date
        if abs_units is not None:
            self.abs_units = abs_units
        if unit_price is not None:
            self.unit_price = unit_price
        if cost_basis_unit_price is not None:
            self.cost_basis_unit_price = cost_basis_unit_price
        if transaction_fee is not None:
            self.transaction_fee = transaction_fee
        if recon_id is not None:
            self.recon_id = recon_id
        if custodian is not None:
            self.custodian = custodian
        if description is not None:
            self.description = description
        if origination_date is not None:
            self.origination_date = origination_date
        if cost_basis_known is not None:
            self.cost_basis_known = cost_basis_known
        if replaced_transfer_id is not None:
            self.replaced_transfer_id = replaced_transfer_id
        if created_at_utc is not None:
            self.created_at_utc = created_at_utc
        if updated_at_utc is not None:
            self.updated_at_utc = updated_at_utc

    @property
    def id(self):
        """Gets the id of this InlineResponse20075Data.  # noqa: E501

        The unique resource id for the Transaction  # noqa: E501

        :return: The id of this InlineResponse20075Data.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20075Data.

        The unique resource id for the Transaction  # noqa: E501

        :param id: The id of this InlineResponse20075Data.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this InlineResponse20075Data.  # noqa: E501

        The id of the Account associated with this Transaction  # noqa: E501

        :return: The account_id of this InlineResponse20075Data.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InlineResponse20075Data.

        The id of the Account associated with this Transaction  # noqa: E501

        :param account_id: The account_id of this InlineResponse20075Data.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def security_id(self):
        """Gets the security_id of this InlineResponse20075Data.  # noqa: E501

        The id of the Security associated with this Transaction  # noqa: E501

        :return: The security_id of this InlineResponse20075Data.  # noqa: E501
        :rtype: int
        """
        return self._security_id

    @security_id.setter
    def security_id(self, security_id):
        """Sets the security_id of this InlineResponse20075Data.

        The id of the Security associated with this Transaction  # noqa: E501

        :param security_id: The security_id of this InlineResponse20075Data.  # noqa: E501
        :type: int
        """

        self._security_id = security_id

    @property
    def type(self):
        """Gets the type of this InlineResponse20075Data.  # noqa: E501

        The type of Transfer. Possible values, DEP - cash deposit, WITH - cash withdrawal, TLO - transfer long to open - security transfers into an account, TLC - transfer long to close - security transfers out of an account  # noqa: E501

        :return: The type of this InlineResponse20075Data.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20075Data.

        The type of Transfer. Possible values, DEP - cash deposit, WITH - cash withdrawal, TLO - transfer long to open - security transfers into an account, TLC - transfer long to close - security transfers out of an account  # noqa: E501

        :param type: The type of this InlineResponse20075Data.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEP = Cash Deposite", "WITH = Cash Withdrawl", "TLO = Transfer Long To Open", "TLC = Transfer Long To Close"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def is_cancel(self):
        """Gets the is_cancel of this InlineResponse20075Data.  # noqa: E501

        Flag to indicate if this Transaction is a cancel from the custodian  # noqa: E501

        :return: The is_cancel of this InlineResponse20075Data.  # noqa: E501
        :rtype: bool
        """
        return self._is_cancel

    @is_cancel.setter
    def is_cancel(self, is_cancel):
        """Sets the is_cancel of this InlineResponse20075Data.

        Flag to indicate if this Transaction is a cancel from the custodian  # noqa: E501

        :param is_cancel: The is_cancel of this InlineResponse20075Data.  # noqa: E501
        :type: bool
        """

        self._is_cancel = is_cancel

    @property
    def transaction_date(self):
        """Gets the transaction_date of this InlineResponse20075Data.  # noqa: E501

        The date of the transaction on a trade basis  # noqa: E501

        :return: The transaction_date of this InlineResponse20075Data.  # noqa: E501
        :rtype: datetime
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this InlineResponse20075Data.

        The date of the transaction on a trade basis  # noqa: E501

        :param transaction_date: The transaction_date of this InlineResponse20075Data.  # noqa: E501
        :type: datetime
        """

        self._transaction_date = transaction_date

    @property
    def reported_date(self):
        """Gets the reported_date of this InlineResponse20075Data.  # noqa: E501

        The date the custodian reports the transaction  # noqa: E501

        :return: The reported_date of this InlineResponse20075Data.  # noqa: E501
        :rtype: datetime
        """
        return self._reported_date

    @reported_date.setter
    def reported_date(self, reported_date):
        """Sets the reported_date of this InlineResponse20075Data.

        The date the custodian reports the transaction  # noqa: E501

        :param reported_date: The reported_date of this InlineResponse20075Data.  # noqa: E501
        :type: datetime
        """

        self._reported_date = reported_date

    @property
    def abs_units(self):
        """Gets the abs_units of this InlineResponse20075Data.  # noqa: E501

        The quantity of shares for the Transfer  # noqa: E501

        :return: The abs_units of this InlineResponse20075Data.  # noqa: E501
        :rtype: float
        """
        return self._abs_units

    @abs_units.setter
    def abs_units(self, abs_units):
        """Sets the abs_units of this InlineResponse20075Data.

        The quantity of shares for the Transfer  # noqa: E501

        :param abs_units: The abs_units of this InlineResponse20075Data.  # noqa: E501
        :type: float
        """

        self._abs_units = abs_units

    @property
    def unit_price(self):
        """Gets the unit_price of this InlineResponse20075Data.  # noqa: E501

        he closing market price of the security on the transaction_date. Note, for cash, this is always 1  # noqa: E501

        :return: The unit_price of this InlineResponse20075Data.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this InlineResponse20075Data.

        he closing market price of the security on the transaction_date. Note, for cash, this is always 1  # noqa: E501

        :param unit_price: The unit_price of this InlineResponse20075Data.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def cost_basis_unit_price(self):
        """Gets the cost_basis_unit_price of this InlineResponse20075Data.  # noqa: E501

        The unit cost price for shares being transferred  # noqa: E501

        :return: The cost_basis_unit_price of this InlineResponse20075Data.  # noqa: E501
        :rtype: float
        """
        return self._cost_basis_unit_price

    @cost_basis_unit_price.setter
    def cost_basis_unit_price(self, cost_basis_unit_price):
        """Sets the cost_basis_unit_price of this InlineResponse20075Data.

        The unit cost price for shares being transferred  # noqa: E501

        :param cost_basis_unit_price: The cost_basis_unit_price of this InlineResponse20075Data.  # noqa: E501
        :type: float
        """

        self._cost_basis_unit_price = cost_basis_unit_price

    @property
    def transaction_fee(self):
        """Gets the transaction_fee of this InlineResponse20075Data.  # noqa: E501

        Fees associated with the Transaction (e.g. commission)  # noqa: E501

        :return: The transaction_fee of this InlineResponse20075Data.  # noqa: E501
        :rtype: float
        """
        return self._transaction_fee

    @transaction_fee.setter
    def transaction_fee(self, transaction_fee):
        """Sets the transaction_fee of this InlineResponse20075Data.

        Fees associated with the Transaction (e.g. commission)  # noqa: E501

        :param transaction_fee: The transaction_fee of this InlineResponse20075Data.  # noqa: E501
        :type: float
        """

        self._transaction_fee = transaction_fee

    @property
    def recon_id(self):
        """Gets the recon_id of this InlineResponse20075Data.  # noqa: E501

        The id of a Reconciliation entered to adjust a transaction  # noqa: E501

        :return: The recon_id of this InlineResponse20075Data.  # noqa: E501
        :rtype: int
        """
        return self._recon_id

    @recon_id.setter
    def recon_id(self, recon_id):
        """Sets the recon_id of this InlineResponse20075Data.

        The id of a Reconciliation entered to adjust a transaction  # noqa: E501

        :param recon_id: The recon_id of this InlineResponse20075Data.  # noqa: E501
        :type: int
        """

        self._recon_id = recon_id

    @property
    def custodian(self):
        """Gets the custodian of this InlineResponse20075Data.  # noqa: E501

        Custodian the account data comes from. TDA=TD Ameritrade, SWB=Schwab, NFS=Fidelity, PER=Pershing, MLT=MillenniumTrust, RJA=RaymondJames, HDG=Manual  # noqa: E501

        :return: The custodian of this InlineResponse20075Data.  # noqa: E501
        :rtype: str
        """
        return self._custodian

    @custodian.setter
    def custodian(self, custodian):
        """Sets the custodian of this InlineResponse20075Data.

        Custodian the account data comes from. TDA=TD Ameritrade, SWB=Schwab, NFS=Fidelity, PER=Pershing, MLT=MillenniumTrust, RJA=RaymondJames, HDG=Manual  # noqa: E501

        :param custodian: The custodian of this InlineResponse20075Data.  # noqa: E501
        :type: str
        """
        allowed_values = ["TDA", "SWB", "NFS", "PER", "DST", "MLT", "RJA", "HDG"]  # noqa: E501
        if custodian not in allowed_values:
            raise ValueError(
                "Invalid value for `custodian` ({0}), must be one of {1}"  # noqa: E501
                .format(custodian, allowed_values)
            )

        self._custodian = custodian

    @property
    def description(self):
        """Gets the description of this InlineResponse20075Data.  # noqa: E501

        Description of the transaction from the custodian  # noqa: E501

        :return: The description of this InlineResponse20075Data.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20075Data.

        Description of the transaction from the custodian  # noqa: E501

        :param description: The description of this InlineResponse20075Data.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def origination_date(self):
        """Gets the origination_date of this InlineResponse20075Data.  # noqa: E501

        Date when the transaction was originated  # noqa: E501

        :return: The origination_date of this InlineResponse20075Data.  # noqa: E501
        :rtype: datetime
        """
        return self._origination_date

    @origination_date.setter
    def origination_date(self, origination_date):
        """Sets the origination_date of this InlineResponse20075Data.

        Date when the transaction was originated  # noqa: E501

        :param origination_date: The origination_date of this InlineResponse20075Data.  # noqa: E501
        :type: datetime
        """

        self._origination_date = origination_date

    @property
    def cost_basis_known(self):
        """Gets the cost_basis_known of this InlineResponse20075Data.  # noqa: E501

        Is the cost basis known for this transaction?  # noqa: E501

        :return: The cost_basis_known of this InlineResponse20075Data.  # noqa: E501
        :rtype: bool
        """
        return self._cost_basis_known

    @cost_basis_known.setter
    def cost_basis_known(self, cost_basis_known):
        """Sets the cost_basis_known of this InlineResponse20075Data.

        Is the cost basis known for this transaction?  # noqa: E501

        :param cost_basis_known: The cost_basis_known of this InlineResponse20075Data.  # noqa: E501
        :type: bool
        """

        self._cost_basis_known = cost_basis_known

    @property
    def replaced_transfer_id(self):
        """Gets the replaced_transfer_id of this InlineResponse20075Data.  # noqa: E501

        The id of the replaced transfer associated with this transaction  # noqa: E501

        :return: The replaced_transfer_id of this InlineResponse20075Data.  # noqa: E501
        :rtype: int
        """
        return self._replaced_transfer_id

    @replaced_transfer_id.setter
    def replaced_transfer_id(self, replaced_transfer_id):
        """Sets the replaced_transfer_id of this InlineResponse20075Data.

        The id of the replaced transfer associated with this transaction  # noqa: E501

        :param replaced_transfer_id: The replaced_transfer_id of this InlineResponse20075Data.  # noqa: E501
        :type: int
        """

        self._replaced_transfer_id = replaced_transfer_id

    @property
    def created_at_utc(self):
        """Gets the created_at_utc of this InlineResponse20075Data.  # noqa: E501

        Timestamp for when the record was created  # noqa: E501

        :return: The created_at_utc of this InlineResponse20075Data.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at_utc

    @created_at_utc.setter
    def created_at_utc(self, created_at_utc):
        """Sets the created_at_utc of this InlineResponse20075Data.

        Timestamp for when the record was created  # noqa: E501

        :param created_at_utc: The created_at_utc of this InlineResponse20075Data.  # noqa: E501
        :type: datetime
        """

        self._created_at_utc = created_at_utc

    @property
    def updated_at_utc(self):
        """Gets the updated_at_utc of this InlineResponse20075Data.  # noqa: E501

        Timestamp for when the record was updated  # noqa: E501

        :return: The updated_at_utc of this InlineResponse20075Data.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at_utc

    @updated_at_utc.setter
    def updated_at_utc(self, updated_at_utc):
        """Sets the updated_at_utc of this InlineResponse20075Data.

        Timestamp for when the record was updated  # noqa: E501

        :param updated_at_utc: The updated_at_utc of this InlineResponse20075Data.  # noqa: E501
        :type: datetime
        """

        self._updated_at_utc = updated_at_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20075Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20075Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StrategiesFilterBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'firm_id': 'int',
        'description': 'str',
        'investment_minimum': 'float',
        'fee': 'float',
        'benchmark_id': 'int',
        'strategy_type': 'str',
        'tax_managed': 'bool',
        'risk_category': 'str',
        'search_tags': 'list[str]',
        'asset_type': 'str',
        'fact_sheet_available': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'firm_id': 'firm_id',
        'description': 'description',
        'investment_minimum': 'investment_minimum',
        'fee': 'fee',
        'benchmark_id': 'benchmark_id',
        'strategy_type': 'strategy_type',
        'tax_managed': 'tax_managed',
        'risk_category': 'risk_category',
        'search_tags': 'search_tags',
        'asset_type': 'asset_type',
        'fact_sheet_available': 'fact_sheet_available'
    }

    def __init__(self, id=None, name=None, firm_id=None, description=None, investment_minimum=None, fee=None, benchmark_id=None, strategy_type=None, tax_managed=None, risk_category=None, search_tags=None, asset_type=None, fact_sheet_available=None):  # noqa: E501
        """StrategiesFilterBody - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._firm_id = None
        self._description = None
        self._investment_minimum = None
        self._fee = None
        self._benchmark_id = None
        self._strategy_type = None
        self._tax_managed = None
        self._risk_category = None
        self._search_tags = None
        self._asset_type = None
        self._fact_sheet_available = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if firm_id is not None:
            self.firm_id = firm_id
        if description is not None:
            self.description = description
        if investment_minimum is not None:
            self.investment_minimum = investment_minimum
        if fee is not None:
            self.fee = fee
        if benchmark_id is not None:
            self.benchmark_id = benchmark_id
        if strategy_type is not None:
            self.strategy_type = strategy_type
        if tax_managed is not None:
            self.tax_managed = tax_managed
        if risk_category is not None:
            self.risk_category = risk_category
        if search_tags is not None:
            self.search_tags = search_tags
        if asset_type is not None:
            self.asset_type = asset_type
        if fact_sheet_available is not None:
            self.fact_sheet_available = fact_sheet_available

    @property
    def id(self):
        """Gets the id of this StrategiesFilterBody.  # noqa: E501

        Unique ID for this strategy object  # noqa: E501

        :return: The id of this StrategiesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StrategiesFilterBody.

        Unique ID for this strategy object  # noqa: E501

        :param id: The id of this StrategiesFilterBody.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this StrategiesFilterBody.  # noqa: E501

        Name for the strategy  # noqa: E501

        :return: The name of this StrategiesFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StrategiesFilterBody.

        Name for the strategy  # noqa: E501

        :param name: The name of this StrategiesFilterBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def firm_id(self):
        """Gets the firm_id of this StrategiesFilterBody.  # noqa: E501

        Id of the firm this strategy is associated with  # noqa: E501

        :return: The firm_id of this StrategiesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this StrategiesFilterBody.

        Id of the firm this strategy is associated with  # noqa: E501

        :param firm_id: The firm_id of this StrategiesFilterBody.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def description(self):
        """Gets the description of this StrategiesFilterBody.  # noqa: E501

        Description of the strategy  # noqa: E501

        :return: The description of this StrategiesFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StrategiesFilterBody.

        Description of the strategy  # noqa: E501

        :param description: The description of this StrategiesFilterBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def investment_minimum(self):
        """Gets the investment_minimum of this StrategiesFilterBody.  # noqa: E501

        Investment minimum  # noqa: E501

        :return: The investment_minimum of this StrategiesFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._investment_minimum

    @investment_minimum.setter
    def investment_minimum(self, investment_minimum):
        """Sets the investment_minimum of this StrategiesFilterBody.

        Investment minimum  # noqa: E501

        :param investment_minimum: The investment_minimum of this StrategiesFilterBody.  # noqa: E501
        :type: float
        """

        self._investment_minimum = investment_minimum

    @property
    def fee(self):
        """Gets the fee of this StrategiesFilterBody.  # noqa: E501

        Fee reported on the strategy  # noqa: E501

        :return: The fee of this StrategiesFilterBody.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this StrategiesFilterBody.

        Fee reported on the strategy  # noqa: E501

        :param fee: The fee of this StrategiesFilterBody.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def benchmark_id(self):
        """Gets the benchmark_id of this StrategiesFilterBody.  # noqa: E501

        Id of the benchmark associated with this strategy  # noqa: E501

        :return: The benchmark_id of this StrategiesFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._benchmark_id

    @benchmark_id.setter
    def benchmark_id(self, benchmark_id):
        """Sets the benchmark_id of this StrategiesFilterBody.

        Id of the benchmark associated with this strategy  # noqa: E501

        :param benchmark_id: The benchmark_id of this StrategiesFilterBody.  # noqa: E501
        :type: int
        """

        self._benchmark_id = benchmark_id

    @property
    def strategy_type(self):
        """Gets the strategy_type of this StrategiesFilterBody.  # noqa: E501

        Type of the strategy.  # noqa: E501

        :return: The strategy_type of this StrategiesFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._strategy_type

    @strategy_type.setter
    def strategy_type(self, strategy_type):
        """Sets the strategy_type of this StrategiesFilterBody.

        Type of the strategy.  # noqa: E501

        :param strategy_type: The strategy_type of this StrategiesFilterBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["Core", "Satellite", "Income", "Alternatives"]  # noqa: E501
        if strategy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `strategy_type` ({0}), must be one of {1}"  # noqa: E501
                .format(strategy_type, allowed_values)
            )

        self._strategy_type = strategy_type

    @property
    def tax_managed(self):
        """Gets the tax_managed of this StrategiesFilterBody.  # noqa: E501

        Is the tax managed?  # noqa: E501

        :return: The tax_managed of this StrategiesFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._tax_managed

    @tax_managed.setter
    def tax_managed(self, tax_managed):
        """Sets the tax_managed of this StrategiesFilterBody.

        Is the tax managed?  # noqa: E501

        :param tax_managed: The tax_managed of this StrategiesFilterBody.  # noqa: E501
        :type: bool
        """

        self._tax_managed = tax_managed

    @property
    def risk_category(self):
        """Gets the risk_category of this StrategiesFilterBody.  # noqa: E501

        Risk category of the strategy. CP for Capital Preservation, CO for Conservative, MC for Moderate Conservative, MO for Moderate, MG for Moderate Growth, GR for Growth, AG for Aggressive Growth  # noqa: E501

        :return: The risk_category of this StrategiesFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._risk_category

    @risk_category.setter
    def risk_category(self, risk_category):
        """Sets the risk_category of this StrategiesFilterBody.

        Risk category of the strategy. CP for Capital Preservation, CO for Conservative, MC for Moderate Conservative, MO for Moderate, MG for Moderate Growth, GR for Growth, AG for Aggressive Growth  # noqa: E501

        :param risk_category: The risk_category of this StrategiesFilterBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["CP", "CO", "MC", "MO", "MG", "GR", "AG"]  # noqa: E501
        if risk_category not in allowed_values:
            raise ValueError(
                "Invalid value for `risk_category` ({0}), must be one of {1}"  # noqa: E501
                .format(risk_category, allowed_values)
            )

        self._risk_category = risk_category

    @property
    def search_tags(self):
        """Gets the search_tags of this StrategiesFilterBody.  # noqa: E501

        Search tags for the strategy  # noqa: E501

        :return: The search_tags of this StrategiesFilterBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._search_tags

    @search_tags.setter
    def search_tags(self, search_tags):
        """Sets the search_tags of this StrategiesFilterBody.

        Search tags for the strategy  # noqa: E501

        :param search_tags: The search_tags of this StrategiesFilterBody.  # noqa: E501
        :type: list[str]
        """

        self._search_tags = search_tags

    @property
    def asset_type(self):
        """Gets the asset_type of this StrategiesFilterBody.  # noqa: E501

        Asset type of the strategy  # noqa: E501

        :return: The asset_type of this StrategiesFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this StrategiesFilterBody.

        Asset type of the strategy  # noqa: E501

        :param asset_type: The asset_type of this StrategiesFilterBody.  # noqa: E501
        :type: str
        """

        self._asset_type = asset_type

    @property
    def fact_sheet_available(self):
        """Gets the fact_sheet_available of this StrategiesFilterBody.  # noqa: E501

        Is the fact sheet available?  # noqa: E501

        :return: The fact_sheet_available of this StrategiesFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._fact_sheet_available

    @fact_sheet_available.setter
    def fact_sheet_available(self, fact_sheet_available):
        """Sets the fact_sheet_available of this StrategiesFilterBody.

        Is the fact sheet available?  # noqa: E501

        :param fact_sheet_available: The fact_sheet_available of this StrategiesFilterBody.  # noqa: E501
        :type: bool
        """

        self._fact_sheet_available = fact_sheet_available

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StrategiesFilterBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StrategiesFilterBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

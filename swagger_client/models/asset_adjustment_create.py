# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetAdjustmentCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'slug': 'str',
        'adjustment_type': 'str',
        'level': 'str',
        'firm_id': 'int',
        'weight': 'int'
    }

    attribute_map = {
        'name': 'name',
        'slug': 'slug',
        'adjustment_type': 'adjustment_type',
        'level': 'level',
        'firm_id': 'firm_id',
        'weight': 'weight'
    }

    def __init__(self, name=None, slug=None, adjustment_type=None, level=None, firm_id=None, weight=None):  # noqa: E501
        """AssetAdjustmentCreate - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._slug = None
        self._adjustment_type = None
        self._level = None
        self._firm_id = None
        self._weight = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if slug is not None:
            self.slug = slug
        if adjustment_type is not None:
            self.adjustment_type = adjustment_type
        if level is not None:
            self.level = level
        if firm_id is not None:
            self.firm_id = firm_id
        if weight is not None:
            self.weight = weight

    @property
    def name(self):
        """Gets the name of this AssetAdjustmentCreate.  # noqa: E501

        The name of this Asset Adjustment  # noqa: E501

        :return: The name of this AssetAdjustmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetAdjustmentCreate.

        The name of this Asset Adjustment  # noqa: E501

        :param name: The name of this AssetAdjustmentCreate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this AssetAdjustmentCreate.  # noqa: E501

        The sluggified name of this Asset Adjustment  # noqa: E501

        :return: The slug of this AssetAdjustmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this AssetAdjustmentCreate.

        The sluggified name of this Asset Adjustment  # noqa: E501

        :param slug: The slug of this AssetAdjustmentCreate.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def adjustment_type(self):
        """Gets the adjustment_type of this AssetAdjustmentCreate.  # noqa: E501

        i for inclusion, e for exclusion  # noqa: E501

        :return: The adjustment_type of this AssetAdjustmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_type

    @adjustment_type.setter
    def adjustment_type(self, adjustment_type):
        """Sets the adjustment_type of this AssetAdjustmentCreate.

        i for inclusion, e for exclusion  # noqa: E501

        :param adjustment_type: The adjustment_type of this AssetAdjustmentCreate.  # noqa: E501
        :type: str
        """
        allowed_values = ["i = Inclusion", "e = Exclusion"]  # noqa: E501
        if adjustment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `adjustment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(adjustment_type, allowed_values)
            )

        self._adjustment_type = adjustment_type

    @property
    def level(self):
        """Gets the level of this AssetAdjustmentCreate.  # noqa: E501

        f for firm-wide, a for the account level  # noqa: E501

        :return: The level of this AssetAdjustmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this AssetAdjustmentCreate.

        f for firm-wide, a for the account level  # noqa: E501

        :param level: The level of this AssetAdjustmentCreate.  # noqa: E501
        :type: str
        """
        allowed_values = ["f = Firm-wide", "a = Account level"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def firm_id(self):
        """Gets the firm_id of this AssetAdjustmentCreate.  # noqa: E501

        The firm ID of the managing firm  # noqa: E501

        :return: The firm_id of this AssetAdjustmentCreate.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this AssetAdjustmentCreate.

        The firm ID of the managing firm  # noqa: E501

        :param firm_id: The firm_id of this AssetAdjustmentCreate.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def weight(self):
        """Gets the weight of this AssetAdjustmentCreate.  # noqa: E501

        Weight of the adjusted asset  # noqa: E501

        :return: The weight of this AssetAdjustmentCreate.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this AssetAdjustmentCreate.

        Weight of the adjusted asset  # noqa: E501

        :param weight: The weight of this AssetAdjustmentCreate.  # noqa: E501
        :type: int
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetAdjustmentCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetAdjustmentCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TargetAllocationCoefficients(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'mac': 'int',
        'weight': 'float',
        'class_tag_id': 'int',
        'negative_tolerance': 'float',
        'positive_tolerance': 'float'
    }

    attribute_map = {
        'id': 'id',
        'mac': 'mac',
        'weight': 'weight',
        'class_tag_id': 'class_tag_id',
        'negative_tolerance': 'negative_tolerance',
        'positive_tolerance': 'positive_tolerance'
    }

    def __init__(self, id=None, mac=None, weight=None, class_tag_id=None, negative_tolerance=None, positive_tolerance=None):  # noqa: E501
        """TargetAllocationCoefficients - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._mac = None
        self._weight = None
        self._class_tag_id = None
        self._negative_tolerance = None
        self._positive_tolerance = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if mac is not None:
            self.mac = mac
        if weight is not None:
            self.weight = weight
        if class_tag_id is not None:
            self.class_tag_id = class_tag_id
        if negative_tolerance is not None:
            self.negative_tolerance = negative_tolerance
        if positive_tolerance is not None:
            self.positive_tolerance = positive_tolerance

    @property
    def id(self):
        """Gets the id of this TargetAllocationCoefficients.  # noqa: E501

        Unique ID for this target allocation coefficient object  # noqa: E501

        :return: The id of this TargetAllocationCoefficients.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TargetAllocationCoefficients.

        Unique ID for this target allocation coefficient object  # noqa: E501

        :param id: The id of this TargetAllocationCoefficients.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mac(self):
        """Gets the mac of this TargetAllocationCoefficients.  # noqa: E501

        Master asset class associated with this coefficient  # noqa: E501

        :return: The mac of this TargetAllocationCoefficients.  # noqa: E501
        :rtype: int
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this TargetAllocationCoefficients.

        Master asset class associated with this coefficient  # noqa: E501

        :param mac: The mac of this TargetAllocationCoefficients.  # noqa: E501
        :type: int
        """

        self._mac = mac

    @property
    def weight(self):
        """Gets the weight of this TargetAllocationCoefficients.  # noqa: E501

        Weight of the coefficient  # noqa: E501

        :return: The weight of this TargetAllocationCoefficients.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this TargetAllocationCoefficients.

        Weight of the coefficient  # noqa: E501

        :param weight: The weight of this TargetAllocationCoefficients.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def class_tag_id(self):
        """Gets the class_tag_id of this TargetAllocationCoefficients.  # noqa: E501

        Asset classification tag id associated with the coefficient  # noqa: E501

        :return: The class_tag_id of this TargetAllocationCoefficients.  # noqa: E501
        :rtype: int
        """
        return self._class_tag_id

    @class_tag_id.setter
    def class_tag_id(self, class_tag_id):
        """Sets the class_tag_id of this TargetAllocationCoefficients.

        Asset classification tag id associated with the coefficient  # noqa: E501

        :param class_tag_id: The class_tag_id of this TargetAllocationCoefficients.  # noqa: E501
        :type: int
        """

        self._class_tag_id = class_tag_id

    @property
    def negative_tolerance(self):
        """Gets the negative_tolerance of this TargetAllocationCoefficients.  # noqa: E501

        Value of negative tolerance  # noqa: E501

        :return: The negative_tolerance of this TargetAllocationCoefficients.  # noqa: E501
        :rtype: float
        """
        return self._negative_tolerance

    @negative_tolerance.setter
    def negative_tolerance(self, negative_tolerance):
        """Sets the negative_tolerance of this TargetAllocationCoefficients.

        Value of negative tolerance  # noqa: E501

        :param negative_tolerance: The negative_tolerance of this TargetAllocationCoefficients.  # noqa: E501
        :type: float
        """

        self._negative_tolerance = negative_tolerance

    @property
    def positive_tolerance(self):
        """Gets the positive_tolerance of this TargetAllocationCoefficients.  # noqa: E501

        Value of positive tolerance  # noqa: E501

        :return: The positive_tolerance of this TargetAllocationCoefficients.  # noqa: E501
        :rtype: float
        """
        return self._positive_tolerance

    @positive_tolerance.setter
    def positive_tolerance(self, positive_tolerance):
        """Sets the positive_tolerance of this TargetAllocationCoefficients.

        Value of positive tolerance  # noqa: E501

        :param positive_tolerance: The positive_tolerance of this TargetAllocationCoefficients.  # noqa: E501
        :type: float
        """

        self._positive_tolerance = positive_tolerance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TargetAllocationCoefficients, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetAllocationCoefficients):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

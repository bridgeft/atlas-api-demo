# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountHistoricalBalance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'as_of_date': 'datetime',
        'prior_as_of_date': 'datetime',
        'account_id': 'int',
        'household_id': 'int',
        'beginning_period_value': 'float',
        'ending_period_value': 'float',
        'abs_cash_currency_contribution': 'float',
        'abs_cash_currency_withdrawal': 'float',
        'abs_security_contribution': 'float',
        'abs_security_withdrawal': 'float',
        'abs_income': 'float',
        'abs_expense': 'float',
        'abs_non_performance_income': 'float',
        'abs_non_performance_expense': 'float',
        'total_fee': 'float',
        'percentage_period_net_return': 'float',
        'percentage_period_gross_return': 'float',
        'total_contribution': 'float',
        'total_withdrawal': 'float',
        'custodian': 'str',
        'account_number': 'str',
        'frequency': 'str',
        'contribution_period_weight': 'float',
        'withdrawal_period_weight': 'float',
        'npni_period_weight': 'float',
        'created_at_utc': 'datetime',
        'updated_at_utc': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'as_of_date': 'as_of_date',
        'prior_as_of_date': 'prior_as_of_date',
        'account_id': 'account_id',
        'household_id': 'household_id',
        'beginning_period_value': 'beginning_period_value',
        'ending_period_value': 'ending_period_value',
        'abs_cash_currency_contribution': 'abs_cash_currency_contribution',
        'abs_cash_currency_withdrawal': 'abs_cash_currency_withdrawal',
        'abs_security_contribution': 'abs_security_contribution',
        'abs_security_withdrawal': 'abs_security_withdrawal',
        'abs_income': 'abs_income',
        'abs_expense': 'abs_expense',
        'abs_non_performance_income': 'abs_non_performance_income',
        'abs_non_performance_expense': 'abs_non_performance_expense',
        'total_fee': 'total_fee',
        'percentage_period_net_return': 'percentage_period_net_return',
        'percentage_period_gross_return': 'percentage_period_gross_return',
        'total_contribution': 'total_contribution',
        'total_withdrawal': 'total_withdrawal',
        'custodian': 'custodian',
        'account_number': 'account_number',
        'frequency': 'frequency',
        'contribution_period_weight': 'contribution_period_weight',
        'withdrawal_period_weight': 'withdrawal_period_weight',
        'npni_period_weight': 'npni_period_weight',
        'created_at_utc': 'created_at_utc',
        'updated_at_utc': 'updated_at_utc'
    }

    def __init__(self, id=None, as_of_date=None, prior_as_of_date=None, account_id=None, household_id=None, beginning_period_value=None, ending_period_value=None, abs_cash_currency_contribution=None, abs_cash_currency_withdrawal=None, abs_security_contribution=None, abs_security_withdrawal=None, abs_income=None, abs_expense=None, abs_non_performance_income=None, abs_non_performance_expense=None, total_fee=None, percentage_period_net_return=None, percentage_period_gross_return=None, total_contribution=None, total_withdrawal=None, custodian=None, account_number=None, frequency=None, contribution_period_weight=None, withdrawal_period_weight=None, npni_period_weight=None, created_at_utc=None, updated_at_utc=None):  # noqa: E501
        """AccountHistoricalBalance - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._as_of_date = None
        self._prior_as_of_date = None
        self._account_id = None
        self._household_id = None
        self._beginning_period_value = None
        self._ending_period_value = None
        self._abs_cash_currency_contribution = None
        self._abs_cash_currency_withdrawal = None
        self._abs_security_contribution = None
        self._abs_security_withdrawal = None
        self._abs_income = None
        self._abs_expense = None
        self._abs_non_performance_income = None
        self._abs_non_performance_expense = None
        self._total_fee = None
        self._percentage_period_net_return = None
        self._percentage_period_gross_return = None
        self._total_contribution = None
        self._total_withdrawal = None
        self._custodian = None
        self._account_number = None
        self._frequency = None
        self._contribution_period_weight = None
        self._withdrawal_period_weight = None
        self._npni_period_weight = None
        self._created_at_utc = None
        self._updated_at_utc = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if as_of_date is not None:
            self.as_of_date = as_of_date
        if prior_as_of_date is not None:
            self.prior_as_of_date = prior_as_of_date
        if account_id is not None:
            self.account_id = account_id
        if household_id is not None:
            self.household_id = household_id
        if beginning_period_value is not None:
            self.beginning_period_value = beginning_period_value
        if ending_period_value is not None:
            self.ending_period_value = ending_period_value
        if abs_cash_currency_contribution is not None:
            self.abs_cash_currency_contribution = abs_cash_currency_contribution
        if abs_cash_currency_withdrawal is not None:
            self.abs_cash_currency_withdrawal = abs_cash_currency_withdrawal
        if abs_security_contribution is not None:
            self.abs_security_contribution = abs_security_contribution
        if abs_security_withdrawal is not None:
            self.abs_security_withdrawal = abs_security_withdrawal
        if abs_income is not None:
            self.abs_income = abs_income
        if abs_expense is not None:
            self.abs_expense = abs_expense
        if abs_non_performance_income is not None:
            self.abs_non_performance_income = abs_non_performance_income
        if abs_non_performance_expense is not None:
            self.abs_non_performance_expense = abs_non_performance_expense
        if total_fee is not None:
            self.total_fee = total_fee
        if percentage_period_net_return is not None:
            self.percentage_period_net_return = percentage_period_net_return
        if percentage_period_gross_return is not None:
            self.percentage_period_gross_return = percentage_period_gross_return
        if total_contribution is not None:
            self.total_contribution = total_contribution
        if total_withdrawal is not None:
            self.total_withdrawal = total_withdrawal
        if custodian is not None:
            self.custodian = custodian
        if account_number is not None:
            self.account_number = account_number
        if frequency is not None:
            self.frequency = frequency
        if contribution_period_weight is not None:
            self.contribution_period_weight = contribution_period_weight
        if withdrawal_period_weight is not None:
            self.withdrawal_period_weight = withdrawal_period_weight
        if npni_period_weight is not None:
            self.npni_period_weight = npni_period_weight
        if created_at_utc is not None:
            self.created_at_utc = created_at_utc
        if updated_at_utc is not None:
            self.updated_at_utc = updated_at_utc

    @property
    def id(self):
        """Gets the id of this AccountHistoricalBalance.  # noqa: E501

        The unique resource ID for this Historical Balance object  # noqa: E501

        :return: The id of this AccountHistoricalBalance.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountHistoricalBalance.

        The unique resource ID for this Historical Balance object  # noqa: E501

        :param id: The id of this AccountHistoricalBalance.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def as_of_date(self):
        """Gets the as_of_date of this AccountHistoricalBalance.  # noqa: E501

        The current date for this Historical Balance  # noqa: E501

        :return: The as_of_date of this AccountHistoricalBalance.  # noqa: E501
        :rtype: datetime
        """
        return self._as_of_date

    @as_of_date.setter
    def as_of_date(self, as_of_date):
        """Sets the as_of_date of this AccountHistoricalBalance.

        The current date for this Historical Balance  # noqa: E501

        :param as_of_date: The as_of_date of this AccountHistoricalBalance.  # noqa: E501
        :type: datetime
        """

        self._as_of_date = as_of_date

    @property
    def prior_as_of_date(self):
        """Gets the prior_as_of_date of this AccountHistoricalBalance.  # noqa: E501

        The most recent date before the as_of_date  # noqa: E501

        :return: The prior_as_of_date of this AccountHistoricalBalance.  # noqa: E501
        :rtype: datetime
        """
        return self._prior_as_of_date

    @prior_as_of_date.setter
    def prior_as_of_date(self, prior_as_of_date):
        """Sets the prior_as_of_date of this AccountHistoricalBalance.

        The most recent date before the as_of_date  # noqa: E501

        :param prior_as_of_date: The prior_as_of_date of this AccountHistoricalBalance.  # noqa: E501
        :type: datetime
        """

        self._prior_as_of_date = prior_as_of_date

    @property
    def account_id(self):
        """Gets the account_id of this AccountHistoricalBalance.  # noqa: E501

        The id of the Account associated with this Historical Balance  # noqa: E501

        :return: The account_id of this AccountHistoricalBalance.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountHistoricalBalance.

        The id of the Account associated with this Historical Balance  # noqa: E501

        :param account_id: The account_id of this AccountHistoricalBalance.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def household_id(self):
        """Gets the household_id of this AccountHistoricalBalance.  # noqa: E501

        The id of the Household associated with this Historical Balance  # noqa: E501

        :return: The household_id of this AccountHistoricalBalance.  # noqa: E501
        :rtype: int
        """
        return self._household_id

    @household_id.setter
    def household_id(self, household_id):
        """Sets the household_id of this AccountHistoricalBalance.

        The id of the Household associated with this Historical Balance  # noqa: E501

        :param household_id: The household_id of this AccountHistoricalBalance.  # noqa: E501
        :type: int
        """

        self._household_id = household_id

    @property
    def beginning_period_value(self):
        """Gets the beginning_period_value of this AccountHistoricalBalance.  # noqa: E501

        The beginning value of on the as_of_date. This is equal to the ending_period_value on the prior_as_of_date  # noqa: E501

        :return: The beginning_period_value of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._beginning_period_value

    @beginning_period_value.setter
    def beginning_period_value(self, beginning_period_value):
        """Sets the beginning_period_value of this AccountHistoricalBalance.

        The beginning value of on the as_of_date. This is equal to the ending_period_value on the prior_as_of_date  # noqa: E501

        :param beginning_period_value: The beginning_period_value of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._beginning_period_value = beginning_period_value

    @property
    def ending_period_value(self):
        """Gets the ending_period_value of this AccountHistoricalBalance.  # noqa: E501

        The ending value on the as_of_date  # noqa: E501

        :return: The ending_period_value of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._ending_period_value

    @ending_period_value.setter
    def ending_period_value(self, ending_period_value):
        """Sets the ending_period_value of this AccountHistoricalBalance.

        The ending value on the as_of_date  # noqa: E501

        :param ending_period_value: The ending_period_value of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._ending_period_value = ending_period_value

    @property
    def abs_cash_currency_contribution(self):
        """Gets the abs_cash_currency_contribution of this AccountHistoricalBalance.  # noqa: E501

        Total value of cash deposits  # noqa: E501

        :return: The abs_cash_currency_contribution of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._abs_cash_currency_contribution

    @abs_cash_currency_contribution.setter
    def abs_cash_currency_contribution(self, abs_cash_currency_contribution):
        """Sets the abs_cash_currency_contribution of this AccountHistoricalBalance.

        Total value of cash deposits  # noqa: E501

        :param abs_cash_currency_contribution: The abs_cash_currency_contribution of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._abs_cash_currency_contribution = abs_cash_currency_contribution

    @property
    def abs_cash_currency_withdrawal(self):
        """Gets the abs_cash_currency_withdrawal of this AccountHistoricalBalance.  # noqa: E501

        Total value of cash withdrawals  # noqa: E501

        :return: The abs_cash_currency_withdrawal of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._abs_cash_currency_withdrawal

    @abs_cash_currency_withdrawal.setter
    def abs_cash_currency_withdrawal(self, abs_cash_currency_withdrawal):
        """Sets the abs_cash_currency_withdrawal of this AccountHistoricalBalance.

        Total value of cash withdrawals  # noqa: E501

        :param abs_cash_currency_withdrawal: The abs_cash_currency_withdrawal of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._abs_cash_currency_withdrawal = abs_cash_currency_withdrawal

    @property
    def abs_security_contribution(self):
        """Gets the abs_security_contribution of this AccountHistoricalBalance.  # noqa: E501

        Total value of security deposits  # noqa: E501

        :return: The abs_security_contribution of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._abs_security_contribution

    @abs_security_contribution.setter
    def abs_security_contribution(self, abs_security_contribution):
        """Sets the abs_security_contribution of this AccountHistoricalBalance.

        Total value of security deposits  # noqa: E501

        :param abs_security_contribution: The abs_security_contribution of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._abs_security_contribution = abs_security_contribution

    @property
    def abs_security_withdrawal(self):
        """Gets the abs_security_withdrawal of this AccountHistoricalBalance.  # noqa: E501

        Total value of security withdrawals  # noqa: E501

        :return: The abs_security_withdrawal of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._abs_security_withdrawal

    @abs_security_withdrawal.setter
    def abs_security_withdrawal(self, abs_security_withdrawal):
        """Sets the abs_security_withdrawal of this AccountHistoricalBalance.

        Total value of security withdrawals  # noqa: E501

        :param abs_security_withdrawal: The abs_security_withdrawal of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._abs_security_withdrawal = abs_security_withdrawal

    @property
    def abs_income(self):
        """Gets the abs_income of this AccountHistoricalBalance.  # noqa: E501

        Total value of performance affecting income (e.g. dividends, interest)  # noqa: E501

        :return: The abs_income of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._abs_income

    @abs_income.setter
    def abs_income(self, abs_income):
        """Sets the abs_income of this AccountHistoricalBalance.

        Total value of performance affecting income (e.g. dividends, interest)  # noqa: E501

        :param abs_income: The abs_income of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._abs_income = abs_income

    @property
    def abs_expense(self):
        """Gets the abs_expense of this AccountHistoricalBalance.  # noqa: E501

        Total value of performance affecting expenses (e.g. ADR fees)  # noqa: E501

        :return: The abs_expense of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._abs_expense

    @abs_expense.setter
    def abs_expense(self, abs_expense):
        """Sets the abs_expense of this AccountHistoricalBalance.

        Total value of performance affecting expenses (e.g. ADR fees)  # noqa: E501

        :param abs_expense: The abs_expense of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._abs_expense = abs_expense

    @property
    def abs_non_performance_income(self):
        """Gets the abs_non_performance_income of this AccountHistoricalBalance.  # noqa: E501

        Total value of non-performance affecting income (e.g. return of principle)  # noqa: E501

        :return: The abs_non_performance_income of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._abs_non_performance_income

    @abs_non_performance_income.setter
    def abs_non_performance_income(self, abs_non_performance_income):
        """Sets the abs_non_performance_income of this AccountHistoricalBalance.

        Total value of non-performance affecting income (e.g. return of principle)  # noqa: E501

        :param abs_non_performance_income: The abs_non_performance_income of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._abs_non_performance_income = abs_non_performance_income

    @property
    def abs_non_performance_expense(self):
        """Gets the abs_non_performance_expense of this AccountHistoricalBalance.  # noqa: E501

        Total value of non-performance affecting expenses (e.g. tax withholding)  # noqa: E501

        :return: The abs_non_performance_expense of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._abs_non_performance_expense

    @abs_non_performance_expense.setter
    def abs_non_performance_expense(self, abs_non_performance_expense):
        """Sets the abs_non_performance_expense of this AccountHistoricalBalance.

        Total value of non-performance affecting expenses (e.g. tax withholding)  # noqa: E501

        :param abs_non_performance_expense: The abs_non_performance_expense of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._abs_non_performance_expense = abs_non_performance_expense

    @property
    def total_fee(self):
        """Gets the total_fee of this AccountHistoricalBalance.  # noqa: E501

        Total value of management fees  # noqa: E501

        :return: The total_fee of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._total_fee

    @total_fee.setter
    def total_fee(self, total_fee):
        """Sets the total_fee of this AccountHistoricalBalance.

        Total value of management fees  # noqa: E501

        :param total_fee: The total_fee of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._total_fee = total_fee

    @property
    def percentage_period_net_return(self):
        """Gets the percentage_period_net_return of this AccountHistoricalBalance.  # noqa: E501

        Net return for period (note can be monthly, daily - depends on what data is provided)  # noqa: E501

        :return: The percentage_period_net_return of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._percentage_period_net_return

    @percentage_period_net_return.setter
    def percentage_period_net_return(self, percentage_period_net_return):
        """Sets the percentage_period_net_return of this AccountHistoricalBalance.

        Net return for period (note can be monthly, daily - depends on what data is provided)  # noqa: E501

        :param percentage_period_net_return: The percentage_period_net_return of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._percentage_period_net_return = percentage_period_net_return

    @property
    def percentage_period_gross_return(self):
        """Gets the percentage_period_gross_return of this AccountHistoricalBalance.  # noqa: E501

        Gross return for period (note can be monthly, daily - depends on what data is provided)  # noqa: E501

        :return: The percentage_period_gross_return of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._percentage_period_gross_return

    @percentage_period_gross_return.setter
    def percentage_period_gross_return(self, percentage_period_gross_return):
        """Sets the percentage_period_gross_return of this AccountHistoricalBalance.

        Gross return for period (note can be monthly, daily - depends on what data is provided)  # noqa: E501

        :param percentage_period_gross_return: The percentage_period_gross_return of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._percentage_period_gross_return = percentage_period_gross_return

    @property
    def total_contribution(self):
        """Gets the total_contribution of this AccountHistoricalBalance.  # noqa: E501

        Total cash and security contributions  # noqa: E501

        :return: The total_contribution of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._total_contribution

    @total_contribution.setter
    def total_contribution(self, total_contribution):
        """Sets the total_contribution of this AccountHistoricalBalance.

        Total cash and security contributions  # noqa: E501

        :param total_contribution: The total_contribution of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._total_contribution = total_contribution

    @property
    def total_withdrawal(self):
        """Gets the total_withdrawal of this AccountHistoricalBalance.  # noqa: E501

        Total cash and security withdrawals  # noqa: E501

        :return: The total_withdrawal of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._total_withdrawal

    @total_withdrawal.setter
    def total_withdrawal(self, total_withdrawal):
        """Sets the total_withdrawal of this AccountHistoricalBalance.

        Total cash and security withdrawals  # noqa: E501

        :param total_withdrawal: The total_withdrawal of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """

        self._total_withdrawal = total_withdrawal

    @property
    def custodian(self):
        """Gets the custodian of this AccountHistoricalBalance.  # noqa: E501

        Custodian the account data comes from TDA=TD Ameritrade, SWB=Schwab, NFS=Fidelity, PER=Pershing, MLT=MillenniumTrust, RJA=RaymondJames, HDG=Manual  # noqa: E501

        :return: The custodian of this AccountHistoricalBalance.  # noqa: E501
        :rtype: str
        """
        return self._custodian

    @custodian.setter
    def custodian(self, custodian):
        """Sets the custodian of this AccountHistoricalBalance.

        Custodian the account data comes from TDA=TD Ameritrade, SWB=Schwab, NFS=Fidelity, PER=Pershing, MLT=MillenniumTrust, RJA=RaymondJames, HDG=Manual  # noqa: E501

        :param custodian: The custodian of this AccountHistoricalBalance.  # noqa: E501
        :type: str
        """
        allowed_values = ["TDA", "SWB", "NFS", "PER", "DST", "MLT", "RJA", "HDG"]  # noqa: E501
        if custodian not in allowed_values:
            raise ValueError(
                "Invalid value for `custodian` ({0}), must be one of {1}"  # noqa: E501
                .format(custodian, allowed_values)
            )

        self._custodian = custodian

    @property
    def account_number(self):
        """Gets the account_number of this AccountHistoricalBalance.  # noqa: E501

        Account number at the custodian  # noqa: E501

        :return: The account_number of this AccountHistoricalBalance.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this AccountHistoricalBalance.

        Account number at the custodian  # noqa: E501

        :param account_number: The account_number of this AccountHistoricalBalance.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def frequency(self):
        """Gets the frequency of this AccountHistoricalBalance.  # noqa: E501

        Frequency of return provided (e.g. M for monthly)  # noqa: E501

        :return: The frequency of this AccountHistoricalBalance.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this AccountHistoricalBalance.

        Frequency of return provided (e.g. M for monthly)  # noqa: E501

        :param frequency: The frequency of this AccountHistoricalBalance.  # noqa: E501
        :type: str
        """
        allowed_values = ["D = Daily", "W = Weekly", "M = Monthly", "Q = Quarterly", "Y = Yearly"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def contribution_period_weight(self):
        """Gets the contribution_period_weight of this AccountHistoricalBalance.  # noqa: E501

        Used to represent timing of cash flow in a month. Potential values 1 = end of month, 0.5 = mid-month, 0 = beginning of month  # noqa: E501

        :return: The contribution_period_weight of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._contribution_period_weight

    @contribution_period_weight.setter
    def contribution_period_weight(self, contribution_period_weight):
        """Sets the contribution_period_weight of this AccountHistoricalBalance.

        Used to represent timing of cash flow in a month. Potential values 1 = end of month, 0.5 = mid-month, 0 = beginning of month  # noqa: E501

        :param contribution_period_weight: The contribution_period_weight of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """
        allowed_values = [1, 0.5, 0]  # noqa: E501
        if contribution_period_weight not in allowed_values:
            raise ValueError(
                "Invalid value for `contribution_period_weight` ({0}), must be one of {1}"  # noqa: E501
                .format(contribution_period_weight, allowed_values)
            )

        self._contribution_period_weight = contribution_period_weight

    @property
    def withdrawal_period_weight(self):
        """Gets the withdrawal_period_weight of this AccountHistoricalBalance.  # noqa: E501

        Used to represent timing of cash flow in a month. Potential values 1 = end of month, 0.5 = mid-month, 0 = beginning of month  # noqa: E501

        :return: The withdrawal_period_weight of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._withdrawal_period_weight

    @withdrawal_period_weight.setter
    def withdrawal_period_weight(self, withdrawal_period_weight):
        """Sets the withdrawal_period_weight of this AccountHistoricalBalance.

        Used to represent timing of cash flow in a month. Potential values 1 = end of month, 0.5 = mid-month, 0 = beginning of month  # noqa: E501

        :param withdrawal_period_weight: The withdrawal_period_weight of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """
        allowed_values = [1, 0.5, 0]  # noqa: E501
        if withdrawal_period_weight not in allowed_values:
            raise ValueError(
                "Invalid value for `withdrawal_period_weight` ({0}), must be one of {1}"  # noqa: E501
                .format(withdrawal_period_weight, allowed_values)
            )

        self._withdrawal_period_weight = withdrawal_period_weight

    @property
    def npni_period_weight(self):
        """Gets the npni_period_weight of this AccountHistoricalBalance.  # noqa: E501

        Used to represent timing of cash flow in a month. Potential values 1 = end of month, 0.5 = mid-month, 0 = beginning of month  # noqa: E501

        :return: The npni_period_weight of this AccountHistoricalBalance.  # noqa: E501
        :rtype: float
        """
        return self._npni_period_weight

    @npni_period_weight.setter
    def npni_period_weight(self, npni_period_weight):
        """Sets the npni_period_weight of this AccountHistoricalBalance.

        Used to represent timing of cash flow in a month. Potential values 1 = end of month, 0.5 = mid-month, 0 = beginning of month  # noqa: E501

        :param npni_period_weight: The npni_period_weight of this AccountHistoricalBalance.  # noqa: E501
        :type: float
        """
        allowed_values = [1, 0.5, 0]  # noqa: E501
        if npni_period_weight not in allowed_values:
            raise ValueError(
                "Invalid value for `npni_period_weight` ({0}), must be one of {1}"  # noqa: E501
                .format(npni_period_weight, allowed_values)
            )

        self._npni_period_weight = npni_period_weight

    @property
    def created_at_utc(self):
        """Gets the created_at_utc of this AccountHistoricalBalance.  # noqa: E501

        Timestamp for when the record was created  # noqa: E501

        :return: The created_at_utc of this AccountHistoricalBalance.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at_utc

    @created_at_utc.setter
    def created_at_utc(self, created_at_utc):
        """Sets the created_at_utc of this AccountHistoricalBalance.

        Timestamp for when the record was created  # noqa: E501

        :param created_at_utc: The created_at_utc of this AccountHistoricalBalance.  # noqa: E501
        :type: datetime
        """

        self._created_at_utc = created_at_utc

    @property
    def updated_at_utc(self):
        """Gets the updated_at_utc of this AccountHistoricalBalance.  # noqa: E501

        Timestamp for when the record was updated  # noqa: E501

        :return: The updated_at_utc of this AccountHistoricalBalance.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at_utc

    @updated_at_utc.setter
    def updated_at_utc(self, updated_at_utc):
        """Sets the updated_at_utc of this AccountHistoricalBalance.

        Timestamp for when the record was updated  # noqa: E501

        :param updated_at_utc: The updated_at_utc of this AccountHistoricalBalance.  # noqa: E501
        :type: datetime
        """

        self._updated_at_utc = updated_at_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountHistoricalBalance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountHistoricalBalance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

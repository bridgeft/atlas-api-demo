# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'firm_id': 'int',
        'entity_id': 'str',
        'household_id': 'int',
        'short_name': 'str',
        'inception_date': 'datetime',
        'close_date': 'datetime',
        'status': 'str',
        'benchmarks_ids': 'list[int]',
        'is_account': 'bool',
        'is_household': 'bool',
        'number': 'str',
        'custodian': 'str',
        'address_1': 'str',
        'address_2': 'str',
        'address_3': 'str',
        'city': 'str',
        'state': 'str',
        'zip_code': 'str',
        'country': 'str',
        'acct_type': 'str',
        'is_tax_deferred': 'bool',
        'is_taxable': 'bool',
        'payment_source': 'str',
        'first_billable_date': 'datetime',
        'billing_splits_ids': 'list[int]',
        'fee_structures_ids': 'list[int]',
        'display_name': 'str',
        'display_number': 'str',
        'is_direct_billed': 'bool',
        'is_custodian_billed': 'bool',
        'is_active': 'bool',
        'is_closed': 'bool',
        'custodian_name': 'str',
        'has_custodian_name': 'bool',
        'first_cost_basis_date': 'datetime',
        'last_cost_basis_date': 'datetime',
        'first_positions_date': 'date',
        'last_positions_date': 'date',
        'first_quarantine_date': 'date',
        'last_reporting_date': 'date',
        'first_transactions_date': 'date',
        'last_transactions_date': 'date',
        'first_funded_date': 'datetime',
        'target_allocation_id': 'int',
        'investment_model_id': 'int',
        'required_cash': 'float',
        'advisor_code': 'str',
        'buy_securities_ids': 'list[int]',
        'do_not_buy_securities_ids': 'list[int]',
        'sell_securities_ids': 'list[int]',
        'do_not_sell_securities_ids': 'list[int]',
        'notes': 'str',
        'unsupervised_securities_ids': 'list[int]',
        'required_cash_frequency': 'str',
        'first_performance_date': 'datetime',
        'first_papered_date': 'datetime',
        'last_portfolio_data_date': 'datetime',
        'created_at_utc': 'datetime',
        'updated_at_utc': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'firm_id': 'firm_id',
        'entity_id': 'entity_id',
        'household_id': 'household_id',
        'short_name': 'short_name',
        'inception_date': 'inception_date',
        'close_date': 'close_date',
        'status': 'status',
        'benchmarks_ids': 'benchmarks_ids',
        'is_account': 'is_account',
        'is_household': 'is_household',
        'number': 'number',
        'custodian': 'custodian',
        'address_1': 'address_1',
        'address_2': 'address_2',
        'address_3': 'address_3',
        'city': 'city',
        'state': 'state',
        'zip_code': 'zip_code',
        'country': 'country',
        'acct_type': 'acct_type',
        'is_tax_deferred': 'is_tax_deferred',
        'is_taxable': 'is_taxable',
        'payment_source': 'payment_source',
        'first_billable_date': 'first_billable_date',
        'billing_splits_ids': 'billing_splits_ids',
        'fee_structures_ids': 'fee_structures_ids',
        'display_name': 'display_name',
        'display_number': 'display_number',
        'is_direct_billed': 'is_direct_billed',
        'is_custodian_billed': 'is_custodian_billed',
        'is_active': 'is_active',
        'is_closed': 'is_closed',
        'custodian_name': 'custodian_name',
        'has_custodian_name': 'has_custodian_name',
        'first_cost_basis_date': 'first_cost_basis_date',
        'last_cost_basis_date': 'last_cost_basis_date',
        'first_positions_date': 'first_positions_date',
        'last_positions_date': 'last_positions_date',
        'first_quarantine_date': 'first_quarantine_date',
        'last_reporting_date': 'last_reporting_date',
        'first_transactions_date': 'first_transactions_date',
        'last_transactions_date': 'last_transactions_date',
        'first_funded_date': 'first_funded_date',
        'target_allocation_id': 'target_allocation_id',
        'investment_model_id': 'investment_model_id',
        'required_cash': 'required_cash',
        'advisor_code': 'advisor_code',
        'buy_securities_ids': 'buy_securities_ids',
        'do_not_buy_securities_ids': 'do_not_buy_securities_ids',
        'sell_securities_ids': 'sell_securities_ids',
        'do_not_sell_securities_ids': 'do_not_sell_securities_ids',
        'notes': 'notes',
        'unsupervised_securities_ids': 'unsupervised_securities_ids',
        'required_cash_frequency': 'required_cash_frequency',
        'first_performance_date': 'first_performance_date',
        'first_papered_date': 'first_papered_date',
        'last_portfolio_data_date': 'last_portfolio_data_date',
        'created_at_utc': 'created_at_utc',
        'updated_at_utc': 'updated_at_utc'
    }

    def __init__(self, id=None, name=None, firm_id=None, entity_id=None, household_id=None, short_name=None, inception_date=None, close_date=None, status=None, benchmarks_ids=None, is_account=None, is_household=None, number=None, custodian=None, address_1=None, address_2=None, address_3=None, city=None, state=None, zip_code=None, country=None, acct_type=None, is_tax_deferred=None, is_taxable=None, payment_source=None, first_billable_date=None, billing_splits_ids=None, fee_structures_ids=None, display_name=None, display_number=None, is_direct_billed=None, is_custodian_billed=None, is_active=None, is_closed=None, custodian_name=None, has_custodian_name=None, first_cost_basis_date=None, last_cost_basis_date=None, first_positions_date=None, last_positions_date=None, first_quarantine_date=None, last_reporting_date=None, first_transactions_date=None, last_transactions_date=None, first_funded_date=None, target_allocation_id=None, investment_model_id=None, required_cash=None, advisor_code=None, buy_securities_ids=None, do_not_buy_securities_ids=None, sell_securities_ids=None, do_not_sell_securities_ids=None, notes=None, unsupervised_securities_ids=None, required_cash_frequency=None, first_performance_date=None, first_papered_date=None, last_portfolio_data_date=None, created_at_utc=None, updated_at_utc=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._firm_id = None
        self._entity_id = None
        self._household_id = None
        self._short_name = None
        self._inception_date = None
        self._close_date = None
        self._status = None
        self._benchmarks_ids = None
        self._is_account = None
        self._is_household = None
        self._number = None
        self._custodian = None
        self._address_1 = None
        self._address_2 = None
        self._address_3 = None
        self._city = None
        self._state = None
        self._zip_code = None
        self._country = None
        self._acct_type = None
        self._is_tax_deferred = None
        self._is_taxable = None
        self._payment_source = None
        self._first_billable_date = None
        self._billing_splits_ids = None
        self._fee_structures_ids = None
        self._display_name = None
        self._display_number = None
        self._is_direct_billed = None
        self._is_custodian_billed = None
        self._is_active = None
        self._is_closed = None
        self._custodian_name = None
        self._has_custodian_name = None
        self._first_cost_basis_date = None
        self._last_cost_basis_date = None
        self._first_positions_date = None
        self._last_positions_date = None
        self._first_quarantine_date = None
        self._last_reporting_date = None
        self._first_transactions_date = None
        self._last_transactions_date = None
        self._first_funded_date = None
        self._target_allocation_id = None
        self._investment_model_id = None
        self._required_cash = None
        self._advisor_code = None
        self._buy_securities_ids = None
        self._do_not_buy_securities_ids = None
        self._sell_securities_ids = None
        self._do_not_sell_securities_ids = None
        self._notes = None
        self._unsupervised_securities_ids = None
        self._required_cash_frequency = None
        self._first_performance_date = None
        self._first_papered_date = None
        self._last_portfolio_data_date = None
        self._created_at_utc = None
        self._updated_at_utc = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if firm_id is not None:
            self.firm_id = firm_id
        if entity_id is not None:
            self.entity_id = entity_id
        if household_id is not None:
            self.household_id = household_id
        if short_name is not None:
            self.short_name = short_name
        if inception_date is not None:
            self.inception_date = inception_date
        if close_date is not None:
            self.close_date = close_date
        if status is not None:
            self.status = status
        if benchmarks_ids is not None:
            self.benchmarks_ids = benchmarks_ids
        if is_account is not None:
            self.is_account = is_account
        if is_household is not None:
            self.is_household = is_household
        if number is not None:
            self.number = number
        if custodian is not None:
            self.custodian = custodian
        if address_1 is not None:
            self.address_1 = address_1
        if address_2 is not None:
            self.address_2 = address_2
        if address_3 is not None:
            self.address_3 = address_3
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if zip_code is not None:
            self.zip_code = zip_code
        if country is not None:
            self.country = country
        if acct_type is not None:
            self.acct_type = acct_type
        if is_tax_deferred is not None:
            self.is_tax_deferred = is_tax_deferred
        if is_taxable is not None:
            self.is_taxable = is_taxable
        if payment_source is not None:
            self.payment_source = payment_source
        if first_billable_date is not None:
            self.first_billable_date = first_billable_date
        if billing_splits_ids is not None:
            self.billing_splits_ids = billing_splits_ids
        if fee_structures_ids is not None:
            self.fee_structures_ids = fee_structures_ids
        if display_name is not None:
            self.display_name = display_name
        if display_number is not None:
            self.display_number = display_number
        if is_direct_billed is not None:
            self.is_direct_billed = is_direct_billed
        if is_custodian_billed is not None:
            self.is_custodian_billed = is_custodian_billed
        if is_active is not None:
            self.is_active = is_active
        if is_closed is not None:
            self.is_closed = is_closed
        if custodian_name is not None:
            self.custodian_name = custodian_name
        if has_custodian_name is not None:
            self.has_custodian_name = has_custodian_name
        if first_cost_basis_date is not None:
            self.first_cost_basis_date = first_cost_basis_date
        if last_cost_basis_date is not None:
            self.last_cost_basis_date = last_cost_basis_date
        if first_positions_date is not None:
            self.first_positions_date = first_positions_date
        if last_positions_date is not None:
            self.last_positions_date = last_positions_date
        if first_quarantine_date is not None:
            self.first_quarantine_date = first_quarantine_date
        if last_reporting_date is not None:
            self.last_reporting_date = last_reporting_date
        if first_transactions_date is not None:
            self.first_transactions_date = first_transactions_date
        if last_transactions_date is not None:
            self.last_transactions_date = last_transactions_date
        if first_funded_date is not None:
            self.first_funded_date = first_funded_date
        if target_allocation_id is not None:
            self.target_allocation_id = target_allocation_id
        if investment_model_id is not None:
            self.investment_model_id = investment_model_id
        if required_cash is not None:
            self.required_cash = required_cash
        if advisor_code is not None:
            self.advisor_code = advisor_code
        if buy_securities_ids is not None:
            self.buy_securities_ids = buy_securities_ids
        if do_not_buy_securities_ids is not None:
            self.do_not_buy_securities_ids = do_not_buy_securities_ids
        if sell_securities_ids is not None:
            self.sell_securities_ids = sell_securities_ids
        if do_not_sell_securities_ids is not None:
            self.do_not_sell_securities_ids = do_not_sell_securities_ids
        if notes is not None:
            self.notes = notes
        if unsupervised_securities_ids is not None:
            self.unsupervised_securities_ids = unsupervised_securities_ids
        if required_cash_frequency is not None:
            self.required_cash_frequency = required_cash_frequency
        if first_performance_date is not None:
            self.first_performance_date = first_performance_date
        if first_papered_date is not None:
            self.first_papered_date = first_papered_date
        if last_portfolio_data_date is not None:
            self.last_portfolio_data_date = last_portfolio_data_date
        if created_at_utc is not None:
            self.created_at_utc = created_at_utc
        if updated_at_utc is not None:
            self.updated_at_utc = updated_at_utc

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501

        Unique ID for this account object  # noqa: E501

        :return: The id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        Unique ID for this account object  # noqa: E501

        :param id: The id of this Account.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Account.  # noqa: E501

        Populated from custodian data but can be modified by users  # noqa: E501

        :return: The name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        Populated from custodian data but can be modified by users  # noqa: E501

        :param name: The name of this Account.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def firm_id(self):
        """Gets the firm_id of this Account.  # noqa: E501

        ID of the owning firm  # noqa: E501

        :return: The firm_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this Account.

        ID of the owning firm  # noqa: E501

        :param firm_id: The firm_id of this Account.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def entity_id(self):
        """Gets the entity_id of this Account.  # noqa: E501

        See Entity ID Prefixes  # noqa: E501

        :return: The entity_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Account.

        See Entity ID Prefixes  # noqa: E501

        :param entity_id: The entity_id of this Account.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def household_id(self):
        """Gets the household_id of this Account.  # noqa: E501

        Household Id this account belongs to  # noqa: E501

        :return: The household_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._household_id

    @household_id.setter
    def household_id(self, household_id):
        """Sets the household_id of this Account.

        Household Id this account belongs to  # noqa: E501

        :param household_id: The household_id of this Account.  # noqa: E501
        :type: int
        """

        self._household_id = household_id

    @property
    def short_name(self):
        """Gets the short_name of this Account.  # noqa: E501

        The account short name or \"SNAM\"  # noqa: E501

        :return: The short_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Account.

        The account short name or \"SNAM\"  # noqa: E501

        :param short_name: The short_name of this Account.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def inception_date(self):
        """Gets the inception_date of this Account.  # noqa: E501

        Date of account inception, if applicable. May differ from opening date.  # noqa: E501

        :return: The inception_date of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._inception_date

    @inception_date.setter
    def inception_date(self, inception_date):
        """Sets the inception_date of this Account.

        Date of account inception, if applicable. May differ from opening date.  # noqa: E501

        :param inception_date: The inception_date of this Account.  # noqa: E501
        :type: datetime
        """

        self._inception_date = inception_date

    @property
    def close_date(self):
        """Gets the close_date of this Account.  # noqa: E501

        Date the account was closed, if applicable  # noqa: E501

        :return: The close_date of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date):
        """Sets the close_date of this Account.

        Date the account was closed, if applicable  # noqa: E501

        :param close_date: The close_date of this Account.  # noqa: E501
        :type: datetime
        """

        self._close_date = close_date

    @property
    def status(self):
        """Gets the status of this Account.  # noqa: E501

        Status of the account object. It can be funded, papered, closed or slate. Funded account is considered active account, Papered or Closed account is inactive, and Stale is unknown  # noqa: E501

        :return: The status of this Account.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Account.

        Status of the account object. It can be funded, papered, closed or slate. Funded account is considered active account, Papered or Closed account is inactive, and Stale is unknown  # noqa: E501

        :param status: The status of this Account.  # noqa: E501
        :type: str
        """
        allowed_values = ["funded", "papered", "closed", "stale", ""]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def benchmarks_ids(self):
        """Gets the benchmarks_ids of this Account.  # noqa: E501

        List of ids for benchmarks associated with the account  # noqa: E501

        :return: The benchmarks_ids of this Account.  # noqa: E501
        :rtype: list[int]
        """
        return self._benchmarks_ids

    @benchmarks_ids.setter
    def benchmarks_ids(self, benchmarks_ids):
        """Sets the benchmarks_ids of this Account.

        List of ids for benchmarks associated with the account  # noqa: E501

        :param benchmarks_ids: The benchmarks_ids of this Account.  # noqa: E501
        :type: list[int]
        """

        self._benchmarks_ids = benchmarks_ids

    @property
    def is_account(self):
        """Gets the is_account of this Account.  # noqa: E501

        Is this entity an account? (Yes)  # noqa: E501

        :return: The is_account of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_account

    @is_account.setter
    def is_account(self, is_account):
        """Sets the is_account of this Account.

        Is this entity an account? (Yes)  # noqa: E501

        :param is_account: The is_account of this Account.  # noqa: E501
        :type: bool
        """

        self._is_account = is_account

    @property
    def is_household(self):
        """Gets the is_household of this Account.  # noqa: E501

        Is this entity a household? (No)  # noqa: E501

        :return: The is_household of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_household

    @is_household.setter
    def is_household(self, is_household):
        """Sets the is_household of this Account.

        Is this entity a household? (No)  # noqa: E501

        :param is_household: The is_household of this Account.  # noqa: E501
        :type: bool
        """

        self._is_household = is_household

    @property
    def number(self):
        """Gets the number of this Account.  # noqa: E501

        Account number  # noqa: E501

        :return: The number of this Account.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Account.

        Account number  # noqa: E501

        :param number: The number of this Account.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def custodian(self):
        """Gets the custodian of this Account.  # noqa: E501

        Custodian the account data comes from. TDA=TD Ameritrade, SWB=Schwab, NFS=Fidelity, PER=Pershing, MLT=MillenniumTrust, RJA=RaymondJames, HDG=Manual  # noqa: E501

        :return: The custodian of this Account.  # noqa: E501
        :rtype: str
        """
        return self._custodian

    @custodian.setter
    def custodian(self, custodian):
        """Sets the custodian of this Account.

        Custodian the account data comes from. TDA=TD Ameritrade, SWB=Schwab, NFS=Fidelity, PER=Pershing, MLT=MillenniumTrust, RJA=RaymondJames, HDG=Manual  # noqa: E501

        :param custodian: The custodian of this Account.  # noqa: E501
        :type: str
        """
        allowed_values = ["TDA", "SWB", "NFS", "PER", "DST", "MLT", "RJA", "HDG", ""]  # noqa: E501
        if custodian not in allowed_values:
            raise ValueError(
                "Invalid value for `custodian` ({0}), must be one of {1}"  # noqa: E501
                .format(custodian, allowed_values)
            )

        self._custodian = custodian

    @property
    def address_1(self):
        """Gets the address_1 of this Account.  # noqa: E501

        First line address  # noqa: E501

        :return: The address_1 of this Account.  # noqa: E501
        :rtype: str
        """
        return self._address_1

    @address_1.setter
    def address_1(self, address_1):
        """Sets the address_1 of this Account.

        First line address  # noqa: E501

        :param address_1: The address_1 of this Account.  # noqa: E501
        :type: str
        """

        self._address_1 = address_1

    @property
    def address_2(self):
        """Gets the address_2 of this Account.  # noqa: E501

        Second line address  # noqa: E501

        :return: The address_2 of this Account.  # noqa: E501
        :rtype: str
        """
        return self._address_2

    @address_2.setter
    def address_2(self, address_2):
        """Sets the address_2 of this Account.

        Second line address  # noqa: E501

        :param address_2: The address_2 of this Account.  # noqa: E501
        :type: str
        """

        self._address_2 = address_2

    @property
    def address_3(self):
        """Gets the address_3 of this Account.  # noqa: E501

        Third line address  # noqa: E501

        :return: The address_3 of this Account.  # noqa: E501
        :rtype: str
        """
        return self._address_3

    @address_3.setter
    def address_3(self, address_3):
        """Sets the address_3 of this Account.

        Third line address  # noqa: E501

        :param address_3: The address_3 of this Account.  # noqa: E501
        :type: str
        """

        self._address_3 = address_3

    @property
    def city(self):
        """Gets the city of this Account.  # noqa: E501

        City of the account-holder  # noqa: E501

        :return: The city of this Account.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Account.

        City of the account-holder  # noqa: E501

        :param city: The city of this Account.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this Account.  # noqa: E501

        State of the account-holder  # noqa: E501

        :return: The state of this Account.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Account.

        State of the account-holder  # noqa: E501

        :param state: The state of this Account.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zip_code(self):
        """Gets the zip_code of this Account.  # noqa: E501

        Zip code of the account-holder  # noqa: E501

        :return: The zip_code of this Account.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Account.

        Zip code of the account-holder  # noqa: E501

        :param zip_code: The zip_code of this Account.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def country(self):
        """Gets the country of this Account.  # noqa: E501

        Country of the account-holder  # noqa: E501

        :return: The country of this Account.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Account.

        Country of the account-holder  # noqa: E501

        :param country: The country of this Account.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def acct_type(self):
        """Gets the acct_type of this Account.  # noqa: E501

        Type of account. Example, IRA Roth, 401k, etc.  # noqa: E501

        :return: The acct_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._acct_type

    @acct_type.setter
    def acct_type(self, acct_type):
        """Sets the acct_type of this Account.

        Type of account. Example, IRA Roth, 401k, etc.  # noqa: E501

        :param acct_type: The acct_type of this Account.  # noqa: E501
        :type: str
        """

        self._acct_type = acct_type

    @property
    def is_tax_deferred(self):
        """Gets the is_tax_deferred of this Account.  # noqa: E501

        True if this account is tax deferrable. This data is typically provided by the financial institution  # noqa: E501

        :return: The is_tax_deferred of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_tax_deferred

    @is_tax_deferred.setter
    def is_tax_deferred(self, is_tax_deferred):
        """Sets the is_tax_deferred of this Account.

        True if this account is tax deferrable. This data is typically provided by the financial institution  # noqa: E501

        :param is_tax_deferred: The is_tax_deferred of this Account.  # noqa: E501
        :type: bool
        """

        self._is_tax_deferred = is_tax_deferred

    @property
    def is_taxable(self):
        """Gets the is_taxable of this Account.  # noqa: E501

        True if this account is taxable. This data is typically provided by the financial insitution  # noqa: E501

        :return: The is_taxable of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_taxable

    @is_taxable.setter
    def is_taxable(self, is_taxable):
        """Sets the is_taxable of this Account.

        True if this account is taxable. This data is typically provided by the financial insitution  # noqa: E501

        :param is_taxable: The is_taxable of this Account.  # noqa: E501
        :type: bool
        """

        self._is_taxable = is_taxable

    @property
    def payment_source(self):
        """Gets the payment_source of this Account.  # noqa: E501

        C=billed at the custodian D=billed directly  # noqa: E501

        :return: The payment_source of this Account.  # noqa: E501
        :rtype: str
        """
        return self._payment_source

    @payment_source.setter
    def payment_source(self, payment_source):
        """Sets the payment_source of this Account.

        C=billed at the custodian D=billed directly  # noqa: E501

        :param payment_source: The payment_source of this Account.  # noqa: E501
        :type: str
        """
        allowed_values = ["C", "D", ""]  # noqa: E501
        if payment_source not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_source` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_source, allowed_values)
            )

        self._payment_source = payment_source

    @property
    def first_billable_date(self):
        """Gets the first_billable_date of this Account.  # noqa: E501

        The date at which this account begins accruing advisor fees  # noqa: E501

        :return: The first_billable_date of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._first_billable_date

    @first_billable_date.setter
    def first_billable_date(self, first_billable_date):
        """Sets the first_billable_date of this Account.

        The date at which this account begins accruing advisor fees  # noqa: E501

        :param first_billable_date: The first_billable_date of this Account.  # noqa: E501
        :type: datetime
        """

        self._first_billable_date = first_billable_date

    @property
    def billing_splits_ids(self):
        """Gets the billing_splits_ids of this Account.  # noqa: E501

        List of ids of splits associated with this account  # noqa: E501

        :return: The billing_splits_ids of this Account.  # noqa: E501
        :rtype: list[int]
        """
        return self._billing_splits_ids

    @billing_splits_ids.setter
    def billing_splits_ids(self, billing_splits_ids):
        """Sets the billing_splits_ids of this Account.

        List of ids of splits associated with this account  # noqa: E501

        :param billing_splits_ids: The billing_splits_ids of this Account.  # noqa: E501
        :type: list[int]
        """

        self._billing_splits_ids = billing_splits_ids

    @property
    def fee_structures_ids(self):
        """Gets the fee_structures_ids of this Account.  # noqa: E501

        List of ids of fee structures associated with this account  # noqa: E501

        :return: The fee_structures_ids of this Account.  # noqa: E501
        :rtype: list[int]
        """
        return self._fee_structures_ids

    @fee_structures_ids.setter
    def fee_structures_ids(self, fee_structures_ids):
        """Sets the fee_structures_ids of this Account.

        List of ids of fee structures associated with this account  # noqa: E501

        :param fee_structures_ids: The fee_structures_ids of this Account.  # noqa: E501
        :type: list[int]
        """

        self._fee_structures_ids = fee_structures_ids

    @property
    def display_name(self):
        """Gets the display_name of this Account.  # noqa: E501

        Display name of the account  # noqa: E501

        :return: The display_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Account.

        Display name of the account  # noqa: E501

        :param display_name: The display_name of this Account.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def display_number(self):
        """Gets the display_number of this Account.  # noqa: E501

        Display number of the account  # noqa: E501

        :return: The display_number of this Account.  # noqa: E501
        :rtype: str
        """
        return self._display_number

    @display_number.setter
    def display_number(self, display_number):
        """Sets the display_number of this Account.

        Display number of the account  # noqa: E501

        :param display_number: The display_number of this Account.  # noqa: E501
        :type: str
        """

        self._display_number = display_number

    @property
    def is_direct_billed(self):
        """Gets the is_direct_billed of this Account.  # noqa: E501

        Is this account directly billed?  # noqa: E501

        :return: The is_direct_billed of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_direct_billed

    @is_direct_billed.setter
    def is_direct_billed(self, is_direct_billed):
        """Sets the is_direct_billed of this Account.

        Is this account directly billed?  # noqa: E501

        :param is_direct_billed: The is_direct_billed of this Account.  # noqa: E501
        :type: bool
        """

        self._is_direct_billed = is_direct_billed

    @property
    def is_custodian_billed(self):
        """Gets the is_custodian_billed of this Account.  # noqa: E501

        Is this account billed at the custodian level?  # noqa: E501

        :return: The is_custodian_billed of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_custodian_billed

    @is_custodian_billed.setter
    def is_custodian_billed(self, is_custodian_billed):
        """Sets the is_custodian_billed of this Account.

        Is this account billed at the custodian level?  # noqa: E501

        :param is_custodian_billed: The is_custodian_billed of this Account.  # noqa: E501
        :type: bool
        """

        self._is_custodian_billed = is_custodian_billed

    @property
    def is_active(self):
        """Gets the is_active of this Account.  # noqa: E501

        Is this an active account?  # noqa: E501

        :return: The is_active of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Account.

        Is this an active account?  # noqa: E501

        :param is_active: The is_active of this Account.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_closed(self):
        """Gets the is_closed of this Account.  # noqa: E501

        Is this a closed account?  # noqa: E501

        :return: The is_closed of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this Account.

        Is this a closed account?  # noqa: E501

        :param is_closed: The is_closed of this Account.  # noqa: E501
        :type: bool
        """

        self._is_closed = is_closed

    @property
    def custodian_name(self):
        """Gets the custodian_name of this Account.  # noqa: E501

        Full name of the custodian the account data comes from  # noqa: E501

        :return: The custodian_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._custodian_name

    @custodian_name.setter
    def custodian_name(self, custodian_name):
        """Sets the custodian_name of this Account.

        Full name of the custodian the account data comes from  # noqa: E501

        :param custodian_name: The custodian_name of this Account.  # noqa: E501
        :type: str
        """

        self._custodian_name = custodian_name

    @property
    def has_custodian_name(self):
        """Gets the has_custodian_name of this Account.  # noqa: E501

        Does this account have a custodian name?  # noqa: E501

        :return: The has_custodian_name of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._has_custodian_name

    @has_custodian_name.setter
    def has_custodian_name(self, has_custodian_name):
        """Sets the has_custodian_name of this Account.

        Does this account have a custodian name?  # noqa: E501

        :param has_custodian_name: The has_custodian_name of this Account.  # noqa: E501
        :type: bool
        """

        self._has_custodian_name = has_custodian_name

    @property
    def first_cost_basis_date(self):
        """Gets the first_cost_basis_date of this Account.  # noqa: E501

        First date when cost basis information is known for this account  # noqa: E501

        :return: The first_cost_basis_date of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._first_cost_basis_date

    @first_cost_basis_date.setter
    def first_cost_basis_date(self, first_cost_basis_date):
        """Sets the first_cost_basis_date of this Account.

        First date when cost basis information is known for this account  # noqa: E501

        :param first_cost_basis_date: The first_cost_basis_date of this Account.  # noqa: E501
        :type: datetime
        """

        self._first_cost_basis_date = first_cost_basis_date

    @property
    def last_cost_basis_date(self):
        """Gets the last_cost_basis_date of this Account.  # noqa: E501

        Most recent date when cost basis information is known for this account  # noqa: E501

        :return: The last_cost_basis_date of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._last_cost_basis_date

    @last_cost_basis_date.setter
    def last_cost_basis_date(self, last_cost_basis_date):
        """Sets the last_cost_basis_date of this Account.

        Most recent date when cost basis information is known for this account  # noqa: E501

        :param last_cost_basis_date: The last_cost_basis_date of this Account.  # noqa: E501
        :type: datetime
        """

        self._last_cost_basis_date = last_cost_basis_date

    @property
    def first_positions_date(self):
        """Gets the first_positions_date of this Account.  # noqa: E501

        First date when positions information is known for this account  # noqa: E501

        :return: The first_positions_date of this Account.  # noqa: E501
        :rtype: date
        """
        return self._first_positions_date

    @first_positions_date.setter
    def first_positions_date(self, first_positions_date):
        """Sets the first_positions_date of this Account.

        First date when positions information is known for this account  # noqa: E501

        :param first_positions_date: The first_positions_date of this Account.  # noqa: E501
        :type: date
        """

        self._first_positions_date = first_positions_date

    @property
    def last_positions_date(self):
        """Gets the last_positions_date of this Account.  # noqa: E501

        Most recent date when positions information is known for this account  # noqa: E501

        :return: The last_positions_date of this Account.  # noqa: E501
        :rtype: date
        """
        return self._last_positions_date

    @last_positions_date.setter
    def last_positions_date(self, last_positions_date):
        """Sets the last_positions_date of this Account.

        Most recent date when positions information is known for this account  # noqa: E501

        :param last_positions_date: The last_positions_date of this Account.  # noqa: E501
        :type: date
        """

        self._last_positions_date = last_positions_date

    @property
    def first_quarantine_date(self):
        """Gets the first_quarantine_date of this Account.  # noqa: E501

        Earliest date at which this account was quarantined for data reconciliation, or null if it's not currently quarantined  # noqa: E501

        :return: The first_quarantine_date of this Account.  # noqa: E501
        :rtype: date
        """
        return self._first_quarantine_date

    @first_quarantine_date.setter
    def first_quarantine_date(self, first_quarantine_date):
        """Sets the first_quarantine_date of this Account.

        Earliest date at which this account was quarantined for data reconciliation, or null if it's not currently quarantined  # noqa: E501

        :param first_quarantine_date: The first_quarantine_date of this Account.  # noqa: E501
        :type: date
        """

        self._first_quarantine_date = first_quarantine_date

    @property
    def last_reporting_date(self):
        """Gets the last_reporting_date of this Account.  # noqa: E501

        Lastest date when the reporting information was recorded for this account  # noqa: E501

        :return: The last_reporting_date of this Account.  # noqa: E501
        :rtype: date
        """
        return self._last_reporting_date

    @last_reporting_date.setter
    def last_reporting_date(self, last_reporting_date):
        """Sets the last_reporting_date of this Account.

        Lastest date when the reporting information was recorded for this account  # noqa: E501

        :param last_reporting_date: The last_reporting_date of this Account.  # noqa: E501
        :type: date
        """

        self._last_reporting_date = last_reporting_date

    @property
    def first_transactions_date(self):
        """Gets the first_transactions_date of this Account.  # noqa: E501

        First date when transaction information was recorded for this account  # noqa: E501

        :return: The first_transactions_date of this Account.  # noqa: E501
        :rtype: date
        """
        return self._first_transactions_date

    @first_transactions_date.setter
    def first_transactions_date(self, first_transactions_date):
        """Sets the first_transactions_date of this Account.

        First date when transaction information was recorded for this account  # noqa: E501

        :param first_transactions_date: The first_transactions_date of this Account.  # noqa: E501
        :type: date
        """

        self._first_transactions_date = first_transactions_date

    @property
    def last_transactions_date(self):
        """Gets the last_transactions_date of this Account.  # noqa: E501

        Latest date when transaction information was recorded for this account  # noqa: E501

        :return: The last_transactions_date of this Account.  # noqa: E501
        :rtype: date
        """
        return self._last_transactions_date

    @last_transactions_date.setter
    def last_transactions_date(self, last_transactions_date):
        """Sets the last_transactions_date of this Account.

        Latest date when transaction information was recorded for this account  # noqa: E501

        :param last_transactions_date: The last_transactions_date of this Account.  # noqa: E501
        :type: date
        """

        self._last_transactions_date = last_transactions_date

    @property
    def first_funded_date(self):
        """Gets the first_funded_date of this Account.  # noqa: E501

        Date when the account was first funded  # noqa: E501

        :return: The first_funded_date of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._first_funded_date

    @first_funded_date.setter
    def first_funded_date(self, first_funded_date):
        """Sets the first_funded_date of this Account.

        Date when the account was first funded  # noqa: E501

        :param first_funded_date: The first_funded_date of this Account.  # noqa: E501
        :type: datetime
        """

        self._first_funded_date = first_funded_date

    @property
    def target_allocation_id(self):
        """Gets the target_allocation_id of this Account.  # noqa: E501

        Target allocation id associated with this account  # noqa: E501

        :return: The target_allocation_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._target_allocation_id

    @target_allocation_id.setter
    def target_allocation_id(self, target_allocation_id):
        """Sets the target_allocation_id of this Account.

        Target allocation id associated with this account  # noqa: E501

        :param target_allocation_id: The target_allocation_id of this Account.  # noqa: E501
        :type: int
        """

        self._target_allocation_id = target_allocation_id

    @property
    def investment_model_id(self):
        """Gets the investment_model_id of this Account.  # noqa: E501

        Investment model id associated with this account  # noqa: E501

        :return: The investment_model_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._investment_model_id

    @investment_model_id.setter
    def investment_model_id(self, investment_model_id):
        """Sets the investment_model_id of this Account.

        Investment model id associated with this account  # noqa: E501

        :param investment_model_id: The investment_model_id of this Account.  # noqa: E501
        :type: int
        """

        self._investment_model_id = investment_model_id

    @property
    def required_cash(self):
        """Gets the required_cash of this Account.  # noqa: E501

        Required cash amount in dollars to be set aside for withdrawals  # noqa: E501

        :return: The required_cash of this Account.  # noqa: E501
        :rtype: float
        """
        return self._required_cash

    @required_cash.setter
    def required_cash(self, required_cash):
        """Sets the required_cash of this Account.

        Required cash amount in dollars to be set aside for withdrawals  # noqa: E501

        :param required_cash: The required_cash of this Account.  # noqa: E501
        :type: float
        """

        self._required_cash = required_cash

    @property
    def advisor_code(self):
        """Gets the advisor_code of this Account.  # noqa: E501

        Advisor code for this account object  # noqa: E501

        :return: The advisor_code of this Account.  # noqa: E501
        :rtype: str
        """
        return self._advisor_code

    @advisor_code.setter
    def advisor_code(self, advisor_code):
        """Sets the advisor_code of this Account.

        Advisor code for this account object  # noqa: E501

        :param advisor_code: The advisor_code of this Account.  # noqa: E501
        :type: str
        """

        self._advisor_code = advisor_code

    @property
    def buy_securities_ids(self):
        """Gets the buy_securities_ids of this Account.  # noqa: E501

        Securities specifically to buy  # noqa: E501

        :return: The buy_securities_ids of this Account.  # noqa: E501
        :rtype: list[int]
        """
        return self._buy_securities_ids

    @buy_securities_ids.setter
    def buy_securities_ids(self, buy_securities_ids):
        """Sets the buy_securities_ids of this Account.

        Securities specifically to buy  # noqa: E501

        :param buy_securities_ids: The buy_securities_ids of this Account.  # noqa: E501
        :type: list[int]
        """

        self._buy_securities_ids = buy_securities_ids

    @property
    def do_not_buy_securities_ids(self):
        """Gets the do_not_buy_securities_ids of this Account.  # noqa: E501

        Securities specifically to not buy  # noqa: E501

        :return: The do_not_buy_securities_ids of this Account.  # noqa: E501
        :rtype: list[int]
        """
        return self._do_not_buy_securities_ids

    @do_not_buy_securities_ids.setter
    def do_not_buy_securities_ids(self, do_not_buy_securities_ids):
        """Sets the do_not_buy_securities_ids of this Account.

        Securities specifically to not buy  # noqa: E501

        :param do_not_buy_securities_ids: The do_not_buy_securities_ids of this Account.  # noqa: E501
        :type: list[int]
        """

        self._do_not_buy_securities_ids = do_not_buy_securities_ids

    @property
    def sell_securities_ids(self):
        """Gets the sell_securities_ids of this Account.  # noqa: E501

        Securities specifically to sell  # noqa: E501

        :return: The sell_securities_ids of this Account.  # noqa: E501
        :rtype: list[int]
        """
        return self._sell_securities_ids

    @sell_securities_ids.setter
    def sell_securities_ids(self, sell_securities_ids):
        """Sets the sell_securities_ids of this Account.

        Securities specifically to sell  # noqa: E501

        :param sell_securities_ids: The sell_securities_ids of this Account.  # noqa: E501
        :type: list[int]
        """

        self._sell_securities_ids = sell_securities_ids

    @property
    def do_not_sell_securities_ids(self):
        """Gets the do_not_sell_securities_ids of this Account.  # noqa: E501

        Securities specifically to not sell  # noqa: E501

        :return: The do_not_sell_securities_ids of this Account.  # noqa: E501
        :rtype: list[int]
        """
        return self._do_not_sell_securities_ids

    @do_not_sell_securities_ids.setter
    def do_not_sell_securities_ids(self, do_not_sell_securities_ids):
        """Sets the do_not_sell_securities_ids of this Account.

        Securities specifically to not sell  # noqa: E501

        :param do_not_sell_securities_ids: The do_not_sell_securities_ids of this Account.  # noqa: E501
        :type: list[int]
        """

        self._do_not_sell_securities_ids = do_not_sell_securities_ids

    @property
    def notes(self):
        """Gets the notes of this Account.  # noqa: E501

        General notes on account entered by user  # noqa: E501

        :return: The notes of this Account.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Account.

        General notes on account entered by user  # noqa: E501

        :param notes: The notes of this Account.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def unsupervised_securities_ids(self):
        """Gets the unsupervised_securities_ids of this Account.  # noqa: E501

        Securities to be excluded in trading integrations (e.g. rebalancing calculations)  # noqa: E501

        :return: The unsupervised_securities_ids of this Account.  # noqa: E501
        :rtype: list[int]
        """
        return self._unsupervised_securities_ids

    @unsupervised_securities_ids.setter
    def unsupervised_securities_ids(self, unsupervised_securities_ids):
        """Sets the unsupervised_securities_ids of this Account.

        Securities to be excluded in trading integrations (e.g. rebalancing calculations)  # noqa: E501

        :param unsupervised_securities_ids: The unsupervised_securities_ids of this Account.  # noqa: E501
        :type: list[int]
        """

        self._unsupervised_securities_ids = unsupervised_securities_ids

    @property
    def required_cash_frequency(self):
        """Gets the required_cash_frequency of this Account.  # noqa: E501

        Required cash frequency for this account object. M for monthly, Q for quarterly, O for one time  # noqa: E501

        :return: The required_cash_frequency of this Account.  # noqa: E501
        :rtype: str
        """
        return self._required_cash_frequency

    @required_cash_frequency.setter
    def required_cash_frequency(self, required_cash_frequency):
        """Sets the required_cash_frequency of this Account.

        Required cash frequency for this account object. M for monthly, Q for quarterly, O for one time  # noqa: E501

        :param required_cash_frequency: The required_cash_frequency of this Account.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "M", "Q", "O"]  # noqa: E501
        if required_cash_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `required_cash_frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(required_cash_frequency, allowed_values)
            )

        self._required_cash_frequency = required_cash_frequency

    @property
    def first_performance_date(self):
        """Gets the first_performance_date of this Account.  # noqa: E501

        First performance date for this account  # noqa: E501

        :return: The first_performance_date of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._first_performance_date

    @first_performance_date.setter
    def first_performance_date(self, first_performance_date):
        """Sets the first_performance_date of this Account.

        First performance date for this account  # noqa: E501

        :param first_performance_date: The first_performance_date of this Account.  # noqa: E501
        :type: datetime
        """

        self._first_performance_date = first_performance_date

    @property
    def first_papered_date(self):
        """Gets the first_papered_date of this Account.  # noqa: E501

        Date when the account was first papered  # noqa: E501

        :return: The first_papered_date of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._first_papered_date

    @first_papered_date.setter
    def first_papered_date(self, first_papered_date):
        """Sets the first_papered_date of this Account.

        Date when the account was first papered  # noqa: E501

        :param first_papered_date: The first_papered_date of this Account.  # noqa: E501
        :type: datetime
        """

        self._first_papered_date = first_papered_date

    @property
    def last_portfolio_data_date(self):
        """Gets the last_portfolio_data_date of this Account.  # noqa: E501

        Date for the last portfolio data for this account object  # noqa: E501

        :return: The last_portfolio_data_date of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._last_portfolio_data_date

    @last_portfolio_data_date.setter
    def last_portfolio_data_date(self, last_portfolio_data_date):
        """Sets the last_portfolio_data_date of this Account.

        Date for the last portfolio data for this account object  # noqa: E501

        :param last_portfolio_data_date: The last_portfolio_data_date of this Account.  # noqa: E501
        :type: datetime
        """

        self._last_portfolio_data_date = last_portfolio_data_date

    @property
    def created_at_utc(self):
        """Gets the created_at_utc of this Account.  # noqa: E501

        Timestamp for when the record was created  # noqa: E501

        :return: The created_at_utc of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at_utc

    @created_at_utc.setter
    def created_at_utc(self, created_at_utc):
        """Sets the created_at_utc of this Account.

        Timestamp for when the record was created  # noqa: E501

        :param created_at_utc: The created_at_utc of this Account.  # noqa: E501
        :type: datetime
        """

        self._created_at_utc = created_at_utc

    @property
    def updated_at_utc(self):
        """Gets the updated_at_utc of this Account.  # noqa: E501

        Timestamp for when the record was updated  # noqa: E501

        :return: The updated_at_utc of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at_utc

    @updated_at_utc.setter
    def updated_at_utc(self, updated_at_utc):
        """Sets the updated_at_utc of this Account.

        Timestamp for when the record was updated  # noqa: E501

        :param updated_at_utc: The updated_at_utc of this Account.  # noqa: E501
        :type: datetime
        """

        self._updated_at_utc = updated_at_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

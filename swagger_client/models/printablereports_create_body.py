# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrintablereportsCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_ids': 'list[str]',
        'standard_period_month': 'str',
        'standard_period_year': 'str',
        'standard_period_frequency': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'email_notification': 'bool',
        'client_accessible': 'bool',
        'tags': 'list[str]',
        'sub_reports': 'list[str]',
        'web_report': 'bool'
    }

    attribute_map = {
        'entity_ids': 'entity_ids',
        'standard_period_month': 'standard_period_month',
        'standard_period_year': 'standard_period_year',
        'standard_period_frequency': 'standard_period_frequency',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'email_notification': 'email_notification',
        'client_accessible': 'client_accessible',
        'tags': 'tags',
        'sub_reports': 'sub_reports',
        'web_report': 'web_report'
    }

    def __init__(self, entity_ids=None, standard_period_month=None, standard_period_year=None, standard_period_frequency=None, start_date=None, end_date=None, email_notification=None, client_accessible=None, tags=None, sub_reports=None, web_report=None):  # noqa: E501
        """PrintablereportsCreateBody - a model defined in Swagger"""  # noqa: E501
        self._entity_ids = None
        self._standard_period_month = None
        self._standard_period_year = None
        self._standard_period_frequency = None
        self._start_date = None
        self._end_date = None
        self._email_notification = None
        self._client_accessible = None
        self._tags = None
        self._sub_reports = None
        self._web_report = None
        self.discriminator = None
        if entity_ids is not None:
            self.entity_ids = entity_ids
        if standard_period_month is not None:
            self.standard_period_month = standard_period_month
        if standard_period_year is not None:
            self.standard_period_year = standard_period_year
        if standard_period_frequency is not None:
            self.standard_period_frequency = standard_period_frequency
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if email_notification is not None:
            self.email_notification = email_notification
        if client_accessible is not None:
            self.client_accessible = client_accessible
        if tags is not None:
            self.tags = tags
        if sub_reports is not None:
            self.sub_reports = sub_reports
        if web_report is not None:
            self.web_report = web_report

    @property
    def entity_ids(self):
        """Gets the entity_ids of this PrintablereportsCreateBody.  # noqa: E501

        List of Entity ids to run a PDF Report for  # noqa: E501

        :return: The entity_ids of this PrintablereportsCreateBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._entity_ids

    @entity_ids.setter
    def entity_ids(self, entity_ids):
        """Sets the entity_ids of this PrintablereportsCreateBody.

        List of Entity ids to run a PDF Report for  # noqa: E501

        :param entity_ids: The entity_ids of this PrintablereportsCreateBody.  # noqa: E501
        :type: list[str]
        """

        self._entity_ids = entity_ids

    @property
    def standard_period_month(self):
        """Gets the standard_period_month of this PrintablereportsCreateBody.  # noqa: E501

        The standard period month for the PDF Report job  # noqa: E501

        :return: The standard_period_month of this PrintablereportsCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._standard_period_month

    @standard_period_month.setter
    def standard_period_month(self, standard_period_month):
        """Sets the standard_period_month of this PrintablereportsCreateBody.

        The standard period month for the PDF Report job  # noqa: E501

        :param standard_period_month: The standard_period_month of this PrintablereportsCreateBody.  # noqa: E501
        :type: str
        """

        self._standard_period_month = standard_period_month

    @property
    def standard_period_year(self):
        """Gets the standard_period_year of this PrintablereportsCreateBody.  # noqa: E501

        The standard period year for the PDF Report job  # noqa: E501

        :return: The standard_period_year of this PrintablereportsCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._standard_period_year

    @standard_period_year.setter
    def standard_period_year(self, standard_period_year):
        """Sets the standard_period_year of this PrintablereportsCreateBody.

        The standard period year for the PDF Report job  # noqa: E501

        :param standard_period_year: The standard_period_year of this PrintablereportsCreateBody.  # noqa: E501
        :type: str
        """

        self._standard_period_year = standard_period_year

    @property
    def standard_period_frequency(self):
        """Gets the standard_period_frequency of this PrintablereportsCreateBody.  # noqa: E501

        The standard period frequency for the PDF Report job  # noqa: E501

        :return: The standard_period_frequency of this PrintablereportsCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._standard_period_frequency

    @standard_period_frequency.setter
    def standard_period_frequency(self, standard_period_frequency):
        """Sets the standard_period_frequency of this PrintablereportsCreateBody.

        The standard period frequency for the PDF Report job  # noqa: E501

        :param standard_period_frequency: The standard_period_frequency of this PrintablereportsCreateBody.  # noqa: E501
        :type: str
        """

        self._standard_period_frequency = standard_period_frequency

    @property
    def start_date(self):
        """Gets the start_date of this PrintablereportsCreateBody.  # noqa: E501

        Date to start the PDF Report calculations for this job  # noqa: E501

        :return: The start_date of this PrintablereportsCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PrintablereportsCreateBody.

        Date to start the PDF Report calculations for this job  # noqa: E501

        :param start_date: The start_date of this PrintablereportsCreateBody.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this PrintablereportsCreateBody.  # noqa: E501

        Date to end the PDF Report calculations for this job  # noqa: E501

        :return: The end_date of this PrintablereportsCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PrintablereportsCreateBody.

        Date to end the PDF Report calculations for this job  # noqa: E501

        :param end_date: The end_date of this PrintablereportsCreateBody.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def email_notification(self):
        """Gets the email_notification of this PrintablereportsCreateBody.  # noqa: E501


        :return: The email_notification of this PrintablereportsCreateBody.  # noqa: E501
        :rtype: bool
        """
        return self._email_notification

    @email_notification.setter
    def email_notification(self, email_notification):
        """Sets the email_notification of this PrintablereportsCreateBody.


        :param email_notification: The email_notification of this PrintablereportsCreateBody.  # noqa: E501
        :type: bool
        """

        self._email_notification = email_notification

    @property
    def client_accessible(self):
        """Gets the client_accessible of this PrintablereportsCreateBody.  # noqa: E501

        Whether to allow client accessibility or not  # noqa: E501

        :return: The client_accessible of this PrintablereportsCreateBody.  # noqa: E501
        :rtype: bool
        """
        return self._client_accessible

    @client_accessible.setter
    def client_accessible(self, client_accessible):
        """Sets the client_accessible of this PrintablereportsCreateBody.

        Whether to allow client accessibility or not  # noqa: E501

        :param client_accessible: The client_accessible of this PrintablereportsCreateBody.  # noqa: E501
        :type: bool
        """

        self._client_accessible = client_accessible

    @property
    def tags(self):
        """Gets the tags of this PrintablereportsCreateBody.  # noqa: E501

        The tags used in generating the PDF Report  # noqa: E501

        :return: The tags of this PrintablereportsCreateBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PrintablereportsCreateBody.

        The tags used in generating the PDF Report  # noqa: E501

        :param tags: The tags of this PrintablereportsCreateBody.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def sub_reports(self):
        """Gets the sub_reports of this PrintablereportsCreateBody.  # noqa: E501

        The list of sub reports to create during PDF Report generation  # noqa: E501

        :return: The sub_reports of this PrintablereportsCreateBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._sub_reports

    @sub_reports.setter
    def sub_reports(self, sub_reports):
        """Sets the sub_reports of this PrintablereportsCreateBody.

        The list of sub reports to create during PDF Report generation  # noqa: E501

        :param sub_reports: The sub_reports of this PrintablereportsCreateBody.  # noqa: E501
        :type: list[str]
        """

        self._sub_reports = sub_reports

    @property
    def web_report(self):
        """Gets the web_report of this PrintablereportsCreateBody.  # noqa: E501

        Whether or not to generate a Web Report instead of a PDF Report.  # noqa: E501

        :return: The web_report of this PrintablereportsCreateBody.  # noqa: E501
        :rtype: bool
        """
        return self._web_report

    @web_report.setter
    def web_report(self, web_report):
        """Sets the web_report of this PrintablereportsCreateBody.

        Whether or not to generate a Web Report instead of a PDF Report.  # noqa: E501

        :param web_report: The web_report of this PrintablereportsCreateBody.  # noqa: E501
        :type: bool
        """

        self._web_report = web_report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrintablereportsCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrintablereportsCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

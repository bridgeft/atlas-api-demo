# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20048Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'firm_id': 'int',
        'account_id': 'int',
        'household_id': 'int',
        'created_by_user_id': 'int',
        'report_date': 'datetime',
        'frequency': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'timestamp_utc': 'datetime',
        'dt_utc': 'datetime',
        'size_bytes': 'int',
        'client_accessible': 'bool',
        'tags': 'list[str]',
        'sub_reports': 'list[str]',
        'state': 'str',
        'error_message': 'str',
        'download_url': 'str',
        'created_at_utc': 'datetime',
        'updated_at_utc': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'firm_id': 'firm_id',
        'account_id': 'account_id',
        'household_id': 'household_id',
        'created_by_user_id': 'created_by_user_id',
        'report_date': 'report_date',
        'frequency': 'frequency',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'timestamp_utc': 'timestamp_utc',
        'dt_utc': 'dt_utc',
        'size_bytes': 'size_bytes',
        'client_accessible': 'client_accessible',
        'tags': 'tags',
        'sub_reports': 'sub_reports',
        'state': 'state',
        'error_message': 'error_message',
        'download_url': 'download_url',
        'created_at_utc': 'created_at_utc',
        'updated_at_utc': 'updated_at_utc'
    }

    def __init__(self, id=None, firm_id=None, account_id=None, household_id=None, created_by_user_id=None, report_date=None, frequency=None, start_date=None, end_date=None, timestamp_utc=None, dt_utc=None, size_bytes=None, client_accessible=None, tags=None, sub_reports=None, state=None, error_message=None, download_url=None, created_at_utc=None, updated_at_utc=None):  # noqa: E501
        """InlineResponse20048Data - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._firm_id = None
        self._account_id = None
        self._household_id = None
        self._created_by_user_id = None
        self._report_date = None
        self._frequency = None
        self._start_date = None
        self._end_date = None
        self._timestamp_utc = None
        self._dt_utc = None
        self._size_bytes = None
        self._client_accessible = None
        self._tags = None
        self._sub_reports = None
        self._state = None
        self._error_message = None
        self._download_url = None
        self._created_at_utc = None
        self._updated_at_utc = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if firm_id is not None:
            self.firm_id = firm_id
        if account_id is not None:
            self.account_id = account_id
        if household_id is not None:
            self.household_id = household_id
        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if report_date is not None:
            self.report_date = report_date
        if frequency is not None:
            self.frequency = frequency
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if timestamp_utc is not None:
            self.timestamp_utc = timestamp_utc
        if dt_utc is not None:
            self.dt_utc = dt_utc
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if client_accessible is not None:
            self.client_accessible = client_accessible
        if tags is not None:
            self.tags = tags
        if sub_reports is not None:
            self.sub_reports = sub_reports
        if state is not None:
            self.state = state
        if error_message is not None:
            self.error_message = error_message
        if download_url is not None:
            self.download_url = download_url
        if created_at_utc is not None:
            self.created_at_utc = created_at_utc
        if updated_at_utc is not None:
            self.updated_at_utc = updated_at_utc

    @property
    def id(self):
        """Gets the id of this InlineResponse20048Data.  # noqa: E501

        Unique ID for this printable report object  # noqa: E501

        :return: The id of this InlineResponse20048Data.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20048Data.

        Unique ID for this printable report object  # noqa: E501

        :param id: The id of this InlineResponse20048Data.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def firm_id(self):
        """Gets the firm_id of this InlineResponse20048Data.  # noqa: E501

        ID of the owning firm  # noqa: E501

        :return: The firm_id of this InlineResponse20048Data.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this InlineResponse20048Data.

        ID of the owning firm  # noqa: E501

        :param firm_id: The firm_id of this InlineResponse20048Data.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def account_id(self):
        """Gets the account_id of this InlineResponse20048Data.  # noqa: E501

        ID of the account that the report is on. Null if household_id is non-null  # noqa: E501

        :return: The account_id of this InlineResponse20048Data.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InlineResponse20048Data.

        ID of the account that the report is on. Null if household_id is non-null  # noqa: E501

        :param account_id: The account_id of this InlineResponse20048Data.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def household_id(self):
        """Gets the household_id of this InlineResponse20048Data.  # noqa: E501

        ID of the household that the report is on. Null if account_id is non-null  # noqa: E501

        :return: The household_id of this InlineResponse20048Data.  # noqa: E501
        :rtype: int
        """
        return self._household_id

    @household_id.setter
    def household_id(self, household_id):
        """Sets the household_id of this InlineResponse20048Data.

        ID of the household that the report is on. Null if account_id is non-null  # noqa: E501

        :param household_id: The household_id of this InlineResponse20048Data.  # noqa: E501
        :type: int
        """

        self._household_id = household_id

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this InlineResponse20048Data.  # noqa: E501

        ID of the user that created the report  # noqa: E501

        :return: The created_by_user_id of this InlineResponse20048Data.  # noqa: E501
        :rtype: int
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this InlineResponse20048Data.

        ID of the user that created the report  # noqa: E501

        :param created_by_user_id: The created_by_user_id of this InlineResponse20048Data.  # noqa: E501
        :type: int
        """

        self._created_by_user_id = created_by_user_id

    @property
    def report_date(self):
        """Gets the report_date of this InlineResponse20048Data.  # noqa: E501

        Report date  # noqa: E501

        :return: The report_date of this InlineResponse20048Data.  # noqa: E501
        :rtype: datetime
        """
        return self._report_date

    @report_date.setter
    def report_date(self, report_date):
        """Sets the report_date of this InlineResponse20048Data.

        Report date  # noqa: E501

        :param report_date: The report_date of this InlineResponse20048Data.  # noqa: E501
        :type: datetime
        """

        self._report_date = report_date

    @property
    def frequency(self):
        """Gets the frequency of this InlineResponse20048Data.  # noqa: E501

        See Frequency Codes  # noqa: E501

        :return: The frequency of this InlineResponse20048Data.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this InlineResponse20048Data.

        See Frequency Codes  # noqa: E501

        :param frequency: The frequency of this InlineResponse20048Data.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    @property
    def start_date(self):
        """Gets the start_date of this InlineResponse20048Data.  # noqa: E501

        start date  # noqa: E501

        :return: The start_date of this InlineResponse20048Data.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this InlineResponse20048Data.

        start date  # noqa: E501

        :param start_date: The start_date of this InlineResponse20048Data.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this InlineResponse20048Data.  # noqa: E501

        End date  # noqa: E501

        :return: The end_date of this InlineResponse20048Data.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this InlineResponse20048Data.

        End date  # noqa: E501

        :param end_date: The end_date of this InlineResponse20048Data.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def timestamp_utc(self):
        """Gets the timestamp_utc of this InlineResponse20048Data.  # noqa: E501

        Created/last updated timestamp in UTC  # noqa: E501

        :return: The timestamp_utc of this InlineResponse20048Data.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp_utc

    @timestamp_utc.setter
    def timestamp_utc(self, timestamp_utc):
        """Sets the timestamp_utc of this InlineResponse20048Data.

        Created/last updated timestamp in UTC  # noqa: E501

        :param timestamp_utc: The timestamp_utc of this InlineResponse20048Data.  # noqa: E501
        :type: datetime
        """

        self._timestamp_utc = timestamp_utc

    @property
    def dt_utc(self):
        """Gets the dt_utc of this InlineResponse20048Data.  # noqa: E501

        Created/last updated timestamp in datetime UTC  # noqa: E501

        :return: The dt_utc of this InlineResponse20048Data.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_utc

    @dt_utc.setter
    def dt_utc(self, dt_utc):
        """Sets the dt_utc of this InlineResponse20048Data.

        Created/last updated timestamp in datetime UTC  # noqa: E501

        :param dt_utc: The dt_utc of this InlineResponse20048Data.  # noqa: E501
        :type: datetime
        """

        self._dt_utc = dt_utc

    @property
    def size_bytes(self):
        """Gets the size_bytes of this InlineResponse20048Data.  # noqa: E501

        Size of the printable report in bytes  # noqa: E501

        :return: The size_bytes of this InlineResponse20048Data.  # noqa: E501
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this InlineResponse20048Data.

        Size of the printable report in bytes  # noqa: E501

        :param size_bytes: The size_bytes of this InlineResponse20048Data.  # noqa: E501
        :type: int
        """

        self._size_bytes = size_bytes

    @property
    def client_accessible(self):
        """Gets the client_accessible of this InlineResponse20048Data.  # noqa: E501

        If true, the report is accessible in the client portal  # noqa: E501

        :return: The client_accessible of this InlineResponse20048Data.  # noqa: E501
        :rtype: bool
        """
        return self._client_accessible

    @client_accessible.setter
    def client_accessible(self, client_accessible):
        """Sets the client_accessible of this InlineResponse20048Data.

        If true, the report is accessible in the client portal  # noqa: E501

        :param client_accessible: The client_accessible of this InlineResponse20048Data.  # noqa: E501
        :type: bool
        """

        self._client_accessible = client_accessible

    @property
    def tags(self):
        """Gets the tags of this InlineResponse20048Data.  # noqa: E501

        List of specified tags, if applicable (system-generated reports are always untagged)  # noqa: E501

        :return: The tags of this InlineResponse20048Data.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InlineResponse20048Data.

        List of specified tags, if applicable (system-generated reports are always untagged)  # noqa: E501

        :param tags: The tags of this InlineResponse20048Data.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def sub_reports(self):
        """Gets the sub_reports of this InlineResponse20048Data.  # noqa: E501

        List of sub-reports included in this printable report  # noqa: E501

        :return: The sub_reports of this InlineResponse20048Data.  # noqa: E501
        :rtype: list[str]
        """
        return self._sub_reports

    @sub_reports.setter
    def sub_reports(self, sub_reports):
        """Sets the sub_reports of this InlineResponse20048Data.

        List of sub-reports included in this printable report  # noqa: E501

        :param sub_reports: The sub_reports of this InlineResponse20048Data.  # noqa: E501
        :type: list[str]
        """

        self._sub_reports = sub_reports

    @property
    def state(self):
        """Gets the state of this InlineResponse20048Data.  # noqa: E501

        0 if the report is generating, R if it's ready, and E if it's failed  # noqa: E501

        :return: The state of this InlineResponse20048Data.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse20048Data.

        0 if the report is generating, R if it's ready, and E if it's failed  # noqa: E501

        :param state: The state of this InlineResponse20048Data.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def error_message(self):
        """Gets the error_message of this InlineResponse20048Data.  # noqa: E501

        Error message if in error state E  # noqa: E501

        :return: The error_message of this InlineResponse20048Data.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this InlineResponse20048Data.

        Error message if in error state E  # noqa: E501

        :param error_message: The error_message of this InlineResponse20048Data.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def download_url(self):
        """Gets the download_url of this InlineResponse20048Data.  # noqa: E501

        Download link which specifies the url to generate and return a binary stream for the Printable PDF  # noqa: E501

        :return: The download_url of this InlineResponse20048Data.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this InlineResponse20048Data.

        Download link which specifies the url to generate and return a binary stream for the Printable PDF  # noqa: E501

        :param download_url: The download_url of this InlineResponse20048Data.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def created_at_utc(self):
        """Gets the created_at_utc of this InlineResponse20048Data.  # noqa: E501

        Timestamp for when the record was created  # noqa: E501

        :return: The created_at_utc of this InlineResponse20048Data.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at_utc

    @created_at_utc.setter
    def created_at_utc(self, created_at_utc):
        """Sets the created_at_utc of this InlineResponse20048Data.

        Timestamp for when the record was created  # noqa: E501

        :param created_at_utc: The created_at_utc of this InlineResponse20048Data.  # noqa: E501
        :type: datetime
        """

        self._created_at_utc = created_at_utc

    @property
    def updated_at_utc(self):
        """Gets the updated_at_utc of this InlineResponse20048Data.  # noqa: E501

        Timestamp for when the record was updated  # noqa: E501

        :return: The updated_at_utc of this InlineResponse20048Data.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at_utc

    @updated_at_utc.setter
    def updated_at_utc(self, updated_at_utc):
        """Sets the updated_at_utc of this InlineResponse20048Data.

        Timestamp for when the record was updated  # noqa: E501

        :param updated_at_utc: The updated_at_utc of this InlineResponse20048Data.  # noqa: E501
        :type: datetime
        """

        self._updated_at_utc = updated_at_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20048Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20048Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsFilterBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'firm_id': 'int',
        'inception_date': 'date',
        'close_date': 'date',
        'status': 'str',
        'number': 'str',
        'custodian': 'str',
        'city': 'str',
        'zip_code': 'str',
        'acct_type': 'str',
        'is_tax_deferred': 'bool',
        'is_taxable': 'bool',
        'payment_source': 'str',
        'advisor_code': 'str',
        'household_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'firm_id': 'firm_id',
        'inception_date': 'inception_date',
        'close_date': 'close_date',
        'status': 'status',
        'number': 'number',
        'custodian': 'custodian',
        'city': 'city',
        'zip_code': 'zip_code',
        'acct_type': 'acct_type',
        'is_tax_deferred': 'is_tax_deferred',
        'is_taxable': 'is_taxable',
        'payment_source': 'payment_source',
        'advisor_code': 'advisor_code',
        'household_id': 'household_id'
    }

    def __init__(self, id=None, name=None, firm_id=None, inception_date=None, close_date=None, status=None, number=None, custodian=None, city=None, zip_code=None, acct_type=None, is_tax_deferred=None, is_taxable=None, payment_source=None, advisor_code=None, household_id=None):  # noqa: E501
        """AccountsFilterBody - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._firm_id = None
        self._inception_date = None
        self._close_date = None
        self._status = None
        self._number = None
        self._custodian = None
        self._city = None
        self._zip_code = None
        self._acct_type = None
        self._is_tax_deferred = None
        self._is_taxable = None
        self._payment_source = None
        self._advisor_code = None
        self._household_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if firm_id is not None:
            self.firm_id = firm_id
        if inception_date is not None:
            self.inception_date = inception_date
        if close_date is not None:
            self.close_date = close_date
        if status is not None:
            self.status = status
        if number is not None:
            self.number = number
        if custodian is not None:
            self.custodian = custodian
        if city is not None:
            self.city = city
        if zip_code is not None:
            self.zip_code = zip_code
        if acct_type is not None:
            self.acct_type = acct_type
        if is_tax_deferred is not None:
            self.is_tax_deferred = is_tax_deferred
        if is_taxable is not None:
            self.is_taxable = is_taxable
        if payment_source is not None:
            self.payment_source = payment_source
        if advisor_code is not None:
            self.advisor_code = advisor_code
        if household_id is not None:
            self.household_id = household_id

    @property
    def id(self):
        """Gets the id of this AccountsFilterBody.  # noqa: E501

        Unique ID for this account object  # noqa: E501

        :return: The id of this AccountsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountsFilterBody.

        Unique ID for this account object  # noqa: E501

        :param id: The id of this AccountsFilterBody.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AccountsFilterBody.  # noqa: E501

        Populated from custodian data but can be modified by users  # noqa: E501

        :return: The name of this AccountsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountsFilterBody.

        Populated from custodian data but can be modified by users  # noqa: E501

        :param name: The name of this AccountsFilterBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def firm_id(self):
        """Gets the firm_id of this AccountsFilterBody.  # noqa: E501

        ID of the owning firm  # noqa: E501

        :return: The firm_id of this AccountsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this AccountsFilterBody.

        ID of the owning firm  # noqa: E501

        :param firm_id: The firm_id of this AccountsFilterBody.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def inception_date(self):
        """Gets the inception_date of this AccountsFilterBody.  # noqa: E501

        Date of account inception, if applicable. May differ from opening date.  # noqa: E501

        :return: The inception_date of this AccountsFilterBody.  # noqa: E501
        :rtype: date
        """
        return self._inception_date

    @inception_date.setter
    def inception_date(self, inception_date):
        """Sets the inception_date of this AccountsFilterBody.

        Date of account inception, if applicable. May differ from opening date.  # noqa: E501

        :param inception_date: The inception_date of this AccountsFilterBody.  # noqa: E501
        :type: date
        """

        self._inception_date = inception_date

    @property
    def close_date(self):
        """Gets the close_date of this AccountsFilterBody.  # noqa: E501

        Date the account was closed, if applicable  # noqa: E501

        :return: The close_date of this AccountsFilterBody.  # noqa: E501
        :rtype: date
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date):
        """Sets the close_date of this AccountsFilterBody.

        Date the account was closed, if applicable  # noqa: E501

        :param close_date: The close_date of this AccountsFilterBody.  # noqa: E501
        :type: date
        """

        self._close_date = close_date

    @property
    def status(self):
        """Gets the status of this AccountsFilterBody.  # noqa: E501

        Status of the account object. It can be funded, papered, closed or slate. Funded account is considered active account, Papered or Closed account is inactive, and Stale is unknown  # noqa: E501

        :return: The status of this AccountsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountsFilterBody.

        Status of the account object. It can be funded, papered, closed or slate. Funded account is considered active account, Papered or Closed account is inactive, and Stale is unknown  # noqa: E501

        :param status: The status of this AccountsFilterBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["funded", "papered", "closed", "stale"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def number(self):
        """Gets the number of this AccountsFilterBody.  # noqa: E501

        Account number  # noqa: E501

        :return: The number of this AccountsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this AccountsFilterBody.

        Account number  # noqa: E501

        :param number: The number of this AccountsFilterBody.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def custodian(self):
        """Gets the custodian of this AccountsFilterBody.  # noqa: E501

        Custodian the account data comes from. TDA=TD Ameritrade, SWB=Schwab, NFS=Fidelity, PER=Pershing, MLT=MillenniumTrust, RJA=RaymondJames, HDG=Manual  # noqa: E501

        :return: The custodian of this AccountsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._custodian

    @custodian.setter
    def custodian(self, custodian):
        """Sets the custodian of this AccountsFilterBody.

        Custodian the account data comes from. TDA=TD Ameritrade, SWB=Schwab, NFS=Fidelity, PER=Pershing, MLT=MillenniumTrust, RJA=RaymondJames, HDG=Manual  # noqa: E501

        :param custodian: The custodian of this AccountsFilterBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["TDA", "SWB", "NFS", "PER", "DST", "MLT", "RJA", "HDG"]  # noqa: E501
        if custodian not in allowed_values:
            raise ValueError(
                "Invalid value for `custodian` ({0}), must be one of {1}"  # noqa: E501
                .format(custodian, allowed_values)
            )

        self._custodian = custodian

    @property
    def city(self):
        """Gets the city of this AccountsFilterBody.  # noqa: E501

        City of the account-holder  # noqa: E501

        :return: The city of this AccountsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AccountsFilterBody.

        City of the account-holder  # noqa: E501

        :param city: The city of this AccountsFilterBody.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def zip_code(self):
        """Gets the zip_code of this AccountsFilterBody.  # noqa: E501

        Zip code of the account-holder  # noqa: E501

        :return: The zip_code of this AccountsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this AccountsFilterBody.

        Zip code of the account-holder  # noqa: E501

        :param zip_code: The zip_code of this AccountsFilterBody.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def acct_type(self):
        """Gets the acct_type of this AccountsFilterBody.  # noqa: E501

        Type of account. Example, IRA Roth, 401k, etc.  # noqa: E501

        :return: The acct_type of this AccountsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._acct_type

    @acct_type.setter
    def acct_type(self, acct_type):
        """Sets the acct_type of this AccountsFilterBody.

        Type of account. Example, IRA Roth, 401k, etc.  # noqa: E501

        :param acct_type: The acct_type of this AccountsFilterBody.  # noqa: E501
        :type: str
        """

        self._acct_type = acct_type

    @property
    def is_tax_deferred(self):
        """Gets the is_tax_deferred of this AccountsFilterBody.  # noqa: E501

        True if this account is tax deferrable. This data is typically provided by the financial institution  # noqa: E501

        :return: The is_tax_deferred of this AccountsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_tax_deferred

    @is_tax_deferred.setter
    def is_tax_deferred(self, is_tax_deferred):
        """Sets the is_tax_deferred of this AccountsFilterBody.

        True if this account is tax deferrable. This data is typically provided by the financial institution  # noqa: E501

        :param is_tax_deferred: The is_tax_deferred of this AccountsFilterBody.  # noqa: E501
        :type: bool
        """

        self._is_tax_deferred = is_tax_deferred

    @property
    def is_taxable(self):
        """Gets the is_taxable of this AccountsFilterBody.  # noqa: E501

        True if this account is taxable. This data is typically provided by the financial insitution  # noqa: E501

        :return: The is_taxable of this AccountsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_taxable

    @is_taxable.setter
    def is_taxable(self, is_taxable):
        """Sets the is_taxable of this AccountsFilterBody.

        True if this account is taxable. This data is typically provided by the financial insitution  # noqa: E501

        :param is_taxable: The is_taxable of this AccountsFilterBody.  # noqa: E501
        :type: bool
        """

        self._is_taxable = is_taxable

    @property
    def payment_source(self):
        """Gets the payment_source of this AccountsFilterBody.  # noqa: E501

        C=billed at the custodian D=billed directly  # noqa: E501

        :return: The payment_source of this AccountsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._payment_source

    @payment_source.setter
    def payment_source(self, payment_source):
        """Sets the payment_source of this AccountsFilterBody.

        C=billed at the custodian D=billed directly  # noqa: E501

        :param payment_source: The payment_source of this AccountsFilterBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["C", "D"]  # noqa: E501
        if payment_source not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_source` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_source, allowed_values)
            )

        self._payment_source = payment_source

    @property
    def advisor_code(self):
        """Gets the advisor_code of this AccountsFilterBody.  # noqa: E501

        Advisor code for this account object  # noqa: E501

        :return: The advisor_code of this AccountsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._advisor_code

    @advisor_code.setter
    def advisor_code(self, advisor_code):
        """Sets the advisor_code of this AccountsFilterBody.

        Advisor code for this account object  # noqa: E501

        :param advisor_code: The advisor_code of this AccountsFilterBody.  # noqa: E501
        :type: str
        """

        self._advisor_code = advisor_code

    @property
    def household_id(self):
        """Gets the household_id of this AccountsFilterBody.  # noqa: E501

        Household Id this account belongs to  # noqa: E501

        :return: The household_id of this AccountsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._household_id

    @household_id.setter
    def household_id(self, household_id):
        """Sets the household_id of this AccountsFilterBody.

        Household Id this account belongs to  # noqa: E501

        :param household_id: The household_id of this AccountsFilterBody.  # noqa: E501
        :type: int
        """

        self._household_id = household_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsFilterBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsFilterBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

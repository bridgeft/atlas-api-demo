# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BillingReportsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing_date': 'str',
        'create_invoices': 'bool'
    }

    attribute_map = {
        'billing_date': 'billing_date',
        'create_invoices': 'create_invoices'
    }

    def __init__(self, billing_date=None, create_invoices=None):  # noqa: E501
        """BillingReportsBody - a model defined in Swagger"""  # noqa: E501
        self._billing_date = None
        self._create_invoices = None
        self.discriminator = None
        if billing_date is not None:
            self.billing_date = billing_date
        if create_invoices is not None:
            self.create_invoices = create_invoices

    @property
    def billing_date(self):
        """Gets the billing_date of this BillingReportsBody.  # noqa: E501

        The date to run a billing calculation on  # noqa: E501

        :return: The billing_date of this BillingReportsBody.  # noqa: E501
        :rtype: str
        """
        return self._billing_date

    @billing_date.setter
    def billing_date(self, billing_date):
        """Sets the billing_date of this BillingReportsBody.

        The date to run a billing calculation on  # noqa: E501

        :param billing_date: The billing_date of this BillingReportsBody.  # noqa: E501
        :type: str
        """

        self._billing_date = billing_date

    @property
    def create_invoices(self):
        """Gets the create_invoices of this BillingReportsBody.  # noqa: E501

        Whether to create Invoice PDFs during the billing calculation job  # noqa: E501

        :return: The create_invoices of this BillingReportsBody.  # noqa: E501
        :rtype: bool
        """
        return self._create_invoices

    @create_invoices.setter
    def create_invoices(self, create_invoices):
        """Sets the create_invoices of this BillingReportsBody.

        Whether to create Invoice PDFs during the billing calculation job  # noqa: E501

        :param create_invoices: The create_invoices of this BillingReportsBody.  # noqa: E501
        :type: bool
        """

        self._create_invoices = create_invoices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingReportsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingReportsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

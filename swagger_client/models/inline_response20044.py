# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20044(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mtd': 'MTD',
        'qtd': 'Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd',
        'ytd': 'Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd',
        'one': 'Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd',
        'three': 'Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd',
        'five': 'Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd',
        'itd': 'Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd',
        'itda': 'Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd'
    }

    attribute_map = {
        'mtd': 'mtd',
        'qtd': 'qtd',
        'ytd': 'ytd',
        'one': 'one',
        'three': 'three',
        'five': 'five',
        'itd': 'itd',
        'itda': 'itda'
    }

    def __init__(self, mtd=None, qtd=None, ytd=None, one=None, three=None, five=None, itd=None, itda=None):  # noqa: E501
        """InlineResponse20044 - a model defined in Swagger"""  # noqa: E501
        self._mtd = None
        self._qtd = None
        self._ytd = None
        self._one = None
        self._three = None
        self._five = None
        self._itd = None
        self._itda = None
        self.discriminator = None
        if mtd is not None:
            self.mtd = mtd
        if qtd is not None:
            self.qtd = qtd
        if ytd is not None:
            self.ytd = ytd
        if one is not None:
            self.one = one
        if three is not None:
            self.three = three
        if five is not None:
            self.five = five
        if itd is not None:
            self.itd = itd
        if itda is not None:
            self.itda = itda

    @property
    def mtd(self):
        """Gets the mtd of this InlineResponse20044.  # noqa: E501


        :return: The mtd of this InlineResponse20044.  # noqa: E501
        :rtype: MTD
        """
        return self._mtd

    @mtd.setter
    def mtd(self, mtd):
        """Sets the mtd of this InlineResponse20044.


        :param mtd: The mtd of this InlineResponse20044.  # noqa: E501
        :type: MTD
        """

        self._mtd = mtd

    @property
    def qtd(self):
        """Gets the qtd of this InlineResponse20044.  # noqa: E501


        :return: The qtd of this InlineResponse20044.  # noqa: E501
        :rtype: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """
        return self._qtd

    @qtd.setter
    def qtd(self, qtd):
        """Sets the qtd of this InlineResponse20044.


        :param qtd: The qtd of this InlineResponse20044.  # noqa: E501
        :type: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """

        self._qtd = qtd

    @property
    def ytd(self):
        """Gets the ytd of this InlineResponse20044.  # noqa: E501


        :return: The ytd of this InlineResponse20044.  # noqa: E501
        :rtype: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """
        return self._ytd

    @ytd.setter
    def ytd(self, ytd):
        """Sets the ytd of this InlineResponse20044.


        :param ytd: The ytd of this InlineResponse20044.  # noqa: E501
        :type: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """

        self._ytd = ytd

    @property
    def one(self):
        """Gets the one of this InlineResponse20044.  # noqa: E501


        :return: The one of this InlineResponse20044.  # noqa: E501
        :rtype: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """
        return self._one

    @one.setter
    def one(self, one):
        """Sets the one of this InlineResponse20044.


        :param one: The one of this InlineResponse20044.  # noqa: E501
        :type: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """

        self._one = one

    @property
    def three(self):
        """Gets the three of this InlineResponse20044.  # noqa: E501


        :return: The three of this InlineResponse20044.  # noqa: E501
        :rtype: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """
        return self._three

    @three.setter
    def three(self, three):
        """Sets the three of this InlineResponse20044.


        :param three: The three of this InlineResponse20044.  # noqa: E501
        :type: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """

        self._three = three

    @property
    def five(self):
        """Gets the five of this InlineResponse20044.  # noqa: E501


        :return: The five of this InlineResponse20044.  # noqa: E501
        :rtype: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """
        return self._five

    @five.setter
    def five(self, five):
        """Sets the five of this InlineResponse20044.


        :param five: The five of this InlineResponse20044.  # noqa: E501
        :type: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """

        self._five = five

    @property
    def itd(self):
        """Gets the itd of this InlineResponse20044.  # noqa: E501


        :return: The itd of this InlineResponse20044.  # noqa: E501
        :rtype: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """
        return self._itd

    @itd.setter
    def itd(self, itd):
        """Sets the itd of this InlineResponse20044.


        :param itd: The itd of this InlineResponse20044.  # noqa: E501
        :type: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """

        self._itd = itd

    @property
    def itda(self):
        """Gets the itda of this InlineResponse20044.  # noqa: E501


        :return: The itda of this InlineResponse20044.  # noqa: E501
        :rtype: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """
        return self._itda

    @itda.setter
    def itda(self, itda):
        """Sets the itda of this InlineResponse20044.


        :param itda: The itda of this InlineResponse20044.  # noqa: E501
        :type: Paths1analytics1householdPerformancepostresponses200contentapplication1jsonschemaitemspropertiesmtd
        """

        self._itda = itda

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20044, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20044):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

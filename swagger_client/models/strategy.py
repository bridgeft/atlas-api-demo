# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Strategy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'firm_id': 'int',
        'description': 'str',
        'investment_minimum': 'float',
        'fee': 'float',
        'benchmark_id': 'int',
        'strategy_type': 'str',
        'tax_managed': 'bool',
        'risk_category': 'str',
        'search_tags': 'list[str]',
        'asset_type': 'str',
        'fact_sheet_available': 'bool',
        'esg': 'bool',
        'etf_action_identifier': 'str',
        'security_allocations': 'list[SecurityAllocation]',
        'created_at_utc': 'datetime',
        'updated_at_utc': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'firm_id': 'firm_id',
        'description': 'description',
        'investment_minimum': 'investment_minimum',
        'fee': 'fee',
        'benchmark_id': 'benchmark_id',
        'strategy_type': 'strategy_type',
        'tax_managed': 'tax_managed',
        'risk_category': 'risk_category',
        'search_tags': 'search_tags',
        'asset_type': 'asset_type',
        'fact_sheet_available': 'fact_sheet_available',
        'esg': 'esg',
        'etf_action_identifier': 'etf_action_identifier',
        'security_allocations': 'security_allocations',
        'created_at_utc': 'created_at_utc',
        'updated_at_utc': 'updated_at_utc'
    }

    def __init__(self, id=None, name=None, firm_id=None, description=None, investment_minimum=None, fee=None, benchmark_id=None, strategy_type=None, tax_managed=None, risk_category=None, search_tags=None, asset_type=None, fact_sheet_available=None, esg=None, etf_action_identifier=None, security_allocations=None, created_at_utc=None, updated_at_utc=None):  # noqa: E501
        """Strategy - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._firm_id = None
        self._description = None
        self._investment_minimum = None
        self._fee = None
        self._benchmark_id = None
        self._strategy_type = None
        self._tax_managed = None
        self._risk_category = None
        self._search_tags = None
        self._asset_type = None
        self._fact_sheet_available = None
        self._esg = None
        self._etf_action_identifier = None
        self._security_allocations = None
        self._created_at_utc = None
        self._updated_at_utc = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if firm_id is not None:
            self.firm_id = firm_id
        if description is not None:
            self.description = description
        if investment_minimum is not None:
            self.investment_minimum = investment_minimum
        if fee is not None:
            self.fee = fee
        if benchmark_id is not None:
            self.benchmark_id = benchmark_id
        if strategy_type is not None:
            self.strategy_type = strategy_type
        if tax_managed is not None:
            self.tax_managed = tax_managed
        if risk_category is not None:
            self.risk_category = risk_category
        if search_tags is not None:
            self.search_tags = search_tags
        if asset_type is not None:
            self.asset_type = asset_type
        if fact_sheet_available is not None:
            self.fact_sheet_available = fact_sheet_available
        if esg is not None:
            self.esg = esg
        if etf_action_identifier is not None:
            self.etf_action_identifier = etf_action_identifier
        if security_allocations is not None:
            self.security_allocations = security_allocations
        if created_at_utc is not None:
            self.created_at_utc = created_at_utc
        if updated_at_utc is not None:
            self.updated_at_utc = updated_at_utc

    @property
    def id(self):
        """Gets the id of this Strategy.  # noqa: E501

        Unique ID for this strategy object  # noqa: E501

        :return: The id of this Strategy.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Strategy.

        Unique ID for this strategy object  # noqa: E501

        :param id: The id of this Strategy.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Strategy.  # noqa: E501

        Name for the strategy  # noqa: E501

        :return: The name of this Strategy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Strategy.

        Name for the strategy  # noqa: E501

        :param name: The name of this Strategy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def firm_id(self):
        """Gets the firm_id of this Strategy.  # noqa: E501

        Id of the firm this strategy is associated with  # noqa: E501

        :return: The firm_id of this Strategy.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this Strategy.

        Id of the firm this strategy is associated with  # noqa: E501

        :param firm_id: The firm_id of this Strategy.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def description(self):
        """Gets the description of this Strategy.  # noqa: E501

        Description of the strategy  # noqa: E501

        :return: The description of this Strategy.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Strategy.

        Description of the strategy  # noqa: E501

        :param description: The description of this Strategy.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def investment_minimum(self):
        """Gets the investment_minimum of this Strategy.  # noqa: E501

        Investment minimum  # noqa: E501

        :return: The investment_minimum of this Strategy.  # noqa: E501
        :rtype: float
        """
        return self._investment_minimum

    @investment_minimum.setter
    def investment_minimum(self, investment_minimum):
        """Sets the investment_minimum of this Strategy.

        Investment minimum  # noqa: E501

        :param investment_minimum: The investment_minimum of this Strategy.  # noqa: E501
        :type: float
        """

        self._investment_minimum = investment_minimum

    @property
    def fee(self):
        """Gets the fee of this Strategy.  # noqa: E501

        Fee reported on the strategy  # noqa: E501

        :return: The fee of this Strategy.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this Strategy.

        Fee reported on the strategy  # noqa: E501

        :param fee: The fee of this Strategy.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def benchmark_id(self):
        """Gets the benchmark_id of this Strategy.  # noqa: E501

        Id of the benchmark associated with this strategy  # noqa: E501

        :return: The benchmark_id of this Strategy.  # noqa: E501
        :rtype: int
        """
        return self._benchmark_id

    @benchmark_id.setter
    def benchmark_id(self, benchmark_id):
        """Sets the benchmark_id of this Strategy.

        Id of the benchmark associated with this strategy  # noqa: E501

        :param benchmark_id: The benchmark_id of this Strategy.  # noqa: E501
        :type: int
        """

        self._benchmark_id = benchmark_id

    @property
    def strategy_type(self):
        """Gets the strategy_type of this Strategy.  # noqa: E501

        Type of the strategy.  # noqa: E501

        :return: The strategy_type of this Strategy.  # noqa: E501
        :rtype: str
        """
        return self._strategy_type

    @strategy_type.setter
    def strategy_type(self, strategy_type):
        """Sets the strategy_type of this Strategy.

        Type of the strategy.  # noqa: E501

        :param strategy_type: The strategy_type of this Strategy.  # noqa: E501
        :type: str
        """
        allowed_values = ["Core", "Satellite", "Income", "Alternatives"]  # noqa: E501
        if strategy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `strategy_type` ({0}), must be one of {1}"  # noqa: E501
                .format(strategy_type, allowed_values)
            )

        self._strategy_type = strategy_type

    @property
    def tax_managed(self):
        """Gets the tax_managed of this Strategy.  # noqa: E501

        Is the tax managed?  # noqa: E501

        :return: The tax_managed of this Strategy.  # noqa: E501
        :rtype: bool
        """
        return self._tax_managed

    @tax_managed.setter
    def tax_managed(self, tax_managed):
        """Sets the tax_managed of this Strategy.

        Is the tax managed?  # noqa: E501

        :param tax_managed: The tax_managed of this Strategy.  # noqa: E501
        :type: bool
        """

        self._tax_managed = tax_managed

    @property
    def risk_category(self):
        """Gets the risk_category of this Strategy.  # noqa: E501

        Risk category of the strategy. CP for Capital Preservation, CO for Conservative, MC for Moderate Conservative, MO for Moderate, MG for Moderate Growth, GR for Growth, AG for Aggressive Growth  # noqa: E501

        :return: The risk_category of this Strategy.  # noqa: E501
        :rtype: str
        """
        return self._risk_category

    @risk_category.setter
    def risk_category(self, risk_category):
        """Sets the risk_category of this Strategy.

        Risk category of the strategy. CP for Capital Preservation, CO for Conservative, MC for Moderate Conservative, MO for Moderate, MG for Moderate Growth, GR for Growth, AG for Aggressive Growth  # noqa: E501

        :param risk_category: The risk_category of this Strategy.  # noqa: E501
        :type: str
        """
        allowed_values = ["CP", "CO", "MC", "MO", "MG", "GR", "AG"]  # noqa: E501
        if risk_category not in allowed_values:
            raise ValueError(
                "Invalid value for `risk_category` ({0}), must be one of {1}"  # noqa: E501
                .format(risk_category, allowed_values)
            )

        self._risk_category = risk_category

    @property
    def search_tags(self):
        """Gets the search_tags of this Strategy.  # noqa: E501

        Search tags for the strategy  # noqa: E501

        :return: The search_tags of this Strategy.  # noqa: E501
        :rtype: list[str]
        """
        return self._search_tags

    @search_tags.setter
    def search_tags(self, search_tags):
        """Sets the search_tags of this Strategy.

        Search tags for the strategy  # noqa: E501

        :param search_tags: The search_tags of this Strategy.  # noqa: E501
        :type: list[str]
        """

        self._search_tags = search_tags

    @property
    def asset_type(self):
        """Gets the asset_type of this Strategy.  # noqa: E501

        Asset type of the strategy  # noqa: E501

        :return: The asset_type of this Strategy.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this Strategy.

        Asset type of the strategy  # noqa: E501

        :param asset_type: The asset_type of this Strategy.  # noqa: E501
        :type: str
        """

        self._asset_type = asset_type

    @property
    def fact_sheet_available(self):
        """Gets the fact_sheet_available of this Strategy.  # noqa: E501

        Is the fact sheet available?  # noqa: E501

        :return: The fact_sheet_available of this Strategy.  # noqa: E501
        :rtype: bool
        """
        return self._fact_sheet_available

    @fact_sheet_available.setter
    def fact_sheet_available(self, fact_sheet_available):
        """Sets the fact_sheet_available of this Strategy.

        Is the fact sheet available?  # noqa: E501

        :param fact_sheet_available: The fact_sheet_available of this Strategy.  # noqa: E501
        :type: bool
        """

        self._fact_sheet_available = fact_sheet_available

    @property
    def esg(self):
        """Gets the esg of this Strategy.  # noqa: E501

        Is environmental, social, governance?  # noqa: E501

        :return: The esg of this Strategy.  # noqa: E501
        :rtype: bool
        """
        return self._esg

    @esg.setter
    def esg(self, esg):
        """Sets the esg of this Strategy.

        Is environmental, social, governance?  # noqa: E501

        :param esg: The esg of this Strategy.  # noqa: E501
        :type: bool
        """

        self._esg = esg

    @property
    def etf_action_identifier(self):
        """Gets the etf_action_identifier of this Strategy.  # noqa: E501

        Identifier for etc action  # noqa: E501

        :return: The etf_action_identifier of this Strategy.  # noqa: E501
        :rtype: str
        """
        return self._etf_action_identifier

    @etf_action_identifier.setter
    def etf_action_identifier(self, etf_action_identifier):
        """Sets the etf_action_identifier of this Strategy.

        Identifier for etc action  # noqa: E501

        :param etf_action_identifier: The etf_action_identifier of this Strategy.  # noqa: E501
        :type: str
        """

        self._etf_action_identifier = etf_action_identifier

    @property
    def security_allocations(self):
        """Gets the security_allocations of this Strategy.  # noqa: E501

        Security allocation associated with this model  # noqa: E501

        :return: The security_allocations of this Strategy.  # noqa: E501
        :rtype: list[SecurityAllocation]
        """
        return self._security_allocations

    @security_allocations.setter
    def security_allocations(self, security_allocations):
        """Sets the security_allocations of this Strategy.

        Security allocation associated with this model  # noqa: E501

        :param security_allocations: The security_allocations of this Strategy.  # noqa: E501
        :type: list[SecurityAllocation]
        """

        self._security_allocations = security_allocations

    @property
    def created_at_utc(self):
        """Gets the created_at_utc of this Strategy.  # noqa: E501

        Timestamp for when the record was created  # noqa: E501

        :return: The created_at_utc of this Strategy.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at_utc

    @created_at_utc.setter
    def created_at_utc(self, created_at_utc):
        """Sets the created_at_utc of this Strategy.

        Timestamp for when the record was created  # noqa: E501

        :param created_at_utc: The created_at_utc of this Strategy.  # noqa: E501
        :type: datetime
        """

        self._created_at_utc = created_at_utc

    @property
    def updated_at_utc(self):
        """Gets the updated_at_utc of this Strategy.  # noqa: E501

        Timestamp for when the record was updated  # noqa: E501

        :return: The updated_at_utc of this Strategy.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at_utc

    @updated_at_utc.setter
    def updated_at_utc(self, updated_at_utc):
        """Sets the updated_at_utc of this Strategy.

        Timestamp for when the record was updated  # noqa: E501

        :param updated_at_utc: The updated_at_utc of this Strategy.  # noqa: E501
        :type: datetime
        """

        self._updated_at_utc = updated_at_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Strategy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Strategy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

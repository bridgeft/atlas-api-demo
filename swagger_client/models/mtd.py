# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MTD(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'int',
        'net_return': 'float',
        'current_balance': 'float'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'net_return': 'net_return',
        'current_balance': 'current_balance'
    }

    def __init__(self, entity_id=None, net_return=None, current_balance=None):  # noqa: E501
        """MTD - a model defined in Swagger"""  # noqa: E501
        self._entity_id = None
        self._net_return = None
        self._current_balance = None
        self.discriminator = None
        if entity_id is not None:
            self.entity_id = entity_id
        if net_return is not None:
            self.net_return = net_return
        if current_balance is not None:
            self.current_balance = current_balance

    @property
    def entity_id(self):
        """Gets the entity_id of this MTD.  # noqa: E501

        Id of the household entity  # noqa: E501

        :return: The entity_id of this MTD.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this MTD.

        Id of the household entity  # noqa: E501

        :param entity_id: The entity_id of this MTD.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def net_return(self):
        """Gets the net_return of this MTD.  # noqa: E501

        Percentage net return of the household entity  # noqa: E501

        :return: The net_return of this MTD.  # noqa: E501
        :rtype: float
        """
        return self._net_return

    @net_return.setter
    def net_return(self, net_return):
        """Sets the net_return of this MTD.

        Percentage net return of the household entity  # noqa: E501

        :param net_return: The net_return of this MTD.  # noqa: E501
        :type: float
        """

        self._net_return = net_return

    @property
    def current_balance(self):
        """Gets the current_balance of this MTD.  # noqa: E501

        Household's current balance  # noqa: E501

        :return: The current_balance of this MTD.  # noqa: E501
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this MTD.

        Household's current balance  # noqa: E501

        :param current_balance: The current_balance of this MTD.  # noqa: E501
        :type: float
        """

        self._current_balance = current_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MTD, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MTD):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

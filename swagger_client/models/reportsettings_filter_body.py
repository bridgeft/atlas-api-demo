# coding: utf-8

"""
    Atlas API

    RESTful API for controlling and interacting with Atlas data  # noqa: E501

    OpenAPI spec version: 2.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportsettingsFilterBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'firm_id': 'int',
        'user_id': 'int',
        'component': 'str',
        'account_summary': 'bool',
        'consolidated_summary': 'bool',
        'performance_summary': 'bool',
        'benchmark_perf_summary': 'bool',
        'performance_chart': 'bool',
        'appraisals': 'bool',
        'asset_allocation_top_holdings': 'bool',
        'buy_sells': 'bool',
        'deposits_withdrawals': 'bool',
        'income': 'bool',
        'realized_gain_loss': 'bool',
        'management_fees': 'bool',
        'net_investment_chart': 'bool',
        'portfolio_snapshot': 'bool',
        'household_performance_attribution': 'bool',
        'target_vs_actual_allocation': 'bool',
        'security_performance': 'bool',
        'appraisals_wo_cost_basis': 'bool',
        'risk_return_chart': 'bool',
        'security_exclusions': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'firm_id': 'firm_id',
        'user_id': 'user_id',
        'component': 'component',
        'account_summary': 'account_summary',
        'consolidated_summary': 'consolidated_summary',
        'performance_summary': 'performance_summary',
        'benchmark_perf_summary': 'benchmark_perf_summary',
        'performance_chart': 'performance_chart',
        'appraisals': 'appraisals',
        'asset_allocation_top_holdings': 'asset_allocation_top_holdings',
        'buy_sells': 'buy_sells',
        'deposits_withdrawals': 'deposits_withdrawals',
        'income': 'income',
        'realized_gain_loss': 'realized_gain_loss',
        'management_fees': 'management_fees',
        'net_investment_chart': 'net_investment_chart',
        'portfolio_snapshot': 'portfolio_snapshot',
        'household_performance_attribution': 'household_performance_attribution',
        'target_vs_actual_allocation': 'target_vs_actual_allocation',
        'security_performance': 'security_performance',
        'appraisals_wo_cost_basis': 'appraisals_wo_cost_basis',
        'risk_return_chart': 'risk_return_chart',
        'security_exclusions': 'security_exclusions'
    }

    def __init__(self, id=None, firm_id=None, user_id=None, component=None, account_summary=None, consolidated_summary=None, performance_summary=None, benchmark_perf_summary=None, performance_chart=None, appraisals=None, asset_allocation_top_holdings=None, buy_sells=None, deposits_withdrawals=None, income=None, realized_gain_loss=None, management_fees=None, net_investment_chart=None, portfolio_snapshot=None, household_performance_attribution=None, target_vs_actual_allocation=None, security_performance=None, appraisals_wo_cost_basis=None, risk_return_chart=None, security_exclusions=None):  # noqa: E501
        """ReportsettingsFilterBody - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._firm_id = None
        self._user_id = None
        self._component = None
        self._account_summary = None
        self._consolidated_summary = None
        self._performance_summary = None
        self._benchmark_perf_summary = None
        self._performance_chart = None
        self._appraisals = None
        self._asset_allocation_top_holdings = None
        self._buy_sells = None
        self._deposits_withdrawals = None
        self._income = None
        self._realized_gain_loss = None
        self._management_fees = None
        self._net_investment_chart = None
        self._portfolio_snapshot = None
        self._household_performance_attribution = None
        self._target_vs_actual_allocation = None
        self._security_performance = None
        self._appraisals_wo_cost_basis = None
        self._risk_return_chart = None
        self._security_exclusions = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if firm_id is not None:
            self.firm_id = firm_id
        if user_id is not None:
            self.user_id = user_id
        if component is not None:
            self.component = component
        if account_summary is not None:
            self.account_summary = account_summary
        if consolidated_summary is not None:
            self.consolidated_summary = consolidated_summary
        if performance_summary is not None:
            self.performance_summary = performance_summary
        if benchmark_perf_summary is not None:
            self.benchmark_perf_summary = benchmark_perf_summary
        if performance_chart is not None:
            self.performance_chart = performance_chart
        if appraisals is not None:
            self.appraisals = appraisals
        if asset_allocation_top_holdings is not None:
            self.asset_allocation_top_holdings = asset_allocation_top_holdings
        if buy_sells is not None:
            self.buy_sells = buy_sells
        if deposits_withdrawals is not None:
            self.deposits_withdrawals = deposits_withdrawals
        if income is not None:
            self.income = income
        if realized_gain_loss is not None:
            self.realized_gain_loss = realized_gain_loss
        if management_fees is not None:
            self.management_fees = management_fees
        if net_investment_chart is not None:
            self.net_investment_chart = net_investment_chart
        if portfolio_snapshot is not None:
            self.portfolio_snapshot = portfolio_snapshot
        if household_performance_attribution is not None:
            self.household_performance_attribution = household_performance_attribution
        if target_vs_actual_allocation is not None:
            self.target_vs_actual_allocation = target_vs_actual_allocation
        if security_performance is not None:
            self.security_performance = security_performance
        if appraisals_wo_cost_basis is not None:
            self.appraisals_wo_cost_basis = appraisals_wo_cost_basis
        if risk_return_chart is not None:
            self.risk_return_chart = risk_return_chart
        if security_exclusions is not None:
            self.security_exclusions = security_exclusions

    @property
    def id(self):
        """Gets the id of this ReportsettingsFilterBody.  # noqa: E501

        Unique ID for this report settings object  # noqa: E501

        :return: The id of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportsettingsFilterBody.

        Unique ID for this report settings object  # noqa: E501

        :param id: The id of this ReportsettingsFilterBody.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def firm_id(self):
        """Gets the firm_id of this ReportsettingsFilterBody.  # noqa: E501

        ID of the owning firm  # noqa: E501

        :return: The firm_id of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._firm_id

    @firm_id.setter
    def firm_id(self, firm_id):
        """Sets the firm_id of this ReportsettingsFilterBody.

        ID of the owning firm  # noqa: E501

        :param firm_id: The firm_id of this ReportsettingsFilterBody.  # noqa: E501
        :type: int
        """

        self._firm_id = firm_id

    @property
    def user_id(self):
        """Gets the user_id of this ReportsettingsFilterBody.  # noqa: E501

        ID of the user concerned with creating the report. If null, applied settings will be firm-wide. Otherwise, the settings are specific to the given user  # noqa: E501

        :return: The user_id of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ReportsettingsFilterBody.

        ID of the user concerned with creating the report. If null, applied settings will be firm-wide. Otherwise, the settings are specific to the given user  # noqa: E501

        :param user_id: The user_id of this ReportsettingsFilterBody.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def component(self):
        """Gets the component of this ReportsettingsFilterBody.  # noqa: E501

        Specifies to which area these settings apply (i.e., printable reports, the advisor's default settings, the client's default settings). Can either be printable, advisor_defaults, client_defaults, or user  # noqa: E501

        :return: The component of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this ReportsettingsFilterBody.

        Specifies to which area these settings apply (i.e., printable reports, the advisor's default settings, the client's default settings). Can either be printable, advisor_defaults, client_defaults, or user  # noqa: E501

        :param component: The component of this ReportsettingsFilterBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["printable", "advisor_defaults", "client_defaults", "user"]  # noqa: E501
        if component not in allowed_values:
            raise ValueError(
                "Invalid value for `component` ({0}), must be one of {1}"  # noqa: E501
                .format(component, allowed_values)
            )

        self._component = component

    @property
    def account_summary(self):
        """Gets the account_summary of this ReportsettingsFilterBody.  # noqa: E501

        Include account summary?  # noqa: E501

        :return: The account_summary of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._account_summary

    @account_summary.setter
    def account_summary(self, account_summary):
        """Sets the account_summary of this ReportsettingsFilterBody.

        Include account summary?  # noqa: E501

        :param account_summary: The account_summary of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._account_summary = account_summary

    @property
    def consolidated_summary(self):
        """Gets the consolidated_summary of this ReportsettingsFilterBody.  # noqa: E501

        Include consolidated summary?  # noqa: E501

        :return: The consolidated_summary of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._consolidated_summary

    @consolidated_summary.setter
    def consolidated_summary(self, consolidated_summary):
        """Sets the consolidated_summary of this ReportsettingsFilterBody.

        Include consolidated summary?  # noqa: E501

        :param consolidated_summary: The consolidated_summary of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._consolidated_summary = consolidated_summary

    @property
    def performance_summary(self):
        """Gets the performance_summary of this ReportsettingsFilterBody.  # noqa: E501

        Include performance summary?  # noqa: E501

        :return: The performance_summary of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._performance_summary

    @performance_summary.setter
    def performance_summary(self, performance_summary):
        """Sets the performance_summary of this ReportsettingsFilterBody.

        Include performance summary?  # noqa: E501

        :param performance_summary: The performance_summary of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._performance_summary = performance_summary

    @property
    def benchmark_perf_summary(self):
        """Gets the benchmark_perf_summary of this ReportsettingsFilterBody.  # noqa: E501

        Include benchmark performance summary?  # noqa: E501

        :return: The benchmark_perf_summary of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._benchmark_perf_summary

    @benchmark_perf_summary.setter
    def benchmark_perf_summary(self, benchmark_perf_summary):
        """Sets the benchmark_perf_summary of this ReportsettingsFilterBody.

        Include benchmark performance summary?  # noqa: E501

        :param benchmark_perf_summary: The benchmark_perf_summary of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._benchmark_perf_summary = benchmark_perf_summary

    @property
    def performance_chart(self):
        """Gets the performance_chart of this ReportsettingsFilterBody.  # noqa: E501

        Include performance chart?  # noqa: E501

        :return: The performance_chart of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._performance_chart

    @performance_chart.setter
    def performance_chart(self, performance_chart):
        """Sets the performance_chart of this ReportsettingsFilterBody.

        Include performance chart?  # noqa: E501

        :param performance_chart: The performance_chart of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._performance_chart = performance_chart

    @property
    def appraisals(self):
        """Gets the appraisals of this ReportsettingsFilterBody.  # noqa: E501

        Include appraisals?  # noqa: E501

        :return: The appraisals of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._appraisals

    @appraisals.setter
    def appraisals(self, appraisals):
        """Sets the appraisals of this ReportsettingsFilterBody.

        Include appraisals?  # noqa: E501

        :param appraisals: The appraisals of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._appraisals = appraisals

    @property
    def asset_allocation_top_holdings(self):
        """Gets the asset_allocation_top_holdings of this ReportsettingsFilterBody.  # noqa: E501

        Include asset allocation top holdings?  # noqa: E501

        :return: The asset_allocation_top_holdings of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._asset_allocation_top_holdings

    @asset_allocation_top_holdings.setter
    def asset_allocation_top_holdings(self, asset_allocation_top_holdings):
        """Sets the asset_allocation_top_holdings of this ReportsettingsFilterBody.

        Include asset allocation top holdings?  # noqa: E501

        :param asset_allocation_top_holdings: The asset_allocation_top_holdings of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._asset_allocation_top_holdings = asset_allocation_top_holdings

    @property
    def buy_sells(self):
        """Gets the buy_sells of this ReportsettingsFilterBody.  # noqa: E501

        Include buys and sells?  # noqa: E501

        :return: The buy_sells of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._buy_sells

    @buy_sells.setter
    def buy_sells(self, buy_sells):
        """Sets the buy_sells of this ReportsettingsFilterBody.

        Include buys and sells?  # noqa: E501

        :param buy_sells: The buy_sells of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._buy_sells = buy_sells

    @property
    def deposits_withdrawals(self):
        """Gets the deposits_withdrawals of this ReportsettingsFilterBody.  # noqa: E501

        Include deposits and withdrawals?  # noqa: E501

        :return: The deposits_withdrawals of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._deposits_withdrawals

    @deposits_withdrawals.setter
    def deposits_withdrawals(self, deposits_withdrawals):
        """Sets the deposits_withdrawals of this ReportsettingsFilterBody.

        Include deposits and withdrawals?  # noqa: E501

        :param deposits_withdrawals: The deposits_withdrawals of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._deposits_withdrawals = deposits_withdrawals

    @property
    def income(self):
        """Gets the income of this ReportsettingsFilterBody.  # noqa: E501

        Include income?  # noqa: E501

        :return: The income of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this ReportsettingsFilterBody.

        Include income?  # noqa: E501

        :param income: The income of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._income = income

    @property
    def realized_gain_loss(self):
        """Gets the realized_gain_loss of this ReportsettingsFilterBody.  # noqa: E501

        Include realized gain loss?  # noqa: E501

        :return: The realized_gain_loss of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._realized_gain_loss

    @realized_gain_loss.setter
    def realized_gain_loss(self, realized_gain_loss):
        """Sets the realized_gain_loss of this ReportsettingsFilterBody.

        Include realized gain loss?  # noqa: E501

        :param realized_gain_loss: The realized_gain_loss of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._realized_gain_loss = realized_gain_loss

    @property
    def management_fees(self):
        """Gets the management_fees of this ReportsettingsFilterBody.  # noqa: E501

        Include management fees?  # noqa: E501

        :return: The management_fees of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._management_fees

    @management_fees.setter
    def management_fees(self, management_fees):
        """Sets the management_fees of this ReportsettingsFilterBody.

        Include management fees?  # noqa: E501

        :param management_fees: The management_fees of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._management_fees = management_fees

    @property
    def net_investment_chart(self):
        """Gets the net_investment_chart of this ReportsettingsFilterBody.  # noqa: E501

        Include net investment chart?  # noqa: E501

        :return: The net_investment_chart of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._net_investment_chart

    @net_investment_chart.setter
    def net_investment_chart(self, net_investment_chart):
        """Sets the net_investment_chart of this ReportsettingsFilterBody.

        Include net investment chart?  # noqa: E501

        :param net_investment_chart: The net_investment_chart of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._net_investment_chart = net_investment_chart

    @property
    def portfolio_snapshot(self):
        """Gets the portfolio_snapshot of this ReportsettingsFilterBody.  # noqa: E501

        Include portfolio snapshot?  # noqa: E501

        :return: The portfolio_snapshot of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._portfolio_snapshot

    @portfolio_snapshot.setter
    def portfolio_snapshot(self, portfolio_snapshot):
        """Sets the portfolio_snapshot of this ReportsettingsFilterBody.

        Include portfolio snapshot?  # noqa: E501

        :param portfolio_snapshot: The portfolio_snapshot of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._portfolio_snapshot = portfolio_snapshot

    @property
    def household_performance_attribution(self):
        """Gets the household_performance_attribution of this ReportsettingsFilterBody.  # noqa: E501

        Include household performance attribute?  # noqa: E501

        :return: The household_performance_attribution of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._household_performance_attribution

    @household_performance_attribution.setter
    def household_performance_attribution(self, household_performance_attribution):
        """Sets the household_performance_attribution of this ReportsettingsFilterBody.

        Include household performance attribute?  # noqa: E501

        :param household_performance_attribution: The household_performance_attribution of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._household_performance_attribution = household_performance_attribution

    @property
    def target_vs_actual_allocation(self):
        """Gets the target_vs_actual_allocation of this ReportsettingsFilterBody.  # noqa: E501

        Include target vs actual allocation?  # noqa: E501

        :return: The target_vs_actual_allocation of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._target_vs_actual_allocation

    @target_vs_actual_allocation.setter
    def target_vs_actual_allocation(self, target_vs_actual_allocation):
        """Sets the target_vs_actual_allocation of this ReportsettingsFilterBody.

        Include target vs actual allocation?  # noqa: E501

        :param target_vs_actual_allocation: The target_vs_actual_allocation of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._target_vs_actual_allocation = target_vs_actual_allocation

    @property
    def security_performance(self):
        """Gets the security_performance of this ReportsettingsFilterBody.  # noqa: E501

        Include security performance?  # noqa: E501

        :return: The security_performance of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._security_performance

    @security_performance.setter
    def security_performance(self, security_performance):
        """Sets the security_performance of this ReportsettingsFilterBody.

        Include security performance?  # noqa: E501

        :param security_performance: The security_performance of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._security_performance = security_performance

    @property
    def appraisals_wo_cost_basis(self):
        """Gets the appraisals_wo_cost_basis of this ReportsettingsFilterBody.  # noqa: E501

        Include appraisals without cost basis?  # noqa: E501

        :return: The appraisals_wo_cost_basis of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._appraisals_wo_cost_basis

    @appraisals_wo_cost_basis.setter
    def appraisals_wo_cost_basis(self, appraisals_wo_cost_basis):
        """Sets the appraisals_wo_cost_basis of this ReportsettingsFilterBody.

        Include appraisals without cost basis?  # noqa: E501

        :param appraisals_wo_cost_basis: The appraisals_wo_cost_basis of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._appraisals_wo_cost_basis = appraisals_wo_cost_basis

    @property
    def risk_return_chart(self):
        """Gets the risk_return_chart of this ReportsettingsFilterBody.  # noqa: E501

        Include risk return chart?  # noqa: E501

        :return: The risk_return_chart of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._risk_return_chart

    @risk_return_chart.setter
    def risk_return_chart(self, risk_return_chart):
        """Sets the risk_return_chart of this ReportsettingsFilterBody.

        Include risk return chart?  # noqa: E501

        :param risk_return_chart: The risk_return_chart of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._risk_return_chart = risk_return_chart

    @property
    def security_exclusions(self):
        """Gets the security_exclusions of this ReportsettingsFilterBody.  # noqa: E501

        Include security exclusions?  # noqa: E501

        :return: The security_exclusions of this ReportsettingsFilterBody.  # noqa: E501
        :rtype: bool
        """
        return self._security_exclusions

    @security_exclusions.setter
    def security_exclusions(self, security_exclusions):
        """Sets the security_exclusions of this ReportsettingsFilterBody.

        Include security exclusions?  # noqa: E501

        :param security_exclusions: The security_exclusions of this ReportsettingsFilterBody.  # noqa: E501
        :type: bool
        """

        self._security_exclusions = security_exclusions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportsettingsFilterBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportsettingsFilterBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
